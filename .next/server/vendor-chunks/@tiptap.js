"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tiptap";
exports.ids = ["vendor-chunks/@tiptap"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tiptap/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   InputRule: () => (/* binding */ InputRule),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodePos: () => (/* binding */ NodePos),\n/* harmony export */   NodeView: () => (/* binding */ NodeView),\n/* harmony export */   PasteRule: () => (/* binding */ PasteRule),\n/* harmony export */   Tracker: () => (/* binding */ Tracker),\n/* harmony export */   callOrReturn: () => (/* binding */ callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* binding */ combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* binding */ createChainableState),\n/* harmony export */   createDocument: () => (/* binding */ createDocument),\n/* harmony export */   createNodeFromContent: () => (/* binding */ createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* binding */ createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* binding */ defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* binding */ deleteProps),\n/* harmony export */   elementFromString: () => (/* binding */ elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* binding */ escapeForRegEx),\n/* harmony export */   extensions: () => (/* binding */ index),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenInRange: () => (/* binding */ findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* binding */ findDuplicates),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   generateHTML: () => (/* binding */ generateHTML),\n/* harmony export */   generateJSON: () => (/* binding */ generateJSON),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   getAttributes: () => (/* binding */ getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* binding */ getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* binding */ getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* binding */ getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* binding */ getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* binding */ getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* binding */ getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* binding */ getMarkRange),\n/* harmony export */   getMarkType: () => (/* binding */ getMarkType),\n/* harmony export */   getMarksBetween: () => (/* binding */ getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* binding */ getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* binding */ getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* binding */ getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* binding */ getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* binding */ getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* binding */ getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* binding */ getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* binding */ getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* binding */ getSplittedAttributes),\n/* harmony export */   getText: () => (/* binding */ getText),\n/* harmony export */   getTextBetween: () => (/* binding */ getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* binding */ getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* binding */ getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* binding */ injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* binding */ inputRulesPlugin),\n/* harmony export */   isActive: () => (/* binding */ isActive),\n/* harmony export */   isAtEndOfNode: () => (/* binding */ isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* binding */ isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* binding */ isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   isNodeActive: () => (/* binding */ isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* binding */ isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* binding */ isNodeSelection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTextSelection: () => (/* binding */ isTextSelection),\n/* harmony export */   isiOS: () => (/* binding */ isiOS),\n/* harmony export */   markInputRule: () => (/* binding */ markInputRule),\n/* harmony export */   markPasteRule: () => (/* binding */ markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* binding */ mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   minMax: () => (/* binding */ minMax),\n/* harmony export */   nodeInputRule: () => (/* binding */ nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* binding */ nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* binding */ objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* binding */ pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* binding */ resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* binding */ selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* binding */ splitExtensions),\n/* harmony export */   textInputRule: () => (/* binding */ textInputRule),\n/* harmony export */   textPasteRule: () => (/* binding */ textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* binding */ textblockTypeInputRule),\n/* harmony export */   wrappingInputRule: () => (/* binding */ wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\");\n/* harmony import */ var _tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/keymap */ \"(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\");\n/* harmony import */ var _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/pm/model */ \"(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\");\n/* harmony import */ var _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/pm/transform */ \"(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\");\n/* harmony import */ var _tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/pm/commands */ \"(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\");\n/* harmony import */ var _tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/pm/schema-list */ \"(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\");\n\n\n\n\n\n\n\n\nfunction createChainableState(config) {\r\n    const { state, transaction } = config;\r\n    let { selection } = transaction;\r\n    let { doc } = transaction;\r\n    let { storedMarks } = transaction;\r\n    return {\r\n        ...state,\r\n        apply: state.apply.bind(state),\r\n        applyTransaction: state.applyTransaction.bind(state),\r\n        plugins: state.plugins,\r\n        schema: state.schema,\r\n        reconfigure: state.reconfigure.bind(state),\r\n        toJSON: state.toJSON.bind(state),\r\n        get storedMarks() {\r\n            return storedMarks;\r\n        },\r\n        get selection() {\r\n            return selection;\r\n        },\r\n        get doc() {\r\n            return doc;\r\n        },\r\n        get tr() {\r\n            selection = transaction.selection;\r\n            doc = transaction.doc;\r\n            storedMarks = transaction.storedMarks;\r\n            return transaction;\r\n        },\r\n    };\r\n}\n\nclass CommandManager {\r\n    constructor(props) {\r\n        this.editor = props.editor;\r\n        this.rawCommands = this.editor.extensionManager.commands;\r\n        this.customState = props.state;\r\n    }\r\n    get hasCustomState() {\r\n        return !!this.customState;\r\n    }\r\n    get state() {\r\n        return this.customState || this.editor.state;\r\n    }\r\n    get commands() {\r\n        const { rawCommands, editor, state } = this;\r\n        const { view } = editor;\r\n        const { tr } = state;\r\n        const props = this.buildProps(tr);\r\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\r\n            const method = (...args) => {\r\n                const callback = command(...args)(props);\r\n                if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\r\n                    view.dispatch(tr);\r\n                }\r\n                return callback;\r\n            };\r\n            return [name, method];\r\n        }));\r\n    }\r\n    get chain() {\r\n        return () => this.createChain();\r\n    }\r\n    get can() {\r\n        return () => this.createCan();\r\n    }\r\n    createChain(startTr, shouldDispatch = true) {\r\n        const { rawCommands, editor, state } = this;\r\n        const { view } = editor;\r\n        const callbacks = [];\r\n        const hasStartTransaction = !!startTr;\r\n        const tr = startTr || state.tr;\r\n        const run = () => {\r\n            if (!hasStartTransaction\r\n                && shouldDispatch\r\n                && !tr.getMeta('preventDispatch')\r\n                && !this.hasCustomState) {\r\n                view.dispatch(tr);\r\n            }\r\n            return callbacks.every(callback => callback === true);\r\n        };\r\n        const chain = {\r\n            ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\r\n                const chainedCommand = (...args) => {\r\n                    const props = this.buildProps(tr, shouldDispatch);\r\n                    const callback = command(...args)(props);\r\n                    callbacks.push(callback);\r\n                    return chain;\r\n                };\r\n                return [name, chainedCommand];\r\n            })),\r\n            run,\r\n        };\r\n        return chain;\r\n    }\r\n    createCan(startTr) {\r\n        const { rawCommands, state } = this;\r\n        const dispatch = false;\r\n        const tr = startTr || state.tr;\r\n        const props = this.buildProps(tr, dispatch);\r\n        const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\r\n            return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];\r\n        }));\r\n        return {\r\n            ...formattedCommands,\r\n            chain: () => this.createChain(tr, dispatch),\r\n        };\r\n    }\r\n    buildProps(tr, shouldDispatch = true) {\r\n        const { rawCommands, editor, state } = this;\r\n        const { view } = editor;\r\n        const props = {\r\n            tr,\r\n            editor,\r\n            view,\r\n            state: createChainableState({\r\n                state,\r\n                transaction: tr,\r\n            }),\r\n            dispatch: shouldDispatch ? () => undefined : undefined,\r\n            chain: () => this.createChain(tr, shouldDispatch),\r\n            can: () => this.createCan(tr),\r\n            get commands() {\r\n                return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\r\n                    return [name, (...args) => command(...args)(props)];\r\n                }));\r\n            },\r\n        };\r\n        return props;\r\n    }\r\n}\n\nclass EventEmitter {\r\n    constructor() {\r\n        this.callbacks = {};\r\n    }\r\n    on(event, fn) {\r\n        if (!this.callbacks[event]) {\r\n            this.callbacks[event] = [];\r\n        }\r\n        this.callbacks[event].push(fn);\r\n        return this;\r\n    }\r\n    emit(event, ...args) {\r\n        const callbacks = this.callbacks[event];\r\n        if (callbacks) {\r\n            callbacks.forEach(callback => callback.apply(this, args));\r\n        }\r\n        return this;\r\n    }\r\n    off(event, fn) {\r\n        const callbacks = this.callbacks[event];\r\n        if (callbacks) {\r\n            if (fn) {\r\n                this.callbacks[event] = callbacks.filter(callback => callback !== fn);\r\n            }\r\n            else {\r\n                delete this.callbacks[event];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    removeAllListeners() {\r\n        this.callbacks = {};\r\n    }\r\n}\n\nfunction getExtensionField(extension, field, context) {\r\n    if (extension.config[field] === undefined && extension.parent) {\r\n        return getExtensionField(extension.parent, field, context);\r\n    }\r\n    if (typeof extension.config[field] === 'function') {\r\n        const value = extension.config[field].bind({\r\n            ...context,\r\n            parent: extension.parent\r\n                ? getExtensionField(extension.parent, field, context)\r\n                : null,\r\n        });\r\n        return value;\r\n    }\r\n    return extension.config[field];\r\n}\n\nfunction splitExtensions(extensions) {\r\n    const baseExtensions = extensions.filter(extension => extension.type === 'extension');\r\n    const nodeExtensions = extensions.filter(extension => extension.type === 'node');\r\n    const markExtensions = extensions.filter(extension => extension.type === 'mark');\r\n    return {\r\n        baseExtensions,\r\n        nodeExtensions,\r\n        markExtensions,\r\n    };\r\n}\n\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */\r\nfunction getAttributesFromExtensions(extensions) {\r\n    const extensionAttributes = [];\r\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\r\n    const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\r\n    const defaultAttribute = {\r\n        default: null,\r\n        rendered: true,\r\n        renderHTML: null,\r\n        parseHTML: null,\r\n        keepOnSplit: true,\r\n        isRequired: false,\r\n    };\r\n    extensions.forEach(extension => {\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n        };\r\n        const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\r\n        if (!addGlobalAttributes) {\r\n            return;\r\n        }\r\n        // TODO: remove `as GlobalAttributes`\r\n        const globalAttributes = addGlobalAttributes();\r\n        globalAttributes.forEach(globalAttribute => {\r\n            globalAttribute.types.forEach(type => {\r\n                Object\r\n                    .entries(globalAttribute.attributes)\r\n                    .forEach(([name, attribute]) => {\r\n                    extensionAttributes.push({\r\n                        type,\r\n                        name,\r\n                        attribute: {\r\n                            ...defaultAttribute,\r\n                            ...attribute,\r\n                        },\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n    nodeAndMarkExtensions.forEach(extension => {\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n        };\r\n        const addAttributes = getExtensionField(extension, 'addAttributes', context);\r\n        if (!addAttributes) {\r\n            return;\r\n        }\r\n        // TODO: remove `as Attributes`\r\n        const attributes = addAttributes();\r\n        Object\r\n            .entries(attributes)\r\n            .forEach(([name, attribute]) => {\r\n            const mergedAttr = {\r\n                ...defaultAttribute,\r\n                ...attribute,\r\n            };\r\n            if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {\r\n                mergedAttr.default = mergedAttr.default();\r\n            }\r\n            if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\r\n                delete mergedAttr.default;\r\n            }\r\n            extensionAttributes.push({\r\n                type: extension.name,\r\n                name,\r\n                attribute: mergedAttr,\r\n            });\r\n        });\r\n    });\r\n    return extensionAttributes;\r\n}\n\nfunction getNodeType(nameOrType, schema) {\r\n    if (typeof nameOrType === 'string') {\r\n        if (!schema.nodes[nameOrType]) {\r\n            throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\r\n        }\r\n        return schema.nodes[nameOrType];\r\n    }\r\n    return nameOrType;\r\n}\n\nfunction mergeAttributes(...objects) {\r\n    return objects\r\n        .filter(item => !!item)\r\n        .reduce((items, item) => {\r\n        const mergedAttributes = { ...items };\r\n        Object.entries(item).forEach(([key, value]) => {\r\n            const exists = mergedAttributes[key];\r\n            if (!exists) {\r\n                mergedAttributes[key] = value;\r\n                return;\r\n            }\r\n            if (key === 'class') {\r\n                const valueClasses = value ? value.split(' ') : [];\r\n                const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\r\n                const insertClasses = valueClasses.filter(valueClass => !existingClasses.includes(valueClass));\r\n                mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ');\r\n            }\r\n            else if (key === 'style') {\r\n                mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\r\n            }\r\n            else {\r\n                mergedAttributes[key] = value;\r\n            }\r\n        });\r\n        return mergedAttributes;\r\n    }, {});\r\n}\n\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\r\n    return extensionAttributes\r\n        .filter(item => item.attribute.rendered)\r\n        .map(item => {\r\n        if (!item.attribute.renderHTML) {\r\n            return {\r\n                [item.name]: nodeOrMark.attrs[item.name],\r\n            };\r\n        }\r\n        return item.attribute.renderHTML(nodeOrMark.attrs) || {};\r\n    })\r\n        .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\r\n}\n\nfunction isFunction(value) {\r\n    return typeof value === 'function';\r\n}\n\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */\r\nfunction callOrReturn(value, context = undefined, ...props) {\r\n    if (isFunction(value)) {\r\n        if (context) {\r\n            return value.bind(context)(...props);\r\n        }\r\n        return value(...props);\r\n    }\r\n    return value;\r\n}\n\nfunction isEmptyObject(value = {}) {\r\n    return Object.keys(value).length === 0 && value.constructor === Object;\r\n}\n\nfunction fromString(value) {\r\n    if (typeof value !== 'string') {\r\n        return value;\r\n    }\r\n    if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\r\n        return Number(value);\r\n    }\r\n    if (value === 'true') {\r\n        return true;\r\n    }\r\n    if (value === 'false') {\r\n        return false;\r\n    }\r\n    return value;\r\n}\n\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */\r\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\r\n    if (parseRule.style) {\r\n        return parseRule;\r\n    }\r\n    return {\r\n        ...parseRule,\r\n        getAttrs: node => {\r\n            const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\r\n            if (oldAttributes === false) {\r\n                return false;\r\n            }\r\n            const newAttributes = extensionAttributes.reduce((items, item) => {\r\n                const value = item.attribute.parseHTML\r\n                    ? item.attribute.parseHTML(node)\r\n                    : fromString(node.getAttribute(item.name));\r\n                if (value === null || value === undefined) {\r\n                    return items;\r\n                }\r\n                return {\r\n                    ...items,\r\n                    [item.name]: value,\r\n                };\r\n            }, {});\r\n            return { ...oldAttributes, ...newAttributes };\r\n        },\r\n    };\r\n}\n\nfunction cleanUpSchemaItem(data) {\r\n    return Object.fromEntries(\r\n    // @ts-ignore\r\n    Object.entries(data).filter(([key, value]) => {\r\n        if (key === 'attrs' && isEmptyObject(value)) {\r\n            return false;\r\n        }\r\n        return value !== null && value !== undefined;\r\n    }));\r\n}\r\nfunction getSchemaByResolvedExtensions(extensions, editor) {\r\n    var _a;\r\n    const allAttributes = getAttributesFromExtensions(extensions);\r\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\r\n    const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\r\n    const nodes = Object.fromEntries(nodeExtensions.map(extension => {\r\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n            editor,\r\n        };\r\n        const extraNodeFields = extensions.reduce((fields, e) => {\r\n            const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\r\n            return {\r\n                ...fields,\r\n                ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\r\n            };\r\n        }, {});\r\n        const schema = cleanUpSchemaItem({\r\n            ...extraNodeFields,\r\n            content: callOrReturn(getExtensionField(extension, 'content', context)),\r\n            marks: callOrReturn(getExtensionField(extension, 'marks', context)),\r\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\r\n            inline: callOrReturn(getExtensionField(extension, 'inline', context)),\r\n            atom: callOrReturn(getExtensionField(extension, 'atom', context)),\r\n            selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\r\n            draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\r\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\r\n            defining: callOrReturn(getExtensionField(extension, 'defining', context)),\r\n            isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\r\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\r\n                var _a;\r\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\r\n            })),\r\n        });\r\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\r\n        if (parseHTML) {\r\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\r\n        }\r\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\r\n        if (renderHTML) {\r\n            schema.toDOM = node => renderHTML({\r\n                node,\r\n                HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\r\n            });\r\n        }\r\n        const renderText = getExtensionField(extension, 'renderText', context);\r\n        if (renderText) {\r\n            schema.toText = renderText;\r\n        }\r\n        return [extension.name, schema];\r\n    }));\r\n    const marks = Object.fromEntries(markExtensions.map(extension => {\r\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n            editor,\r\n        };\r\n        const extraMarkFields = extensions.reduce((fields, e) => {\r\n            const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\r\n            return {\r\n                ...fields,\r\n                ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\r\n            };\r\n        }, {});\r\n        const schema = cleanUpSchemaItem({\r\n            ...extraMarkFields,\r\n            inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\r\n            excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\r\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\r\n            spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\r\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\r\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\r\n                var _a;\r\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\r\n            })),\r\n        });\r\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\r\n        if (parseHTML) {\r\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\r\n        }\r\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\r\n        if (renderHTML) {\r\n            schema.toDOM = mark => renderHTML({\r\n                mark,\r\n                HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\r\n            });\r\n        }\r\n        return [extension.name, schema];\r\n    }));\r\n    return new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\r\n        topNode,\r\n        nodes,\r\n        marks,\r\n    });\r\n}\n\nfunction getSchemaTypeByName(name, schema) {\r\n    return schema.nodes[name] || schema.marks[name] || null;\r\n}\n\nfunction isExtensionRulesEnabled(extension, enabled) {\r\n    if (Array.isArray(enabled)) {\r\n        return enabled.some(enabledExtension => {\r\n            const name = typeof enabledExtension === 'string'\r\n                ? enabledExtension\r\n                : enabledExtension.name;\r\n            return name === extension.name;\r\n        });\r\n    }\r\n    return enabled;\r\n}\n\nconst getTextContentFromNodes = ($from, maxMatch = 500) => {\r\n    let textBefore = '';\r\n    const sliceEndPos = $from.parentOffset;\r\n    $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {\r\n        var _a, _b;\r\n        const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\r\n            node,\r\n            pos,\r\n            parent,\r\n            index,\r\n        }))\r\n            || node.textContent\r\n            || '%leaf%';\r\n        textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));\r\n    });\r\n    return textBefore;\r\n};\n\nfunction isRegExp(value) {\r\n    return Object.prototype.toString.call(value) === '[object RegExp]';\r\n}\n\nclass InputRule {\r\n    constructor(config) {\r\n        this.find = config.find;\r\n        this.handler = config.handler;\r\n    }\r\n}\r\nconst inputRuleMatcherHandler = (text, find) => {\r\n    if (isRegExp(find)) {\r\n        return find.exec(text);\r\n    }\r\n    const inputRuleMatch = find(text);\r\n    if (!inputRuleMatch) {\r\n        return null;\r\n    }\r\n    const result = [inputRuleMatch.text];\r\n    result.index = inputRuleMatch.index;\r\n    result.input = text;\r\n    result.data = inputRuleMatch.data;\r\n    if (inputRuleMatch.replaceWith) {\r\n        if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\r\n            console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\r\n        }\r\n        result.push(inputRuleMatch.replaceWith);\r\n    }\r\n    return result;\r\n};\r\nfunction run$1(config) {\r\n    var _a;\r\n    const { editor, from, to, text, rules, plugin, } = config;\r\n    const { view } = editor;\r\n    if (view.composing) {\r\n        return false;\r\n    }\r\n    const $from = view.state.doc.resolve(from);\r\n    if (\r\n    // check for code node\r\n    $from.parent.type.spec.code\r\n        // check for code mark\r\n        || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\r\n        return false;\r\n    }\r\n    let matched = false;\r\n    const textBefore = getTextContentFromNodes($from) + text;\r\n    rules.forEach(rule => {\r\n        if (matched) {\r\n            return;\r\n        }\r\n        const match = inputRuleMatcherHandler(textBefore, rule.find);\r\n        if (!match) {\r\n            return;\r\n        }\r\n        const tr = view.state.tr;\r\n        const state = createChainableState({\r\n            state: view.state,\r\n            transaction: tr,\r\n        });\r\n        const range = {\r\n            from: from - (match[0].length - text.length),\r\n            to,\r\n        };\r\n        const { commands, chain, can } = new CommandManager({\r\n            editor,\r\n            state,\r\n        });\r\n        const handler = rule.handler({\r\n            state,\r\n            range,\r\n            match,\r\n            commands,\r\n            chain,\r\n            can,\r\n        });\r\n        // stop if there are no changes\r\n        if (handler === null || !tr.steps.length) {\r\n            return;\r\n        }\r\n        // store transform as meta data\r\n        // so we can undo input rules within the `undoInputRules` command\r\n        tr.setMeta(plugin, {\r\n            transform: tr,\r\n            from,\r\n            to,\r\n            text,\r\n        });\r\n        view.dispatch(tr);\r\n        matched = true;\r\n    });\r\n    return matched;\r\n}\r\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\r\nfunction inputRulesPlugin(props) {\r\n    const { editor, rules } = props;\r\n    const plugin = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n        state: {\r\n            init() {\r\n                return null;\r\n            },\r\n            apply(tr, prev) {\r\n                const stored = tr.getMeta(plugin);\r\n                if (stored) {\r\n                    return stored;\r\n                }\r\n                // if InputRule is triggered by insertContent()\r\n                const simulatedInputMeta = tr.getMeta('applyInputRules');\r\n                const isSimulatedInput = !!simulatedInputMeta;\r\n                if (isSimulatedInput) {\r\n                    setTimeout(() => {\r\n                        const { from, text } = simulatedInputMeta;\r\n                        const to = from + text.length;\r\n                        run$1({\r\n                            editor,\r\n                            from,\r\n                            to,\r\n                            text,\r\n                            rules,\r\n                            plugin,\r\n                        });\r\n                    });\r\n                }\r\n                return tr.selectionSet || tr.docChanged ? null : prev;\r\n            },\r\n        },\r\n        props: {\r\n            handleTextInput(view, from, to, text) {\r\n                return run$1({\r\n                    editor,\r\n                    from,\r\n                    to,\r\n                    text,\r\n                    rules,\r\n                    plugin,\r\n                });\r\n            },\r\n            handleDOMEvents: {\r\n                compositionend: view => {\r\n                    setTimeout(() => {\r\n                        const { $cursor } = view.state.selection;\r\n                        if ($cursor) {\r\n                            run$1({\r\n                                editor,\r\n                                from: $cursor.pos,\r\n                                to: $cursor.pos,\r\n                                text: '',\r\n                                rules,\r\n                                plugin,\r\n                            });\r\n                        }\r\n                    });\r\n                    return false;\r\n                },\r\n            },\r\n            // add support for input rules to trigger on enter\r\n            // this is useful for example for code blocks\r\n            handleKeyDown(view, event) {\r\n                if (event.key !== 'Enter') {\r\n                    return false;\r\n                }\r\n                const { $cursor } = view.state.selection;\r\n                if ($cursor) {\r\n                    return run$1({\r\n                        editor,\r\n                        from: $cursor.pos,\r\n                        to: $cursor.pos,\r\n                        text: '\\n',\r\n                        rules,\r\n                        plugin,\r\n                    });\r\n                }\r\n                return false;\r\n            },\r\n        },\r\n        // @ts-ignore\r\n        isInputRules: true,\r\n    });\r\n    return plugin;\r\n}\n\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\n\nclass PasteRule {\r\n    constructor(config) {\r\n        this.find = config.find;\r\n        this.handler = config.handler;\r\n    }\r\n}\r\nconst pasteRuleMatcherHandler = (text, find, event) => {\r\n    if (isRegExp(find)) {\r\n        return [...text.matchAll(find)];\r\n    }\r\n    const matches = find(text, event);\r\n    if (!matches) {\r\n        return [];\r\n    }\r\n    return matches.map(pasteRuleMatch => {\r\n        const result = [pasteRuleMatch.text];\r\n        result.index = pasteRuleMatch.index;\r\n        result.input = text;\r\n        result.data = pasteRuleMatch.data;\r\n        if (pasteRuleMatch.replaceWith) {\r\n            if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\r\n                console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\r\n            }\r\n            result.push(pasteRuleMatch.replaceWith);\r\n        }\r\n        return result;\r\n    });\r\n};\r\nfunction run(config) {\r\n    const { editor, state, from, to, rule, pasteEvent, dropEvent, } = config;\r\n    const { commands, chain, can } = new CommandManager({\r\n        editor,\r\n        state,\r\n    });\r\n    const handlers = [];\r\n    state.doc.nodesBetween(from, to, (node, pos) => {\r\n        if (!node.isTextblock || node.type.spec.code) {\r\n            return;\r\n        }\r\n        const resolvedFrom = Math.max(from, pos);\r\n        const resolvedTo = Math.min(to, pos + node.content.size);\r\n        const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\r\n        const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\r\n        matches.forEach(match => {\r\n            if (match.index === undefined) {\r\n                return;\r\n            }\r\n            const start = resolvedFrom + match.index + 1;\r\n            const end = start + match[0].length;\r\n            const range = {\r\n                from: state.tr.mapping.map(start),\r\n                to: state.tr.mapping.map(end),\r\n            };\r\n            const handler = rule.handler({\r\n                state,\r\n                range,\r\n                match,\r\n                commands,\r\n                chain,\r\n                can,\r\n                pasteEvent,\r\n                dropEvent,\r\n            });\r\n            handlers.push(handler);\r\n        });\r\n    });\r\n    const success = handlers.every(handler => handler !== null);\r\n    return success;\r\n}\r\nconst createClipboardPasteEvent = (text) => {\r\n    var _a;\r\n    const event = new ClipboardEvent('paste', {\r\n        clipboardData: new DataTransfer(),\r\n    });\r\n    (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\r\n    return event;\r\n};\r\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\r\nfunction pasteRulesPlugin(props) {\r\n    const { editor, rules } = props;\r\n    let dragSourceElement = null;\r\n    let isPastedFromProseMirror = false;\r\n    let isDroppedFromProseMirror = false;\r\n    let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\r\n    let dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\r\n    const processEvent = ({ state, from, to, rule, pasteEvt, }) => {\r\n        const tr = state.tr;\r\n        const chainableState = createChainableState({\r\n            state,\r\n            transaction: tr,\r\n        });\r\n        const handler = run({\r\n            editor,\r\n            state: chainableState,\r\n            from: Math.max(from - 1, 0),\r\n            to: to.b - 1,\r\n            rule,\r\n            pasteEvent: pasteEvt,\r\n            dropEvent,\r\n        });\r\n        if (!handler || !tr.steps.length) {\r\n            return;\r\n        }\r\n        dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\r\n        pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\r\n        return tr;\r\n    };\r\n    const plugins = rules.map(rule => {\r\n        return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n            // we register a global drag handler to track the current drag source element\r\n            view(view) {\r\n                const handleDragstart = (event) => {\r\n                    var _a;\r\n                    dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))\r\n                        ? view.dom.parentElement\r\n                        : null;\r\n                };\r\n                window.addEventListener('dragstart', handleDragstart);\r\n                return {\r\n                    destroy() {\r\n                        window.removeEventListener('dragstart', handleDragstart);\r\n                    },\r\n                };\r\n            },\r\n            props: {\r\n                handleDOMEvents: {\r\n                    drop: (view, event) => {\r\n                        isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\r\n                        dropEvent = event;\r\n                        return false;\r\n                    },\r\n                    paste: (_view, event) => {\r\n                        var _a;\r\n                        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\r\n                        pasteEvent = event;\r\n                        isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\r\n                        return false;\r\n                    },\r\n                },\r\n            },\r\n            appendTransaction: (transactions, oldState, state) => {\r\n                const transaction = transactions[0];\r\n                const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\r\n                const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\r\n                // if PasteRule is triggered by insertContent()\r\n                const simulatedPasteMeta = transaction.getMeta('applyPasteRules');\r\n                const isSimulatedPaste = !!simulatedPasteMeta;\r\n                if (!isPaste && !isDrop && !isSimulatedPaste) {\r\n                    return;\r\n                }\r\n                // Handle simulated paste\r\n                if (isSimulatedPaste) {\r\n                    const { from, text } = simulatedPasteMeta;\r\n                    const to = from + text.length;\r\n                    const pasteEvt = createClipboardPasteEvent(text);\r\n                    return processEvent({\r\n                        rule,\r\n                        state,\r\n                        from,\r\n                        to: { b: to },\r\n                        pasteEvt,\r\n                    });\r\n                }\r\n                // handle actual paste/drop\r\n                const from = oldState.doc.content.findDiffStart(state.doc.content);\r\n                const to = oldState.doc.content.findDiffEnd(state.doc.content);\r\n                // stop if there is no changed range\r\n                if (!isNumber(from) || !to || from === to.b) {\r\n                    return;\r\n                }\r\n                return processEvent({\r\n                    rule,\r\n                    state,\r\n                    from,\r\n                    to,\r\n                    pasteEvt: pasteEvent,\r\n                });\r\n            },\r\n        });\r\n    });\r\n    return plugins;\r\n}\n\nfunction findDuplicates(items) {\r\n    const filtered = items.filter((el, index) => items.indexOf(el) !== index);\r\n    return [...new Set(filtered)];\r\n}\n\nclass ExtensionManager {\r\n    constructor(extensions, editor) {\r\n        this.splittableMarks = [];\r\n        this.editor = editor;\r\n        this.extensions = ExtensionManager.resolve(extensions);\r\n        this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\r\n        this.extensions.forEach(extension => {\r\n            var _a;\r\n            // store extension storage in editor\r\n            this.editor.extensionStorage[extension.name] = extension.storage;\r\n            const context = {\r\n                name: extension.name,\r\n                options: extension.options,\r\n                storage: extension.storage,\r\n                editor: this.editor,\r\n                type: getSchemaTypeByName(extension.name, this.schema),\r\n            };\r\n            if (extension.type === 'mark') {\r\n                const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\r\n                if (keepOnSplit) {\r\n                    this.splittableMarks.push(extension.name);\r\n                }\r\n            }\r\n            const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\r\n            if (onBeforeCreate) {\r\n                this.editor.on('beforeCreate', onBeforeCreate);\r\n            }\r\n            const onCreate = getExtensionField(extension, 'onCreate', context);\r\n            if (onCreate) {\r\n                this.editor.on('create', onCreate);\r\n            }\r\n            const onUpdate = getExtensionField(extension, 'onUpdate', context);\r\n            if (onUpdate) {\r\n                this.editor.on('update', onUpdate);\r\n            }\r\n            const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\r\n            if (onSelectionUpdate) {\r\n                this.editor.on('selectionUpdate', onSelectionUpdate);\r\n            }\r\n            const onTransaction = getExtensionField(extension, 'onTransaction', context);\r\n            if (onTransaction) {\r\n                this.editor.on('transaction', onTransaction);\r\n            }\r\n            const onFocus = getExtensionField(extension, 'onFocus', context);\r\n            if (onFocus) {\r\n                this.editor.on('focus', onFocus);\r\n            }\r\n            const onBlur = getExtensionField(extension, 'onBlur', context);\r\n            if (onBlur) {\r\n                this.editor.on('blur', onBlur);\r\n            }\r\n            const onDestroy = getExtensionField(extension, 'onDestroy', context);\r\n            if (onDestroy) {\r\n                this.editor.on('destroy', onDestroy);\r\n            }\r\n        });\r\n    }\r\n    static resolve(extensions) {\r\n        const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\r\n        const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\r\n        if (duplicatedNames.length) {\r\n            console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames\r\n                .map(item => `'${item}'`)\r\n                .join(', ')}]. This can lead to issues.`);\r\n        }\r\n        return resolvedExtensions;\r\n    }\r\n    static flatten(extensions) {\r\n        return (extensions\r\n            .map(extension => {\r\n            const context = {\r\n                name: extension.name,\r\n                options: extension.options,\r\n                storage: extension.storage,\r\n            };\r\n            const addExtensions = getExtensionField(extension, 'addExtensions', context);\r\n            if (addExtensions) {\r\n                return [extension, ...this.flatten(addExtensions())];\r\n            }\r\n            return extension;\r\n        })\r\n            // `Infinity` will break TypeScript so we set a number that is probably high enough\r\n            .flat(10));\r\n    }\r\n    static sort(extensions) {\r\n        const defaultPriority = 100;\r\n        return extensions.sort((a, b) => {\r\n            const priorityA = getExtensionField(a, 'priority') || defaultPriority;\r\n            const priorityB = getExtensionField(b, 'priority') || defaultPriority;\r\n            if (priorityA > priorityB) {\r\n                return -1;\r\n            }\r\n            if (priorityA < priorityB) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    get commands() {\r\n        return this.extensions.reduce((commands, extension) => {\r\n            const context = {\r\n                name: extension.name,\r\n                options: extension.options,\r\n                storage: extension.storage,\r\n                editor: this.editor,\r\n                type: getSchemaTypeByName(extension.name, this.schema),\r\n            };\r\n            const addCommands = getExtensionField(extension, 'addCommands', context);\r\n            if (!addCommands) {\r\n                return commands;\r\n            }\r\n            return {\r\n                ...commands,\r\n                ...addCommands(),\r\n            };\r\n        }, {});\r\n    }\r\n    get plugins() {\r\n        const { editor } = this;\r\n        // With ProseMirror, first plugins within an array are executed first.\r\n        // In Tiptap, we provide the ability to override plugins,\r\n        // so it feels more natural to run plugins at the end of an array first.\r\n        // That’s why we have to reverse the `extensions` array and sort again\r\n        // based on the `priority` option.\r\n        const extensions = ExtensionManager.sort([...this.extensions].reverse());\r\n        const inputRules = [];\r\n        const pasteRules = [];\r\n        const allPlugins = extensions\r\n            .map(extension => {\r\n            const context = {\r\n                name: extension.name,\r\n                options: extension.options,\r\n                storage: extension.storage,\r\n                editor,\r\n                type: getSchemaTypeByName(extension.name, this.schema),\r\n            };\r\n            const plugins = [];\r\n            const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\r\n            let defaultBindings = {};\r\n            // bind exit handling\r\n            if (extension.type === 'mark' && extension.config.exitable) {\r\n                defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension });\r\n            }\r\n            if (addKeyboardShortcuts) {\r\n                const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\r\n                    return [shortcut, () => method({ editor })];\r\n                }));\r\n                defaultBindings = { ...defaultBindings, ...bindings };\r\n            }\r\n            const keyMapPlugin = (0,_tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);\r\n            plugins.push(keyMapPlugin);\r\n            const addInputRules = getExtensionField(extension, 'addInputRules', context);\r\n            if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\r\n                inputRules.push(...addInputRules());\r\n            }\r\n            const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\r\n            if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\r\n                pasteRules.push(...addPasteRules());\r\n            }\r\n            const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\r\n            if (addProseMirrorPlugins) {\r\n                const proseMirrorPlugins = addProseMirrorPlugins();\r\n                plugins.push(...proseMirrorPlugins);\r\n            }\r\n            return plugins;\r\n        })\r\n            .flat();\r\n        return [\r\n            inputRulesPlugin({\r\n                editor,\r\n                rules: inputRules,\r\n            }),\r\n            ...pasteRulesPlugin({\r\n                editor,\r\n                rules: pasteRules,\r\n            }),\r\n            ...allPlugins,\r\n        ];\r\n    }\r\n    get attributes() {\r\n        return getAttributesFromExtensions(this.extensions);\r\n    }\r\n    get nodeViews() {\r\n        const { editor } = this;\r\n        const { nodeExtensions } = splitExtensions(this.extensions);\r\n        return Object.fromEntries(nodeExtensions\r\n            .filter(extension => !!getExtensionField(extension, 'addNodeView'))\r\n            .map(extension => {\r\n            const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\r\n            const context = {\r\n                name: extension.name,\r\n                options: extension.options,\r\n                storage: extension.storage,\r\n                editor,\r\n                type: getNodeType(extension.name, this.schema),\r\n            };\r\n            const addNodeView = getExtensionField(extension, 'addNodeView', context);\r\n            if (!addNodeView) {\r\n                return [];\r\n            }\r\n            const nodeview = (node, view, getPos, decorations) => {\r\n                const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\r\n                return addNodeView()({\r\n                    editor,\r\n                    node,\r\n                    getPos,\r\n                    decorations,\r\n                    HTMLAttributes,\r\n                    extension,\r\n                });\r\n            };\r\n            return [extension.name, nodeview];\r\n        }));\r\n    }\r\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\r\nfunction getType(value) {\r\n    return Object.prototype.toString.call(value).slice(8, -1);\r\n}\r\nfunction isPlainObject(value) {\r\n    if (getType(value) !== 'Object') {\r\n        return false;\r\n    }\r\n    return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\r\n}\n\nfunction mergeDeep(target, source) {\r\n    const output = { ...target };\r\n    if (isPlainObject(target) && isPlainObject(source)) {\r\n        Object.keys(source).forEach(key => {\r\n            if (isPlainObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n                else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            }\r\n            else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\n\nclass Extension {\r\n    constructor(config = {}) {\r\n        this.type = 'extension';\r\n        this.name = 'extension';\r\n        this.parent = null;\r\n        this.child = null;\r\n        this.config = {\r\n            name: this.name,\r\n            defaultOptions: {},\r\n        };\r\n        this.config = {\r\n            ...this.config,\r\n            ...config,\r\n        };\r\n        this.name = this.config.name;\r\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\r\n        }\r\n        // TODO: remove `addOptions` fallback\r\n        this.options = this.config.defaultOptions;\r\n        if (this.config.addOptions) {\r\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\r\n                name: this.name,\r\n            }));\r\n        }\r\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\r\n            name: this.name,\r\n            options: this.options,\r\n        })) || {};\r\n    }\r\n    static create(config = {}) {\r\n        return new Extension(config);\r\n    }\r\n    configure(options = {}) {\r\n        // return a new instance so we can use the same extension\r\n        // with different calls of `configure`\r\n        const extension = this.extend();\r\n        extension.options = mergeDeep(this.options, options);\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n    extend(extendedConfig = {}) {\r\n        const extension = new Extension({ ...this.config, ...extendedConfig });\r\n        extension.parent = this;\r\n        this.child = extension;\r\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\r\n        if (extendedConfig.defaultOptions) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\r\n        }\r\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\r\n            name: extension.name,\r\n        }));\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n}\n\nfunction getTextBetween(startNode, range, options) {\r\n    const { from, to } = range;\r\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\r\n    let text = '';\r\n    let separated = true;\r\n    startNode.nodesBetween(from, to, (node, pos, parent, index) => {\r\n        var _a;\r\n        const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\r\n        if (textSerializer) {\r\n            if (node.isBlock && !separated) {\r\n                text += blockSeparator;\r\n                separated = true;\r\n            }\r\n            if (parent) {\r\n                text += textSerializer({\r\n                    node,\r\n                    pos,\r\n                    parent,\r\n                    index,\r\n                    range,\r\n                });\r\n            }\r\n            // do not descend into child nodes when there exists a serializer\r\n            return false;\r\n        }\r\n        if (node.isText) {\r\n            text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\r\n            separated = false;\r\n        }\r\n        else if (node.isBlock && !separated) {\r\n            text += blockSeparator;\r\n            separated = true;\r\n        }\r\n    });\r\n    return text;\r\n}\n\nfunction getTextSerializersFromSchema(schema) {\r\n    return Object.fromEntries(Object.entries(schema.nodes)\r\n        .filter(([, node]) => node.spec.toText)\r\n        .map(([name, node]) => [name, node.spec.toText]));\r\n}\n\nconst ClipboardTextSerializer = Extension.create({\r\n    name: 'clipboardTextSerializer',\r\n    addOptions() {\r\n        return {\r\n            blockSeparator: undefined,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clipboardTextSerializer'),\r\n                props: {\r\n                    clipboardTextSerializer: () => {\r\n                        const { editor } = this;\r\n                        const { state, schema } = editor;\r\n                        const { doc, selection } = state;\r\n                        const { ranges } = selection;\r\n                        const from = Math.min(...ranges.map(range => range.$from.pos));\r\n                        const to = Math.max(...ranges.map(range => range.$to.pos));\r\n                        const textSerializers = getTextSerializersFromSchema(schema);\r\n                        const range = { from, to };\r\n                        return getTextBetween(doc, range, {\r\n                            ...(this.options.blockSeparator !== undefined\r\n                                ? { blockSeparator: this.options.blockSeparator }\r\n                                : {}),\r\n                            textSerializers,\r\n                        });\r\n                    },\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nconst blur = () => ({ editor, view }) => {\r\n    requestAnimationFrame(() => {\r\n        var _a;\r\n        if (!editor.isDestroyed) {\r\n            view.dom.blur();\r\n            // Browsers should remove the caret on blur but safari does not.\r\n            // See: https://github.com/ueberdosis/tiptap/issues/2405\r\n            (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\r\n        }\r\n    });\r\n    return true;\r\n};\n\nconst clearContent = (emitUpdate = false) => ({ commands }) => {\r\n    return commands.setContent('', emitUpdate);\r\n};\n\nconst clearNodes = () => ({ state, tr, dispatch }) => {\r\n    const { selection } = tr;\r\n    const { ranges } = selection;\r\n    if (!dispatch) {\r\n        return true;\r\n    }\r\n    ranges.forEach(({ $from, $to }) => {\r\n        state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\r\n            if (node.type.isText) {\r\n                return;\r\n            }\r\n            const { doc, mapping } = tr;\r\n            const $mappedFrom = doc.resolve(mapping.map(pos));\r\n            const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\r\n            const nodeRange = $mappedFrom.blockRange($mappedTo);\r\n            if (!nodeRange) {\r\n                return;\r\n            }\r\n            const targetLiftDepth = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.liftTarget)(nodeRange);\r\n            if (node.type.isTextblock) {\r\n                const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\r\n                tr.setNodeMarkup(nodeRange.start, defaultType);\r\n            }\r\n            if (targetLiftDepth || targetLiftDepth === 0) {\r\n                tr.lift(nodeRange, targetLiftDepth);\r\n            }\r\n        });\r\n    });\r\n    return true;\r\n};\n\nconst command = fn => props => {\r\n    return fn(props);\r\n};\n\nconst createParagraphNear = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.createParagraphNear)(state, dispatch);\r\n};\n\nconst cut = (originRange, targetPos) => ({ editor, tr }) => {\r\n    const { state } = editor;\r\n    const contentSlice = state.doc.slice(originRange.from, originRange.to);\r\n    tr.deleteRange(originRange.from, originRange.to);\r\n    const newPos = tr.mapping.map(targetPos);\r\n    tr.insert(newPos, contentSlice.content);\r\n    tr.setSelection(new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection(tr.doc.resolve(newPos - 1)));\r\n    return true;\r\n};\n\nconst deleteCurrentNode = () => ({ tr, dispatch }) => {\r\n    const { selection } = tr;\r\n    const currentNode = selection.$anchor.node();\r\n    // if there is content inside the current node, break out of this command\r\n    if (currentNode.content.size > 0) {\r\n        return false;\r\n    }\r\n    const $pos = tr.selection.$anchor;\r\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\r\n        const node = $pos.node(depth);\r\n        if (node.type === currentNode.type) {\r\n            if (dispatch) {\r\n                const from = $pos.before(depth);\r\n                const to = $pos.after(depth);\r\n                tr.delete(from, to).scrollIntoView();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nconst deleteNode = typeOrName => ({ tr, state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const $pos = tr.selection.$anchor;\r\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\r\n        const node = $pos.node(depth);\r\n        if (node.type === type) {\r\n            if (dispatch) {\r\n                const from = $pos.before(depth);\r\n                const to = $pos.after(depth);\r\n                tr.delete(from, to).scrollIntoView();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nconst deleteRange = range => ({ tr, dispatch }) => {\r\n    const { from, to } = range;\r\n    if (dispatch) {\r\n        tr.delete(from, to);\r\n    }\r\n    return true;\r\n};\n\nconst deleteSelection = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.deleteSelection)(state, dispatch);\r\n};\n\nconst enter = () => ({ commands }) => {\r\n    return commands.keyboardShortcut('Enter');\r\n};\n\nconst exitCode = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.exitCode)(state, dispatch);\r\n};\n\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */\r\nfunction objectIncludes(object1, object2, options = { strict: true }) {\r\n    const keys = Object.keys(object2);\r\n    if (!keys.length) {\r\n        return true;\r\n    }\r\n    return keys.every(key => {\r\n        if (options.strict) {\r\n            return object2[key] === object1[key];\r\n        }\r\n        if (isRegExp(object2[key])) {\r\n            return object2[key].test(object1[key]);\r\n        }\r\n        return object2[key] === object1[key];\r\n    });\r\n}\n\nfunction findMarkInSet(marks, type, attributes = {}) {\r\n    return marks.find(item => {\r\n        return item.type === type && objectIncludes(item.attrs, attributes);\r\n    });\r\n}\r\nfunction isMarkInSet(marks, type, attributes = {}) {\r\n    return !!findMarkInSet(marks, type, attributes);\r\n}\r\nfunction getMarkRange($pos, type, attributes = {}) {\r\n    if (!$pos || !type) {\r\n        return;\r\n    }\r\n    let start = $pos.parent.childAfter($pos.parentOffset);\r\n    if ($pos.parentOffset === start.offset && start.offset !== 0) {\r\n        start = $pos.parent.childBefore($pos.parentOffset);\r\n    }\r\n    if (!start.node) {\r\n        return;\r\n    }\r\n    const mark = findMarkInSet([...start.node.marks], type, attributes);\r\n    if (!mark) {\r\n        return;\r\n    }\r\n    let startIndex = start.index;\r\n    let startPos = $pos.start() + start.offset;\r\n    let endIndex = startIndex + 1;\r\n    let endPos = startPos + start.node.nodeSize;\r\n    findMarkInSet([...start.node.marks], type, attributes);\r\n    while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\r\n        startIndex -= 1;\r\n        startPos -= $pos.parent.child(startIndex).nodeSize;\r\n    }\r\n    while (endIndex < $pos.parent.childCount\r\n        && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {\r\n        endPos += $pos.parent.child(endIndex).nodeSize;\r\n        endIndex += 1;\r\n    }\r\n    return {\r\n        from: startPos,\r\n        to: endPos,\r\n    };\r\n}\n\nfunction getMarkType(nameOrType, schema) {\r\n    if (typeof nameOrType === 'string') {\r\n        if (!schema.marks[nameOrType]) {\r\n            throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\r\n        }\r\n        return schema.marks[nameOrType];\r\n    }\r\n    return nameOrType;\r\n}\n\nconst extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\r\n    const type = getMarkType(typeOrName, state.schema);\r\n    const { doc, selection } = tr;\r\n    const { $from, from, to } = selection;\r\n    if (dispatch) {\r\n        const range = getMarkRange($from, type, attributes);\r\n        if (range && range.from <= from && range.to >= to) {\r\n            const newSelection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, range.from, range.to);\r\n            tr.setSelection(newSelection);\r\n        }\r\n    }\r\n    return true;\r\n};\n\nconst first = commands => props => {\r\n    const items = typeof commands === 'function'\r\n        ? commands(props)\r\n        : commands;\r\n    for (let i = 0; i < items.length; i += 1) {\r\n        if (items[i](props)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction isTextSelection(value) {\r\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection;\r\n}\n\nfunction minMax(value = 0, min = 0, max = 0) {\r\n    return Math.min(Math.max(value, min), max);\r\n}\n\nfunction resolveFocusPosition(doc, position = null) {\r\n    if (!position) {\r\n        return null;\r\n    }\r\n    const selectionAtStart = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc);\r\n    const selectionAtEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(doc);\r\n    if (position === 'start' || position === true) {\r\n        return selectionAtStart;\r\n    }\r\n    if (position === 'end') {\r\n        return selectionAtEnd;\r\n    }\r\n    const minPos = selectionAtStart.from;\r\n    const maxPos = selectionAtEnd.to;\r\n    if (position === 'all') {\r\n        return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\r\n    }\r\n    return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\r\n}\n\nfunction isiOS() {\r\n    return [\r\n        'iPad Simulator',\r\n        'iPhone Simulator',\r\n        'iPod Simulator',\r\n        'iPad',\r\n        'iPhone',\r\n        'iPod',\r\n    ].includes(navigator.platform)\r\n        // iPad on iOS 13 detection\r\n        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);\r\n}\n\nconst focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {\r\n    options = {\r\n        scrollIntoView: true,\r\n        ...options,\r\n    };\r\n    const delayedFocus = () => {\r\n        // focus within `requestAnimationFrame` breaks focus on iOS\r\n        // so we have to call this\r\n        if (isiOS()) {\r\n            view.dom.focus();\r\n        }\r\n        // For React we have to focus asynchronously. Otherwise wild things happen.\r\n        // see: https://github.com/ueberdosis/tiptap/issues/1520\r\n        requestAnimationFrame(() => {\r\n            if (!editor.isDestroyed) {\r\n                view.focus();\r\n                if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\r\n                    editor.commands.scrollIntoView();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    if ((view.hasFocus() && position === null) || position === false) {\r\n        return true;\r\n    }\r\n    // we don’t try to resolve a NodeSelection or CellSelection\r\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\r\n        delayedFocus();\r\n        return true;\r\n    }\r\n    // pass through tr.doc instead of editor.state.doc\r\n    // since transactions could change the editors state before this command has been run\r\n    const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\r\n    const isSameSelection = editor.state.selection.eq(selection);\r\n    if (dispatch) {\r\n        if (!isSameSelection) {\r\n            tr.setSelection(selection);\r\n        }\r\n        // `tr.setSelection` resets the stored marks\r\n        // so we’ll restore them if the selection is the same as before\r\n        if (isSameSelection && tr.storedMarks) {\r\n            tr.setStoredMarks(tr.storedMarks);\r\n        }\r\n        delayedFocus();\r\n    }\r\n    return true;\r\n};\n\nconst forEach = (items, fn) => props => {\r\n    return items.every((item, index) => fn(item, { ...props, index }));\r\n};\n\nconst insertContent = (value, options) => ({ tr, commands }) => {\r\n    return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);\r\n};\n\nconst removeWhitespaces = (node) => {\r\n    const children = node.childNodes;\r\n    for (let i = children.length - 1; i >= 0; i -= 1) {\r\n        const child = children[i];\r\n        if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\r\n            node.removeChild(child);\r\n        }\r\n        else if (child.nodeType === 1) {\r\n            removeWhitespaces(child);\r\n        }\r\n    }\r\n    return node;\r\n};\r\nfunction elementFromString(value) {\r\n    // add a wrapper to preserve leading and trailing whitespace\r\n    const wrappedValue = `<body>${value}</body>`;\r\n    const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\r\n    return removeWhitespaces(html);\r\n}\n\nfunction createNodeFromContent(content, schema, options) {\r\n    options = {\r\n        slice: true,\r\n        parseOptions: {},\r\n        ...options,\r\n    };\r\n    if (typeof content === 'object' && content !== null) {\r\n        try {\r\n            if (Array.isArray(content) && content.length > 0) {\r\n                return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\r\n            }\r\n            return schema.nodeFromJSON(content);\r\n        }\r\n        catch (error) {\r\n            console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\r\n            return createNodeFromContent('', schema, options);\r\n        }\r\n    }\r\n    if (typeof content === 'string') {\r\n        const parser = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema);\r\n        return options.slice\r\n            ? parser.parseSlice(elementFromString(content), options.parseOptions).content\r\n            : parser.parse(elementFromString(content), options.parseOptions);\r\n    }\r\n    return createNodeFromContent('', schema, options);\r\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\r\nfunction selectionToInsertionEnd(tr, startLen, bias) {\r\n    const last = tr.steps.length - 1;\r\n    if (last < startLen) {\r\n        return;\r\n    }\r\n    const step = tr.steps[last];\r\n    if (!(step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceStep || step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceAroundStep)) {\r\n        return;\r\n    }\r\n    const map = tr.mapping.maps[last];\r\n    let end = 0;\r\n    map.forEach((_from, _to, _newFrom, newTo) => {\r\n        if (end === 0) {\r\n            end = newTo;\r\n        }\r\n    });\r\n    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(tr.doc.resolve(end), bias));\r\n}\n\nconst isFragment = (nodeOrFragment) => {\r\n    return nodeOrFragment.toString().startsWith('<');\r\n};\r\nconst insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {\r\n    if (dispatch) {\r\n        options = {\r\n            parseOptions: {},\r\n            updateSelection: true,\r\n            applyInputRules: false,\r\n            applyPasteRules: false,\r\n            ...options,\r\n        };\r\n        const content = createNodeFromContent(value, editor.schema, {\r\n            parseOptions: {\r\n                preserveWhitespace: 'full',\r\n                ...options.parseOptions,\r\n            },\r\n        });\r\n        // don’t dispatch an empty fragment because this can lead to strange errors\r\n        if (content.toString() === '<>') {\r\n            return true;\r\n        }\r\n        let { from, to } = typeof position === 'number' ? { from: position, to: position } : { from: position.from, to: position.to };\r\n        let isOnlyTextContent = true;\r\n        let isOnlyBlockContent = true;\r\n        const nodes = isFragment(content) ? content : [content];\r\n        nodes.forEach(node => {\r\n            // check if added node is valid\r\n            node.check();\r\n            isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\r\n            isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\r\n        });\r\n        // check if we can replace the wrapping node by\r\n        // the newly inserted content\r\n        // example:\r\n        // replace an empty paragraph by an inserted image\r\n        // instead of inserting the image below the paragraph\r\n        if (from === to && isOnlyBlockContent) {\r\n            const { parent } = tr.doc.resolve(from);\r\n            const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\r\n            if (isEmptyTextBlock) {\r\n                from -= 1;\r\n                to += 1;\r\n            }\r\n        }\r\n        let newContent;\r\n        // if there is only plain text we have to use `insertText`\r\n        // because this will keep the current marks\r\n        if (isOnlyTextContent) {\r\n            // if value is string, we can use it directly\r\n            // otherwise if it is an array, we have to join it\r\n            if (Array.isArray(value)) {\r\n                newContent = value.map(v => v.text || '').join('');\r\n            }\r\n            else if (typeof value === 'object' && !!value && !!value.text) {\r\n                newContent = value.text;\r\n            }\r\n            else {\r\n                newContent = value;\r\n            }\r\n            tr.insertText(newContent, from, to);\r\n        }\r\n        else {\r\n            newContent = content;\r\n            tr.replaceWith(from, to, newContent);\r\n        }\r\n        // set cursor at end of inserted content\r\n        if (options.updateSelection) {\r\n            selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\r\n        }\r\n        if (options.applyInputRules) {\r\n            tr.setMeta('applyInputRules', { from, text: newContent });\r\n        }\r\n        if (options.applyPasteRules) {\r\n            tr.setMeta('applyPasteRules', { from, text: newContent });\r\n        }\r\n    }\r\n    return true;\r\n};\n\nconst joinUp = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinUp)(state, dispatch);\r\n};\r\nconst joinDown = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinDown)(state, dispatch);\r\n};\r\nconst joinBackward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinBackward)(state, dispatch);\r\n};\r\nconst joinForward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinForward)(state, dispatch);\r\n};\n\nconst joinItemBackward = () => ({ tr, state, dispatch, }) => {\r\n    try {\r\n        const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, -1);\r\n        if (point === null || point === undefined) {\r\n            return false;\r\n        }\r\n        tr.join(point, 2);\r\n        if (dispatch) {\r\n            dispatch(tr);\r\n        }\r\n        return true;\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n};\n\nconst joinItemForward = () => ({ state, dispatch, tr, }) => {\r\n    try {\r\n        const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, +1);\r\n        if (point === null || point === undefined) {\r\n            return false;\r\n        }\r\n        tr.join(point, 2);\r\n        if (dispatch) {\r\n            dispatch(tr);\r\n        }\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\n\nconst joinTextblockBackward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockBackward)(state, dispatch);\r\n};\n\nconst joinTextblockForward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockForward)(state, dispatch);\r\n};\n\nfunction isMacOS() {\r\n    return typeof navigator !== 'undefined'\r\n        ? /Mac/.test(navigator.platform)\r\n        : false;\r\n}\n\nfunction normalizeKeyName(name) {\r\n    const parts = name.split(/-(?!$)/);\r\n    let result = parts[parts.length - 1];\r\n    if (result === 'Space') {\r\n        result = ' ';\r\n    }\r\n    let alt;\r\n    let ctrl;\r\n    let shift;\r\n    let meta;\r\n    for (let i = 0; i < parts.length - 1; i += 1) {\r\n        const mod = parts[i];\r\n        if (/^(cmd|meta|m)$/i.test(mod)) {\r\n            meta = true;\r\n        }\r\n        else if (/^a(lt)?$/i.test(mod)) {\r\n            alt = true;\r\n        }\r\n        else if (/^(c|ctrl|control)$/i.test(mod)) {\r\n            ctrl = true;\r\n        }\r\n        else if (/^s(hift)?$/i.test(mod)) {\r\n            shift = true;\r\n        }\r\n        else if (/^mod$/i.test(mod)) {\r\n            if (isiOS() || isMacOS()) {\r\n                meta = true;\r\n            }\r\n            else {\r\n                ctrl = true;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(`Unrecognized modifier name: ${mod}`);\r\n        }\r\n    }\r\n    if (alt) {\r\n        result = `Alt-${result}`;\r\n    }\r\n    if (ctrl) {\r\n        result = `Ctrl-${result}`;\r\n    }\r\n    if (meta) {\r\n        result = `Meta-${result}`;\r\n    }\r\n    if (shift) {\r\n        result = `Shift-${result}`;\r\n    }\r\n    return result;\r\n}\r\nconst keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {\r\n    const keys = normalizeKeyName(name).split(/-(?!$)/);\r\n    const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\r\n    const event = new KeyboardEvent('keydown', {\r\n        key: key === 'Space'\r\n            ? ' '\r\n            : key,\r\n        altKey: keys.includes('Alt'),\r\n        ctrlKey: keys.includes('Ctrl'),\r\n        metaKey: keys.includes('Meta'),\r\n        shiftKey: keys.includes('Shift'),\r\n        bubbles: true,\r\n        cancelable: true,\r\n    });\r\n    const capturedTransaction = editor.captureTransaction(() => {\r\n        view.someProp('handleKeyDown', f => f(view, event));\r\n    });\r\n    capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\r\n        const newStep = step.map(tr.mapping);\r\n        if (newStep && dispatch) {\r\n            tr.maybeStep(newStep);\r\n        }\r\n    });\r\n    return true;\r\n};\n\nfunction isNodeActive(state, typeOrName, attributes = {}) {\r\n    const { from, to, empty } = state.selection;\r\n    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\r\n    const nodeRanges = [];\r\n    state.doc.nodesBetween(from, to, (node, pos) => {\r\n        if (node.isText) {\r\n            return;\r\n        }\r\n        const relativeFrom = Math.max(from, pos);\r\n        const relativeTo = Math.min(to, pos + node.nodeSize);\r\n        nodeRanges.push({\r\n            node,\r\n            from: relativeFrom,\r\n            to: relativeTo,\r\n        });\r\n    });\r\n    const selectionRange = to - from;\r\n    const matchedNodeRanges = nodeRanges\r\n        .filter(nodeRange => {\r\n        if (!type) {\r\n            return true;\r\n        }\r\n        return type.name === nodeRange.node.type.name;\r\n    })\r\n        .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));\r\n    if (empty) {\r\n        return !!matchedNodeRanges.length;\r\n    }\r\n    const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\r\n    return range >= selectionRange;\r\n}\n\nconst lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const isActive = isNodeActive(state, type, attributes);\r\n    if (!isActive) {\r\n        return false;\r\n    }\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.lift)(state, dispatch);\r\n};\n\nconst liftEmptyBlock = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.liftEmptyBlock)(state, dispatch);\r\n};\n\nconst liftListItem = typeOrName => ({ state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.liftListItem)(type)(state, dispatch);\r\n};\n\nconst newlineInCode = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.newlineInCode)(state, dispatch);\r\n};\n\nfunction getSchemaTypeNameByName(name, schema) {\r\n    if (schema.nodes[name]) {\r\n        return 'node';\r\n    }\r\n    if (schema.marks[name]) {\r\n        return 'mark';\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */\r\nfunction deleteProps(obj, propOrProps) {\r\n    const props = typeof propOrProps === 'string'\r\n        ? [propOrProps]\r\n        : propOrProps;\r\n    return Object\r\n        .keys(obj)\r\n        .reduce((newObj, prop) => {\r\n        if (!props.includes(prop)) {\r\n            newObj[prop] = obj[prop];\r\n        }\r\n        return newObj;\r\n    }, {});\r\n}\n\nconst resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\r\n    let nodeType = null;\r\n    let markType = null;\r\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\r\n    if (!schemaType) {\r\n        return false;\r\n    }\r\n    if (schemaType === 'node') {\r\n        nodeType = getNodeType(typeOrName, state.schema);\r\n    }\r\n    if (schemaType === 'mark') {\r\n        markType = getMarkType(typeOrName, state.schema);\r\n    }\r\n    if (dispatch) {\r\n        tr.selection.ranges.forEach(range => {\r\n            state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\r\n                if (nodeType && nodeType === node.type) {\r\n                    tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\r\n                }\r\n                if (markType && node.marks.length) {\r\n                    node.marks.forEach(mark => {\r\n                        if (markType === mark.type) {\r\n                            tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return true;\r\n};\n\nconst scrollIntoView = () => ({ tr, dispatch }) => {\r\n    if (dispatch) {\r\n        tr.scrollIntoView();\r\n    }\r\n    return true;\r\n};\n\nconst selectAll = () => ({ tr, commands }) => {\r\n    return commands.setTextSelection({\r\n        from: 0,\r\n        to: tr.doc.content.size,\r\n    });\r\n};\n\nconst selectNodeBackward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeBackward)(state, dispatch);\r\n};\n\nconst selectNodeForward = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeForward)(state, dispatch);\r\n};\n\nconst selectParentNode = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectParentNode)(state, dispatch);\r\n};\n\n// @ts-ignore\r\nconst selectTextblockEnd = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockEnd)(state, dispatch);\r\n};\n\n// @ts-ignore\r\nconst selectTextblockStart = () => ({ state, dispatch }) => {\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockStart)(state, dispatch);\r\n};\n\nfunction createDocument(content, schema, parseOptions = {}) {\r\n    return createNodeFromContent(content, schema, { slice: false, parseOptions });\r\n}\n\nconst setContent = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\r\n    const { doc } = tr;\r\n    const document = createDocument(content, editor.schema, parseOptions);\r\n    if (dispatch) {\r\n        tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\r\n    }\r\n    return true;\r\n};\n\nfunction getMarkAttributes(state, typeOrName) {\r\n    const type = getMarkType(typeOrName, state.schema);\r\n    const { from, to, empty } = state.selection;\r\n    const marks = [];\r\n    if (empty) {\r\n        if (state.storedMarks) {\r\n            marks.push(...state.storedMarks);\r\n        }\r\n        marks.push(...state.selection.$head.marks());\r\n    }\r\n    else {\r\n        state.doc.nodesBetween(from, to, node => {\r\n            marks.push(...node.marks);\r\n        });\r\n    }\r\n    const mark = marks.find(markItem => markItem.type.name === type.name);\r\n    if (!mark) {\r\n        return {};\r\n    }\r\n    return { ...mark.attrs };\r\n}\n\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n */\r\nfunction combineTransactionSteps(oldDoc, transactions) {\r\n    const transform = new _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.Transform(oldDoc);\r\n    transactions.forEach(transaction => {\r\n        transaction.steps.forEach(step => {\r\n            transform.step(step);\r\n        });\r\n    });\r\n    return transform;\r\n}\n\nfunction defaultBlockAt(match) {\r\n    for (let i = 0; i < match.edgeCount; i += 1) {\r\n        const { type } = match.edge(i);\r\n        if (type.isTextblock && !type.hasRequiredAttrs()) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}\n\nfunction findChildren(node, predicate) {\r\n    const nodesWithPos = [];\r\n    node.descendants((child, pos) => {\r\n        if (predicate(child)) {\r\n            nodesWithPos.push({\r\n                node: child,\r\n                pos,\r\n            });\r\n        }\r\n    });\r\n    return nodesWithPos;\r\n}\n\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n */\r\nfunction findChildrenInRange(node, range, predicate) {\r\n    const nodesWithPos = [];\r\n    // if (range.from === range.to) {\r\n    //   const nodeAt = node.nodeAt(range.from)\r\n    //   if (nodeAt) {\r\n    //     nodesWithPos.push({\r\n    //       node: nodeAt,\r\n    //       pos: range.from,\r\n    //     })\r\n    //   }\r\n    // }\r\n    node.nodesBetween(range.from, range.to, (child, pos) => {\r\n        if (predicate(child)) {\r\n            nodesWithPos.push({\r\n                node: child,\r\n                pos,\r\n            });\r\n        }\r\n    });\r\n    return nodesWithPos;\r\n}\n\nfunction findParentNodeClosestToPos($pos, predicate) {\r\n    for (let i = $pos.depth; i > 0; i -= 1) {\r\n        const node = $pos.node(i);\r\n        if (predicate(node)) {\r\n            return {\r\n                pos: i > 0 ? $pos.before(i) : 0,\r\n                start: $pos.start(i),\r\n                depth: i,\r\n                node,\r\n            };\r\n        }\r\n    }\r\n}\n\nfunction findParentNode(predicate) {\r\n    return (selection) => findParentNodeClosestToPos(selection.$from, predicate);\r\n}\n\nfunction getHTMLFromFragment(fragment, schema) {\r\n    const documentFragment = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMSerializer.fromSchema(schema).serializeFragment(fragment);\r\n    const temporaryDocument = document.implementation.createHTMLDocument();\r\n    const container = temporaryDocument.createElement('div');\r\n    container.appendChild(documentFragment);\r\n    return container.innerHTML;\r\n}\n\nfunction getSchema(extensions, editor) {\r\n    const resolvedExtensions = ExtensionManager.resolve(extensions);\r\n    return getSchemaByResolvedExtensions(resolvedExtensions, editor);\r\n}\n\nfunction generateHTML(doc, extensions) {\r\n    const schema = getSchema(extensions);\r\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\r\n    return getHTMLFromFragment(contentNode.content, schema);\r\n}\n\nfunction generateJSON(html, extensions) {\r\n    const schema = getSchema(extensions);\r\n    const dom = elementFromString(html);\r\n    return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema).parse(dom).toJSON();\r\n}\n\nfunction getText(node, options) {\r\n    const range = {\r\n        from: 0,\r\n        to: node.content.size,\r\n    };\r\n    return getTextBetween(node, range, options);\r\n}\n\nfunction generateText(doc, extensions, options) {\r\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\r\n    const schema = getSchema(extensions);\r\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\r\n    return getText(contentNode, {\r\n        blockSeparator,\r\n        textSerializers: {\r\n            ...getTextSerializersFromSchema(schema),\r\n            ...textSerializers,\r\n        },\r\n    });\r\n}\n\nfunction getNodeAttributes(state, typeOrName) {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const { from, to } = state.selection;\r\n    const nodes = [];\r\n    state.doc.nodesBetween(from, to, node => {\r\n        nodes.push(node);\r\n    });\r\n    const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\r\n    if (!node) {\r\n        return {};\r\n    }\r\n    return { ...node.attrs };\r\n}\n\nfunction getAttributes(state, typeOrName) {\r\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\r\n    if (schemaType === 'node') {\r\n        return getNodeAttributes(state, typeOrName);\r\n    }\r\n    if (schemaType === 'mark') {\r\n        return getMarkAttributes(state, typeOrName);\r\n    }\r\n    return {};\r\n}\n\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */\r\nfunction removeDuplicates(array, by = JSON.stringify) {\r\n    const seen = {};\r\n    return array.filter(item => {\r\n        const key = by(item);\r\n        return Object.prototype.hasOwnProperty.call(seen, key)\r\n            ? false\r\n            : (seen[key] = true);\r\n    });\r\n}\n\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */\r\nfunction simplifyChangedRanges(changes) {\r\n    const uniqueChanges = removeDuplicates(changes);\r\n    return uniqueChanges.length === 1\r\n        ? uniqueChanges\r\n        : uniqueChanges.filter((change, index) => {\r\n            const rest = uniqueChanges.filter((_, i) => i !== index);\r\n            return !rest.some(otherChange => {\r\n                return change.oldRange.from >= otherChange.oldRange.from\r\n                    && change.oldRange.to <= otherChange.oldRange.to\r\n                    && change.newRange.from >= otherChange.newRange.from\r\n                    && change.newRange.to <= otherChange.newRange.to;\r\n            });\r\n        });\r\n}\r\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */\r\nfunction getChangedRanges(transform) {\r\n    const { mapping, steps } = transform;\r\n    const changes = [];\r\n    mapping.maps.forEach((stepMap, index) => {\r\n        const ranges = [];\r\n        // This accounts for step changes where no range was actually altered\r\n        // e.g. when setting a mark, node attribute, etc.\r\n        // @ts-ignore\r\n        if (!stepMap.ranges.length) {\r\n            const { from, to } = steps[index];\r\n            if (from === undefined || to === undefined) {\r\n                return;\r\n            }\r\n            ranges.push({ from, to });\r\n        }\r\n        else {\r\n            stepMap.forEach((from, to) => {\r\n                ranges.push({ from, to });\r\n            });\r\n        }\r\n        ranges.forEach(({ from, to }) => {\r\n            const newStart = mapping.slice(index).map(from, -1);\r\n            const newEnd = mapping.slice(index).map(to);\r\n            const oldStart = mapping.invert().map(newStart, -1);\r\n            const oldEnd = mapping.invert().map(newEnd);\r\n            changes.push({\r\n                oldRange: {\r\n                    from: oldStart,\r\n                    to: oldEnd,\r\n                },\r\n                newRange: {\r\n                    from: newStart,\r\n                    to: newEnd,\r\n                },\r\n            });\r\n        });\r\n    });\r\n    return simplifyChangedRanges(changes);\r\n}\n\nfunction getDebugJSON(node, startOffset = 0) {\r\n    const isTopNode = node.type === node.type.schema.topNodeType;\r\n    const increment = isTopNode ? 0 : 1;\r\n    const from = startOffset;\r\n    const to = from + node.nodeSize;\r\n    const marks = node.marks.map(mark => {\r\n        const output = {\r\n            type: mark.type.name,\r\n        };\r\n        if (Object.keys(mark.attrs).length) {\r\n            output.attrs = { ...mark.attrs };\r\n        }\r\n        return output;\r\n    });\r\n    const attrs = { ...node.attrs };\r\n    const output = {\r\n        type: node.type.name,\r\n        from,\r\n        to,\r\n    };\r\n    if (Object.keys(attrs).length) {\r\n        output.attrs = attrs;\r\n    }\r\n    if (marks.length) {\r\n        output.marks = marks;\r\n    }\r\n    if (node.content.childCount) {\r\n        output.content = [];\r\n        node.forEach((child, offset) => {\r\n            var _a;\r\n            (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\r\n        });\r\n    }\r\n    if (node.text) {\r\n        output.text = node.text;\r\n    }\r\n    return output;\r\n}\n\nfunction getMarksBetween(from, to, doc) {\r\n    const marks = [];\r\n    // get all inclusive marks on empty selection\r\n    if (from === to) {\r\n        doc\r\n            .resolve(from)\r\n            .marks()\r\n            .forEach(mark => {\r\n            const $pos = doc.resolve(from - 1);\r\n            const range = getMarkRange($pos, mark.type);\r\n            if (!range) {\r\n                return;\r\n            }\r\n            marks.push({\r\n                mark,\r\n                ...range,\r\n            });\r\n        });\r\n    }\r\n    else {\r\n        doc.nodesBetween(from, to, (node, pos) => {\r\n            if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\r\n                return;\r\n            }\r\n            marks.push(...node.marks.map(mark => ({\r\n                from: pos,\r\n                to: pos + node.nodeSize,\r\n                mark,\r\n            })));\r\n        });\r\n    }\r\n    return marks;\r\n}\n\n/**\r\n * Finds the first node of a given type or name in the current selection.\r\n * @param state The editor state.\r\n * @param typeOrName The node type or name.\r\n * @param pos The position to start searching from.\r\n * @param maxDepth The maximum depth to search.\r\n * @returns The node and the depth as an array.\r\n */\r\nconst getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {\r\n    const $pos = state.doc.resolve(pos);\r\n    let currentDepth = maxDepth;\r\n    let node = null;\r\n    while (currentDepth > 0 && node === null) {\r\n        const currentNode = $pos.node(currentDepth);\r\n        if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\r\n            node = currentNode;\r\n        }\r\n        else {\r\n            currentDepth -= 1;\r\n        }\r\n    }\r\n    return [node, currentDepth];\r\n};\n\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\r\n    return Object.fromEntries(Object\r\n        .entries(attributes)\r\n        .filter(([name]) => {\r\n        const extensionAttribute = extensionAttributes.find(item => {\r\n            return item.type === typeName && item.name === name;\r\n        });\r\n        if (!extensionAttribute) {\r\n            return false;\r\n        }\r\n        return extensionAttribute.attribute.keepOnSplit;\r\n    }));\r\n}\n\nfunction isMarkActive(state, typeOrName, attributes = {}) {\r\n    const { empty, ranges } = state.selection;\r\n    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\r\n    if (empty) {\r\n        return !!(state.storedMarks || state.selection.$from.marks())\r\n            .filter(mark => {\r\n            if (!type) {\r\n                return true;\r\n            }\r\n            return type.name === mark.type.name;\r\n        })\r\n            .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));\r\n    }\r\n    let selectionRange = 0;\r\n    const markRanges = [];\r\n    ranges.forEach(({ $from, $to }) => {\r\n        const from = $from.pos;\r\n        const to = $to.pos;\r\n        state.doc.nodesBetween(from, to, (node, pos) => {\r\n            if (!node.isText && !node.marks.length) {\r\n                return;\r\n            }\r\n            const relativeFrom = Math.max(from, pos);\r\n            const relativeTo = Math.min(to, pos + node.nodeSize);\r\n            const range = relativeTo - relativeFrom;\r\n            selectionRange += range;\r\n            markRanges.push(...node.marks.map(mark => ({\r\n                mark,\r\n                from: relativeFrom,\r\n                to: relativeTo,\r\n            })));\r\n        });\r\n    });\r\n    if (selectionRange === 0) {\r\n        return false;\r\n    }\r\n    // calculate range of matched mark\r\n    const matchedRange = markRanges\r\n        .filter(markRange => {\r\n        if (!type) {\r\n            return true;\r\n        }\r\n        return type.name === markRange.mark.type.name;\r\n    })\r\n        .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\r\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\r\n    // calculate range of marks that excludes the searched mark\r\n    // for example `code` doesn’t allow any other marks\r\n    const excludedRange = markRanges\r\n        .filter(markRange => {\r\n        if (!type) {\r\n            return true;\r\n        }\r\n        return markRange.mark.type !== type && markRange.mark.type.excludes(type);\r\n    })\r\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\r\n    // we only include the result of `excludedRange`\r\n    // if there is a match at all\r\n    const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\r\n    return range >= selectionRange;\r\n}\n\nfunction isActive(state, name, attributes = {}) {\r\n    if (!name) {\r\n        return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\r\n    }\r\n    const schemaType = getSchemaTypeNameByName(name, state.schema);\r\n    if (schemaType === 'node') {\r\n        return isNodeActive(state, name, attributes);\r\n    }\r\n    if (schemaType === 'mark') {\r\n        return isMarkActive(state, name, attributes);\r\n    }\r\n    return false;\r\n}\n\nconst isAtEndOfNode = (state, nodeType) => {\r\n    const { $from, $to, $anchor } = state.selection;\r\n    if (nodeType) {\r\n        const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection);\r\n        if (!parentNode) {\r\n            return false;\r\n        }\r\n        const $parentPos = state.doc.resolve(parentNode.pos + 1);\r\n        if ($anchor.pos + 1 === $parentPos.end()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\n\nconst isAtStartOfNode = (state) => {\r\n    const { $from, $to } = state.selection;\r\n    if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\n\nfunction isList(name, extensions) {\r\n    const { nodeExtensions } = splitExtensions(extensions);\r\n    const extension = nodeExtensions.find(item => item.name === name);\r\n    if (!extension) {\r\n        return false;\r\n    }\r\n    const context = {\r\n        name: extension.name,\r\n        options: extension.options,\r\n        storage: extension.storage,\r\n    };\r\n    const group = callOrReturn(getExtensionField(extension, 'group', context));\r\n    if (typeof group !== 'string') {\r\n        return false;\r\n    }\r\n    return group.split(' ').includes('list');\r\n}\n\nfunction isNodeEmpty(node) {\r\n    var _a;\r\n    const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\r\n    const content = node.toJSON();\r\n    return JSON.stringify(defaultContent) === JSON.stringify(content);\r\n}\n\nfunction isNodeSelection(value) {\r\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection;\r\n}\n\nfunction posToDOMRect(view, from, to) {\r\n    const minPos = 0;\r\n    const maxPos = view.state.doc.content.size;\r\n    const resolvedFrom = minMax(from, minPos, maxPos);\r\n    const resolvedEnd = minMax(to, minPos, maxPos);\r\n    const start = view.coordsAtPos(resolvedFrom);\r\n    const end = view.coordsAtPos(resolvedEnd, -1);\r\n    const top = Math.min(start.top, end.top);\r\n    const bottom = Math.max(start.bottom, end.bottom);\r\n    const left = Math.min(start.left, end.left);\r\n    const right = Math.max(start.right, end.right);\r\n    const width = right - left;\r\n    const height = bottom - top;\r\n    const x = left;\r\n    const y = top;\r\n    const data = {\r\n        top,\r\n        bottom,\r\n        left,\r\n        right,\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n    };\r\n    return {\r\n        ...data,\r\n        toJSON: () => data,\r\n    };\r\n}\n\nfunction canSetMark(state, tr, newMarkType) {\r\n    var _a;\r\n    const { selection } = tr;\r\n    let cursor = null;\r\n    if (isTextSelection(selection)) {\r\n        cursor = selection.$cursor;\r\n    }\r\n    if (cursor) {\r\n        const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\r\n        // There can be no current marks that exclude the new mark\r\n        return (!!newMarkType.isInSet(currentMarks)\r\n            || !currentMarks.some(mark => mark.type.excludes(newMarkType)));\r\n    }\r\n    const { ranges } = selection;\r\n    return ranges.some(({ $from, $to }) => {\r\n        let someNodeSupportsMark = $from.depth === 0\r\n            ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)\r\n            : false;\r\n        state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\r\n            // If we already found a mark that we can enable, return false to bypass the remaining search\r\n            if (someNodeSupportsMark) {\r\n                return false;\r\n            }\r\n            if (node.isInline) {\r\n                const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\r\n                const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)\r\n                    || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));\r\n                someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\r\n            }\r\n            return !someNodeSupportsMark;\r\n        });\r\n        return someNodeSupportsMark;\r\n    });\r\n}\r\nconst setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\r\n    const { selection } = tr;\r\n    const { empty, ranges } = selection;\r\n    const type = getMarkType(typeOrName, state.schema);\r\n    if (dispatch) {\r\n        if (empty) {\r\n            const oldAttributes = getMarkAttributes(state, type);\r\n            tr.addStoredMark(type.create({\r\n                ...oldAttributes,\r\n                ...attributes,\r\n            }));\r\n        }\r\n        else {\r\n            ranges.forEach(range => {\r\n                const from = range.$from.pos;\r\n                const to = range.$to.pos;\r\n                state.doc.nodesBetween(from, to, (node, pos) => {\r\n                    const trimmedFrom = Math.max(pos, from);\r\n                    const trimmedTo = Math.min(pos + node.nodeSize, to);\r\n                    const someHasMark = node.marks.find(mark => mark.type === type);\r\n                    // if there is already a mark of this type\r\n                    // we know that we have to merge its attributes\r\n                    // otherwise we add a fresh new mark\r\n                    if (someHasMark) {\r\n                        node.marks.forEach(mark => {\r\n                            if (type === mark.type) {\r\n                                tr.addMark(trimmedFrom, trimmedTo, type.create({\r\n                                    ...mark.attrs,\r\n                                    ...attributes,\r\n                                }));\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    return canSetMark(state, tr, type);\r\n};\n\nconst setMeta = (key, value) => ({ tr }) => {\r\n    tr.setMeta(key, value);\r\n    return true;\r\n};\n\nconst setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    // TODO: use a fallback like insertContent?\r\n    if (!type.isTextblock) {\r\n        console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\r\n        return false;\r\n    }\r\n    return (chain()\r\n        // try to convert node to default node if needed\r\n        .command(({ commands }) => {\r\n        const canSetBlock = (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(state);\r\n        if (canSetBlock) {\r\n            return true;\r\n        }\r\n        return commands.clearNodes();\r\n    })\r\n        .command(({ state: updatedState }) => {\r\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(updatedState, dispatch);\r\n    })\r\n        .run());\r\n};\n\nconst setNodeSelection = position => ({ tr, dispatch }) => {\r\n    if (dispatch) {\r\n        const { doc } = tr;\r\n        const from = minMax(position, 0, doc.content.size);\r\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(doc, from);\r\n        tr.setSelection(selection);\r\n    }\r\n    return true;\r\n};\n\nconst setTextSelection = position => ({ tr, dispatch }) => {\r\n    if (dispatch) {\r\n        const { doc } = tr;\r\n        const { from, to } = typeof position === 'number' ? { from: position, to: position } : position;\r\n        const minPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atStart(doc).from;\r\n        const maxPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atEnd(doc).to;\r\n        const resolvedFrom = minMax(from, minPos, maxPos);\r\n        const resolvedEnd = minMax(to, minPos, maxPos);\r\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, resolvedFrom, resolvedEnd);\r\n        tr.setSelection(selection);\r\n    }\r\n    return true;\r\n};\n\nconst sinkListItem = typeOrName => ({ state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.sinkListItem)(type)(state, dispatch);\r\n};\n\nfunction ensureMarks(state, splittableMarks) {\r\n    const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\r\n    if (marks) {\r\n        const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\r\n        state.tr.ensureMarks(filteredMarks);\r\n    }\r\n}\r\nconst splitBlock = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {\r\n    const { selection, doc } = tr;\r\n    const { $from, $to } = selection;\r\n    const extensionAttributes = editor.extensionManager.attributes;\r\n    const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\r\n    if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && selection.node.isBlock) {\r\n        if (!$from.parentOffset || !(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(doc, $from.pos)) {\r\n            return false;\r\n        }\r\n        if (dispatch) {\r\n            if (keepMarks) {\r\n                ensureMarks(state, editor.extensionManager.splittableMarks);\r\n            }\r\n            tr.split($from.pos).scrollIntoView();\r\n        }\r\n        return true;\r\n    }\r\n    if (!$from.parent.isBlock) {\r\n        return false;\r\n    }\r\n    if (dispatch) {\r\n        const atEnd = $to.parentOffset === $to.parent.content.size;\r\n        if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\r\n            tr.deleteSelection();\r\n        }\r\n        const deflt = $from.depth === 0\r\n            ? undefined\r\n            : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\r\n        let types = atEnd && deflt\r\n            ? [\r\n                {\r\n                    type: deflt,\r\n                    attrs: newAttributes,\r\n                },\r\n            ]\r\n            : undefined;\r\n        let can = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);\r\n        if (!types\r\n            && !can\r\n            && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {\r\n            can = true;\r\n            types = deflt\r\n                ? [\r\n                    {\r\n                        type: deflt,\r\n                        attrs: newAttributes,\r\n                    },\r\n                ]\r\n                : undefined;\r\n        }\r\n        if (can) {\r\n            tr.split(tr.mapping.map($from.pos), 1, types);\r\n            if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\r\n                const first = tr.mapping.map($from.before());\r\n                const $first = tr.doc.resolve(first);\r\n                if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\r\n                    tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\r\n                }\r\n            }\r\n        }\r\n        if (keepMarks) {\r\n            ensureMarks(state, editor.extensionManager.splittableMarks);\r\n        }\r\n        tr.scrollIntoView();\r\n    }\r\n    return true;\r\n};\n\nconst splitListItem = typeOrName => ({ tr, state, dispatch, editor, }) => {\r\n    var _a;\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const { $from, $to } = state.selection;\r\n    // @ts-ignore\r\n    // eslint-disable-next-line\r\n    const node = state.selection.node;\r\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\r\n        return false;\r\n    }\r\n    const grandParent = $from.node(-1);\r\n    if (grandParent.type !== type) {\r\n        return false;\r\n    }\r\n    const extensionAttributes = editor.extensionManager.attributes;\r\n    if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\r\n        // In an empty block. If this is a nested list, the wrapping\r\n        // list item should be split. Otherwise, bail out and let next\r\n        // command handle lifting.\r\n        if ($from.depth === 2\r\n            || $from.node(-3).type !== type\r\n            || $from.index(-2) !== $from.node(-2).childCount - 1) {\r\n            return false;\r\n        }\r\n        if (dispatch) {\r\n            let wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.empty;\r\n            // eslint-disable-next-line\r\n            const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\r\n            // Build a fragment containing empty versions of the structure\r\n            // from the outer list item to the parent node of the cursor\r\n            for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\r\n                wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from($from.node(d).copy(wrap));\r\n            }\r\n            // eslint-disable-next-line\r\n            const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\r\n            // Add a second list item with an empty default start node\r\n            const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\r\n            const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\r\n            wrap = wrap.append(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(type.createAndFill(null, nextType) || undefined));\r\n            const start = $from.before($from.depth - (depthBefore - 1));\r\n            tr.replace(start, $from.after(-depthAfter), new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Slice(wrap, 4 - depthBefore, 0));\r\n            let sel = -1;\r\n            tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\r\n                if (sel > -1) {\r\n                    return false;\r\n                }\r\n                if (n.isTextblock && n.content.size === 0) {\r\n                    sel = pos + 1;\r\n                }\r\n            });\r\n            if (sel > -1) {\r\n                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(sel)));\r\n            }\r\n            tr.scrollIntoView();\r\n        }\r\n        return true;\r\n    }\r\n    const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\r\n    const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\r\n    const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\r\n    tr.delete($from.pos, $to.pos);\r\n    const types = nextType\r\n        ? [\r\n            { type, attrs: newTypeAttributes },\r\n            { type: nextType, attrs: newNextTypeAttributes },\r\n        ]\r\n        : [{ type, attrs: newTypeAttributes }];\r\n    if (!(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, $from.pos, 2)) {\r\n        return false;\r\n    }\r\n    if (dispatch) {\r\n        const { selection, storedMarks } = state;\r\n        const { splittableMarks } = editor.extensionManager;\r\n        const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\r\n        tr.split($from.pos, 2, types).scrollIntoView();\r\n        if (!marks || !dispatch) {\r\n            return true;\r\n        }\r\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\r\n        tr.ensureMarks(filteredMarks);\r\n    }\r\n    return true;\r\n};\n\nconst joinListBackwards = (tr, listType) => {\r\n    const list = findParentNode(node => node.type === listType)(tr.selection);\r\n    if (!list) {\r\n        return true;\r\n    }\r\n    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\r\n    if (before === undefined) {\r\n        return true;\r\n    }\r\n    const nodeBefore = tr.doc.nodeAt(before);\r\n    const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, list.pos);\r\n    if (!canJoinBackwards) {\r\n        return true;\r\n    }\r\n    tr.join(list.pos);\r\n    return true;\r\n};\r\nconst joinListForwards = (tr, listType) => {\r\n    const list = findParentNode(node => node.type === listType)(tr.selection);\r\n    if (!list) {\r\n        return true;\r\n    }\r\n    const after = tr.doc.resolve(list.start).after(list.depth);\r\n    if (after === undefined) {\r\n        return true;\r\n    }\r\n    const nodeAfter = tr.doc.nodeAt(after);\r\n    const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, after);\r\n    if (!canJoinForwards) {\r\n        return true;\r\n    }\r\n    tr.join(after);\r\n    return true;\r\n};\r\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {\r\n    const { extensions, splittableMarks } = editor.extensionManager;\r\n    const listType = getNodeType(listTypeOrName, state.schema);\r\n    const itemType = getNodeType(itemTypeOrName, state.schema);\r\n    const { selection, storedMarks } = state;\r\n    const { $from, $to } = selection;\r\n    const range = $from.blockRange($to);\r\n    const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\r\n    if (!range) {\r\n        return false;\r\n    }\r\n    const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\r\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\r\n        // remove list\r\n        if (parentList.node.type === listType) {\r\n            return commands.liftListItem(itemType);\r\n        }\r\n        // change list type\r\n        if (isList(parentList.node.type.name, extensions)\r\n            && listType.validContent(parentList.node.content)\r\n            && dispatch) {\r\n            return chain()\r\n                .command(() => {\r\n                tr.setNodeMarkup(parentList.pos, listType);\r\n                return true;\r\n            })\r\n                .command(() => joinListBackwards(tr, listType))\r\n                .command(() => joinListForwards(tr, listType))\r\n                .run();\r\n        }\r\n    }\r\n    if (!keepMarks || !marks || !dispatch) {\r\n        return chain()\r\n            // try to convert node to default node if needed\r\n            .command(() => {\r\n            const canWrapInList = can().wrapInList(listType, attributes);\r\n            if (canWrapInList) {\r\n                return true;\r\n            }\r\n            return commands.clearNodes();\r\n        })\r\n            .wrapInList(listType, attributes)\r\n            .command(() => joinListBackwards(tr, listType))\r\n            .command(() => joinListForwards(tr, listType))\r\n            .run();\r\n    }\r\n    return (chain()\r\n        // try to convert node to default node if needed\r\n        .command(() => {\r\n        const canWrapInList = can().wrapInList(listType, attributes);\r\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\r\n        tr.ensureMarks(filteredMarks);\r\n        if (canWrapInList) {\r\n            return true;\r\n        }\r\n        return commands.clearNodes();\r\n    })\r\n        .wrapInList(listType, attributes)\r\n        .command(() => joinListBackwards(tr, listType))\r\n        .command(() => joinListForwards(tr, listType))\r\n        .run());\r\n};\n\nconst toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\r\n    const { extendEmptyMarkRange = false } = options;\r\n    const type = getMarkType(typeOrName, state.schema);\r\n    const isActive = isMarkActive(state, type, attributes);\r\n    if (isActive) {\r\n        return commands.unsetMark(type, { extendEmptyMarkRange });\r\n    }\r\n    return commands.setMark(type, attributes);\r\n};\n\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const toggleType = getNodeType(toggleTypeOrName, state.schema);\r\n    const isActive = isNodeActive(state, type, attributes);\r\n    if (isActive) {\r\n        return commands.setNode(toggleType);\r\n    }\r\n    return commands.setNode(type, attributes);\r\n};\n\nconst toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    const isActive = isNodeActive(state, type, attributes);\r\n    if (isActive) {\r\n        return commands.lift(type);\r\n    }\r\n    return commands.wrapIn(type, attributes);\r\n};\n\nconst undoInputRule = () => ({ state, dispatch }) => {\r\n    const plugins = state.plugins;\r\n    for (let i = 0; i < plugins.length; i += 1) {\r\n        const plugin = plugins[i];\r\n        let undoable;\r\n        // @ts-ignore\r\n        // eslint-disable-next-line\r\n        if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\r\n            if (dispatch) {\r\n                const tr = state.tr;\r\n                const toUndo = undoable.transform;\r\n                for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\r\n                    tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\r\n                }\r\n                if (undoable.text) {\r\n                    const marks = tr.doc.resolve(undoable.from).marks();\r\n                    tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\r\n                }\r\n                else {\r\n                    tr.delete(undoable.from, undoable.to);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nconst unsetAllMarks = () => ({ tr, dispatch }) => {\r\n    const { selection } = tr;\r\n    const { empty, ranges } = selection;\r\n    if (empty) {\r\n        return true;\r\n    }\r\n    if (dispatch) {\r\n        ranges.forEach(range => {\r\n            tr.removeMark(range.$from.pos, range.$to.pos);\r\n        });\r\n    }\r\n    return true;\r\n};\n\nconst unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\r\n    var _a;\r\n    const { extendEmptyMarkRange = false } = options;\r\n    const { selection } = tr;\r\n    const type = getMarkType(typeOrName, state.schema);\r\n    const { $from, empty, ranges } = selection;\r\n    if (!dispatch) {\r\n        return true;\r\n    }\r\n    if (empty && extendEmptyMarkRange) {\r\n        let { from, to } = selection;\r\n        const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\r\n        const range = getMarkRange($from, type, attrs);\r\n        if (range) {\r\n            from = range.from;\r\n            to = range.to;\r\n        }\r\n        tr.removeMark(from, to, type);\r\n    }\r\n    else {\r\n        ranges.forEach(range => {\r\n            tr.removeMark(range.$from.pos, range.$to.pos, type);\r\n        });\r\n    }\r\n    tr.removeStoredMark(type);\r\n    return true;\r\n};\n\nconst updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\r\n    let nodeType = null;\r\n    let markType = null;\r\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\r\n    if (!schemaType) {\r\n        return false;\r\n    }\r\n    if (schemaType === 'node') {\r\n        nodeType = getNodeType(typeOrName, state.schema);\r\n    }\r\n    if (schemaType === 'mark') {\r\n        markType = getMarkType(typeOrName, state.schema);\r\n    }\r\n    if (dispatch) {\r\n        tr.selection.ranges.forEach(range => {\r\n            const from = range.$from.pos;\r\n            const to = range.$to.pos;\r\n            state.doc.nodesBetween(from, to, (node, pos) => {\r\n                if (nodeType && nodeType === node.type) {\r\n                    tr.setNodeMarkup(pos, undefined, {\r\n                        ...node.attrs,\r\n                        ...attributes,\r\n                    });\r\n                }\r\n                if (markType && node.marks.length) {\r\n                    node.marks.forEach(mark => {\r\n                        if (markType === mark.type) {\r\n                            const trimmedFrom = Math.max(pos, from);\r\n                            const trimmedTo = Math.min(pos + node.nodeSize, to);\r\n                            tr.addMark(trimmedFrom, trimmedTo, markType.create({\r\n                                ...mark.attrs,\r\n                                ...attributes,\r\n                            }));\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return true;\r\n};\n\nconst wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.wrapIn)(type, attributes)(state, dispatch);\r\n};\n\nconst wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\r\n    const type = getNodeType(typeOrName, state.schema);\r\n    return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.wrapInList)(type, attributes)(state, dispatch);\r\n};\n\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinUp: joinUp,\n  joinDown: joinDown,\n  joinBackward: joinBackward,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\n\nconst Commands = Extension.create({\r\n    name: 'commands',\r\n    addCommands() {\r\n        return {\r\n            ...commands,\r\n        };\r\n    },\r\n});\n\nconst Editable = Extension.create({\r\n    name: 'editable',\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('editable'),\r\n                props: {\r\n                    editable: () => this.editor.options.editable,\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nconst FocusEvents = Extension.create({\r\n    name: 'focusEvents',\r\n    addProseMirrorPlugins() {\r\n        const { editor } = this;\r\n        return [\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('focusEvents'),\r\n                props: {\r\n                    handleDOMEvents: {\r\n                        focus: (view, event) => {\r\n                            editor.isFocused = true;\r\n                            const transaction = editor.state.tr\r\n                                .setMeta('focus', { event })\r\n                                .setMeta('addToHistory', false);\r\n                            view.dispatch(transaction);\r\n                            return false;\r\n                        },\r\n                        blur: (view, event) => {\r\n                            editor.isFocused = false;\r\n                            const transaction = editor.state.tr\r\n                                .setMeta('blur', { event })\r\n                                .setMeta('addToHistory', false);\r\n                            view.dispatch(transaction);\r\n                            return false;\r\n                        },\r\n                    },\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nconst Keymap = Extension.create({\r\n    name: 'keymap',\r\n    addKeyboardShortcuts() {\r\n        const handleBackspace = () => this.editor.commands.first(({ commands }) => [\r\n            () => commands.undoInputRule(),\r\n            // maybe convert first text block node to default node\r\n            () => commands.command(({ tr }) => {\r\n                const { selection, doc } = tr;\r\n                const { empty, $anchor } = selection;\r\n                const { pos, parent } = $anchor;\r\n                const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\r\n                const parentIsIsolating = $parentPos.parent.type.spec.isolating;\r\n                const parentPos = $anchor.pos - $anchor.parentOffset;\r\n                const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)\r\n                    ? parentPos === $anchor.pos\r\n                    : _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc).from === pos;\r\n                if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {\r\n                    return false;\r\n                }\r\n                return commands.clearNodes();\r\n            }),\r\n            () => commands.deleteSelection(),\r\n            () => commands.joinBackward(),\r\n            () => commands.selectNodeBackward(),\r\n        ]);\r\n        const handleDelete = () => this.editor.commands.first(({ commands }) => [\r\n            () => commands.deleteSelection(),\r\n            () => commands.deleteCurrentNode(),\r\n            () => commands.joinForward(),\r\n            () => commands.selectNodeForward(),\r\n        ]);\r\n        const handleEnter = () => this.editor.commands.first(({ commands }) => [\r\n            () => commands.newlineInCode(),\r\n            () => commands.createParagraphNear(),\r\n            () => commands.liftEmptyBlock(),\r\n            () => commands.splitBlock(),\r\n        ]);\r\n        const baseKeymap = {\r\n            Enter: handleEnter,\r\n            'Mod-Enter': () => this.editor.commands.exitCode(),\r\n            Backspace: handleBackspace,\r\n            'Mod-Backspace': handleBackspace,\r\n            'Shift-Backspace': handleBackspace,\r\n            Delete: handleDelete,\r\n            'Mod-Delete': handleDelete,\r\n            'Mod-a': () => this.editor.commands.selectAll(),\r\n        };\r\n        const pcKeymap = {\r\n            ...baseKeymap,\r\n        };\r\n        const macKeymap = {\r\n            ...baseKeymap,\r\n            'Ctrl-h': handleBackspace,\r\n            'Alt-Backspace': handleBackspace,\r\n            'Ctrl-d': handleDelete,\r\n            'Ctrl-Alt-Backspace': handleDelete,\r\n            'Alt-Delete': handleDelete,\r\n            'Alt-d': handleDelete,\r\n            'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\r\n            'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\r\n        };\r\n        if (isiOS() || isMacOS()) {\r\n            return macKeymap;\r\n        }\r\n        return pcKeymap;\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            // With this plugin we check if the whole document was selected and deleted.\r\n            // In this case we will additionally call `clearNodes()` to convert e.g. a heading\r\n            // to a paragraph if necessary.\r\n            // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\r\n            // with many other commands.\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('clearDocument'),\r\n                appendTransaction: (transactions, oldState, newState) => {\r\n                    const docChanges = transactions.some(transaction => transaction.docChanged)\r\n                        && !oldState.doc.eq(newState.doc);\r\n                    if (!docChanges) {\r\n                        return;\r\n                    }\r\n                    const { empty, from, to } = oldState.selection;\r\n                    const allFrom = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(oldState.doc).from;\r\n                    const allEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(oldState.doc).to;\r\n                    const allWasSelected = from === allFrom && to === allEnd;\r\n                    if (empty || !allWasSelected) {\r\n                        return;\r\n                    }\r\n                    const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\r\n                    if (!isEmpty) {\r\n                        return;\r\n                    }\r\n                    const tr = newState.tr;\r\n                    const state = createChainableState({\r\n                        state: newState,\r\n                        transaction: tr,\r\n                    });\r\n                    const { commands } = new CommandManager({\r\n                        editor: this.editor,\r\n                        state,\r\n                    });\r\n                    commands.clearNodes();\r\n                    if (!tr.steps.length) {\r\n                        return;\r\n                    }\r\n                    return tr;\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nconst Tabindex = Extension.create({\r\n    name: 'tabindex',\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('tabindex'),\r\n                props: {\r\n                    attributes: this.editor.isEditable ? { tabindex: '0' } : {},\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\n\nclass NodePos {\r\n    constructor(pos, editor, isBlock = false, node = null) {\r\n        this.currentNode = null;\r\n        this.actualDepth = null;\r\n        this.isBlock = isBlock;\r\n        this.resolvedPos = pos;\r\n        this.editor = editor;\r\n        this.currentNode = node;\r\n    }\r\n    get name() {\r\n        return this.node.type.name;\r\n    }\r\n    get node() {\r\n        return this.currentNode || this.resolvedPos.node();\r\n    }\r\n    get element() {\r\n        return this.editor.view.domAtPos(this.pos).node;\r\n    }\r\n    get depth() {\r\n        var _a;\r\n        return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\r\n    }\r\n    get pos() {\r\n        return this.resolvedPos.pos;\r\n    }\r\n    get content() {\r\n        return this.node.content;\r\n    }\r\n    set content(content) {\r\n        let from = this.from;\r\n        let to = this.to;\r\n        if (this.isBlock) {\r\n            if (this.content.size === 0) {\r\n                console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\r\n                return;\r\n            }\r\n            from = this.from + 1;\r\n            to = this.to - 1;\r\n        }\r\n        this.editor.commands.insertContentAt({ from, to }, content);\r\n    }\r\n    get attributes() {\r\n        return this.node.attrs;\r\n    }\r\n    get textContent() {\r\n        return this.node.textContent;\r\n    }\r\n    get size() {\r\n        return this.node.nodeSize;\r\n    }\r\n    get from() {\r\n        if (this.isBlock) {\r\n            return this.pos;\r\n        }\r\n        return this.resolvedPos.start(this.resolvedPos.depth);\r\n    }\r\n    get range() {\r\n        return {\r\n            from: this.from,\r\n            to: this.to,\r\n        };\r\n    }\r\n    get to() {\r\n        if (this.isBlock) {\r\n            return this.pos + this.size;\r\n        }\r\n        return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\r\n    }\r\n    get parent() {\r\n        if (this.depth === 0) {\r\n            return null;\r\n        }\r\n        const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\r\n        const $pos = this.resolvedPos.doc.resolve(parentPos);\r\n        return new NodePos($pos, this.editor);\r\n    }\r\n    get before() {\r\n        let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\r\n        if ($pos.depth !== this.depth) {\r\n            $pos = this.resolvedPos.doc.resolve(this.from - 3);\r\n        }\r\n        return new NodePos($pos, this.editor);\r\n    }\r\n    get after() {\r\n        let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\r\n        if ($pos.depth !== this.depth) {\r\n            $pos = this.resolvedPos.doc.resolve(this.to + 3);\r\n        }\r\n        return new NodePos($pos, this.editor);\r\n    }\r\n    get children() {\r\n        const children = [];\r\n        this.node.content.forEach((node, offset) => {\r\n            const isBlock = node.isBlock && !node.isTextblock;\r\n            const targetPos = this.pos + offset + 1;\r\n            const $pos = this.resolvedPos.doc.resolve(targetPos);\r\n            if (!isBlock && $pos.depth <= this.depth) {\r\n                return;\r\n            }\r\n            const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\r\n            if (isBlock) {\r\n                childNodePos.actualDepth = this.depth + 1;\r\n            }\r\n            children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\r\n        });\r\n        return children;\r\n    }\r\n    get firstChild() {\r\n        return this.children[0] || null;\r\n    }\r\n    get lastChild() {\r\n        const children = this.children;\r\n        return children[children.length - 1] || null;\r\n    }\r\n    closest(selector, attributes = {}) {\r\n        let node = null;\r\n        let currentNode = this.parent;\r\n        while (currentNode && !node) {\r\n            if (currentNode.node.type.name === selector) {\r\n                if (Object.keys(attributes).length > 0) {\r\n                    const nodeAttributes = currentNode.node.attrs;\r\n                    const attrKeys = Object.keys(attributes);\r\n                    for (let index = 0; index < attrKeys.length; index += 1) {\r\n                        const key = attrKeys[index];\r\n                        if (nodeAttributes[key] !== attributes[key]) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    node = currentNode;\r\n                }\r\n            }\r\n            currentNode = currentNode.parent;\r\n        }\r\n        return node;\r\n    }\r\n    querySelector(selector, attributes = {}) {\r\n        return this.querySelectorAll(selector, attributes, true)[0] || null;\r\n    }\r\n    querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\r\n        let nodes = [];\r\n        if (!this.children || this.children.length === 0) {\r\n            return nodes;\r\n        }\r\n        const attrKeys = Object.keys(attributes);\r\n        /**\r\n         * Finds all children recursively that match the selector and attributes\r\n         * If firstItemOnly is true, it will return the first item found\r\n         */\r\n        this.children.forEach(childPos => {\r\n            // If we already found a node and we only want the first item, we dont need to keep going\r\n            if (firstItemOnly && nodes.length > 0) {\r\n                return;\r\n            }\r\n            if (childPos.node.type.name === selector) {\r\n                const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key]);\r\n                if (doesAllAttributesMatch) {\r\n                    nodes.push(childPos);\r\n                }\r\n            }\r\n            // If we already found a node and we only want the first item, we can stop here and skip the recursion\r\n            if (firstItemOnly && nodes.length > 0) {\r\n                return;\r\n            }\r\n            nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\r\n        });\r\n        return nodes;\r\n    }\r\n    setAttribute(attributes) {\r\n        const oldSelection = this.editor.state.selection;\r\n        this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from)\r\n            .run();\r\n    }\r\n}\n\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\n\nfunction createStyleTag(style, nonce, suffix) {\r\n    const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`);\r\n    if (tiptapStyleTag !== null) {\r\n        return tiptapStyleTag;\r\n    }\r\n    const styleNode = document.createElement('style');\r\n    if (nonce) {\r\n        styleNode.setAttribute('nonce', nonce);\r\n    }\r\n    styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '');\r\n    styleNode.innerHTML = style;\r\n    document.getElementsByTagName('head')[0].appendChild(styleNode);\r\n    return styleNode;\r\n}\n\nclass Editor extends EventEmitter {\r\n    constructor(options = {}) {\r\n        super();\r\n        this.isFocused = false;\r\n        this.extensionStorage = {};\r\n        this.options = {\r\n            element: document.createElement('div'),\r\n            content: '',\r\n            injectCSS: true,\r\n            injectNonce: undefined,\r\n            extensions: [],\r\n            autofocus: false,\r\n            editable: true,\r\n            editorProps: {},\r\n            parseOptions: {},\r\n            coreExtensionOptions: {},\r\n            enableInputRules: true,\r\n            enablePasteRules: true,\r\n            enableCoreExtensions: true,\r\n            onBeforeCreate: () => null,\r\n            onCreate: () => null,\r\n            onUpdate: () => null,\r\n            onSelectionUpdate: () => null,\r\n            onTransaction: () => null,\r\n            onFocus: () => null,\r\n            onBlur: () => null,\r\n            onDestroy: () => null,\r\n        };\r\n        this.isCapturingTransaction = false;\r\n        this.capturedTransaction = null;\r\n        this.setOptions(options);\r\n        this.createExtensionManager();\r\n        this.createCommandManager();\r\n        this.createSchema();\r\n        this.on('beforeCreate', this.options.onBeforeCreate);\r\n        this.emit('beforeCreate', { editor: this });\r\n        this.createView();\r\n        this.injectCSS();\r\n        this.on('create', this.options.onCreate);\r\n        this.on('update', this.options.onUpdate);\r\n        this.on('selectionUpdate', this.options.onSelectionUpdate);\r\n        this.on('transaction', this.options.onTransaction);\r\n        this.on('focus', this.options.onFocus);\r\n        this.on('blur', this.options.onBlur);\r\n        this.on('destroy', this.options.onDestroy);\r\n        window.setTimeout(() => {\r\n            if (this.isDestroyed) {\r\n                return;\r\n            }\r\n            this.commands.focus(this.options.autofocus);\r\n            this.emit('create', { editor: this });\r\n        }, 0);\r\n    }\r\n    /**\r\n     * Returns the editor storage.\r\n     */\r\n    get storage() {\r\n        return this.extensionStorage;\r\n    }\r\n    /**\r\n     * An object of all registered commands.\r\n     */\r\n    get commands() {\r\n        return this.commandManager.commands;\r\n    }\r\n    /**\r\n     * Create a command chain to call multiple commands at once.\r\n     */\r\n    chain() {\r\n        return this.commandManager.chain();\r\n    }\r\n    /**\r\n     * Check if a command or a command chain can be executed. Without executing it.\r\n     */\r\n    can() {\r\n        return this.commandManager.can();\r\n    }\r\n    /**\r\n     * Inject CSS styles.\r\n     */\r\n    injectCSS() {\r\n        if (this.options.injectCSS && document) {\r\n            this.css = createStyleTag(style, this.options.injectNonce);\r\n        }\r\n    }\r\n    /**\r\n     * Update editor options.\r\n     *\r\n     * @param options A list of options\r\n     */\r\n    setOptions(options = {}) {\r\n        this.options = {\r\n            ...this.options,\r\n            ...options,\r\n        };\r\n        if (!this.view || !this.state || this.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.options.editorProps) {\r\n            this.view.setProps(this.options.editorProps);\r\n        }\r\n        this.view.updateState(this.state);\r\n    }\r\n    /**\r\n     * Update editable state of the editor.\r\n     */\r\n    setEditable(editable, emitUpdate = true) {\r\n        this.setOptions({ editable });\r\n        if (emitUpdate) {\r\n            this.emit('update', { editor: this, transaction: this.state.tr });\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether the editor is editable.\r\n     */\r\n    get isEditable() {\r\n        // since plugins are applied after creating the view\r\n        // `editable` is always `true` for one tick.\r\n        // that’s why we also have to check for `options.editable`\r\n        return this.options.editable && this.view && this.view.editable;\r\n    }\r\n    /**\r\n     * Returns the editor state.\r\n     */\r\n    get state() {\r\n        return this.view.state;\r\n    }\r\n    /**\r\n     * Register a ProseMirror plugin.\r\n     *\r\n     * @param plugin A ProseMirror plugin\r\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n     */\r\n    registerPlugin(plugin, handlePlugins) {\r\n        const plugins = isFunction(handlePlugins)\r\n            ? handlePlugins(plugin, [...this.state.plugins])\r\n            : [...this.state.plugins, plugin];\r\n        const state = this.state.reconfigure({ plugins });\r\n        this.view.updateState(state);\r\n    }\r\n    /**\r\n     * Unregister a ProseMirror plugin.\r\n     *\r\n     * @param nameOrPluginKey The plugins name\r\n     */\r\n    unregisterPlugin(nameOrPluginKey) {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\r\n        const state = this.state.reconfigure({\r\n            // @ts-ignore\r\n            plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\r\n        });\r\n        this.view.updateState(state);\r\n    }\r\n    /**\r\n     * Creates an extension manager.\r\n     */\r\n    createExtensionManager() {\r\n        var _a, _b;\r\n        const coreExtensions = this.options.enableCoreExtensions ? [\r\n            Editable,\r\n            ClipboardTextSerializer.configure({\r\n                blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator,\r\n            }),\r\n            Commands,\r\n            FocusEvents,\r\n            Keymap,\r\n            Tabindex,\r\n        ] : [];\r\n        const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\r\n            return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\r\n        });\r\n        this.extensionManager = new ExtensionManager(allExtensions, this);\r\n    }\r\n    /**\r\n     * Creates an command manager.\r\n     */\r\n    createCommandManager() {\r\n        this.commandManager = new CommandManager({\r\n            editor: this,\r\n        });\r\n    }\r\n    /**\r\n     * Creates a ProseMirror schema.\r\n     */\r\n    createSchema() {\r\n        this.schema = this.extensionManager.schema;\r\n    }\r\n    /**\r\n     * Creates a ProseMirror view.\r\n     */\r\n    createView() {\r\n        const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\r\n        const selection = resolveFocusPosition(doc, this.options.autofocus);\r\n        this.view = new _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.EditorView(this.options.element, {\r\n            ...this.options.editorProps,\r\n            dispatchTransaction: this.dispatchTransaction.bind(this),\r\n            state: _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.EditorState.create({\r\n                doc,\r\n                selection: selection || undefined,\r\n            }),\r\n        });\r\n        // `editor.view` is not yet available at this time.\r\n        // Therefore we will add all plugins and node views directly afterwards.\r\n        const newState = this.state.reconfigure({\r\n            plugins: this.extensionManager.plugins,\r\n        });\r\n        this.view.updateState(newState);\r\n        this.createNodeViews();\r\n        this.prependClass();\r\n        // Let’s store the editor instance in the DOM element.\r\n        // So we’ll have access to it for tests.\r\n        const dom = this.view.dom;\r\n        dom.editor = this;\r\n    }\r\n    /**\r\n     * Creates all node views.\r\n     */\r\n    createNodeViews() {\r\n        this.view.setProps({\r\n            nodeViews: this.extensionManager.nodeViews,\r\n        });\r\n    }\r\n    /**\r\n     * Prepend class name to element.\r\n     */\r\n    prependClass() {\r\n        this.view.dom.className = `tiptap ${this.view.dom.className}`;\r\n    }\r\n    captureTransaction(fn) {\r\n        this.isCapturingTransaction = true;\r\n        fn();\r\n        this.isCapturingTransaction = false;\r\n        const tr = this.capturedTransaction;\r\n        this.capturedTransaction = null;\r\n        return tr;\r\n    }\r\n    /**\r\n     * The callback over which to send transactions (state updates) produced by the view.\r\n     *\r\n     * @param transaction An editor state transaction\r\n     */\r\n    dispatchTransaction(transaction) {\r\n        // if the editor / the view of the editor was destroyed\r\n        // the transaction should not be dispatched as there is no view anymore.\r\n        if (this.view.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.isCapturingTransaction) {\r\n            if (!this.capturedTransaction) {\r\n                this.capturedTransaction = transaction;\r\n                return;\r\n            }\r\n            transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });\r\n            return;\r\n        }\r\n        const state = this.state.apply(transaction);\r\n        const selectionHasChanged = !this.state.selection.eq(state.selection);\r\n        this.view.updateState(state);\r\n        this.emit('transaction', {\r\n            editor: this,\r\n            transaction,\r\n        });\r\n        if (selectionHasChanged) {\r\n            this.emit('selectionUpdate', {\r\n                editor: this,\r\n                transaction,\r\n            });\r\n        }\r\n        const focus = transaction.getMeta('focus');\r\n        const blur = transaction.getMeta('blur');\r\n        if (focus) {\r\n            this.emit('focus', {\r\n                editor: this,\r\n                event: focus.event,\r\n                transaction,\r\n            });\r\n        }\r\n        if (blur) {\r\n            this.emit('blur', {\r\n                editor: this,\r\n                event: blur.event,\r\n                transaction,\r\n            });\r\n        }\r\n        if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\r\n            return;\r\n        }\r\n        this.emit('update', {\r\n            editor: this,\r\n            transaction,\r\n        });\r\n    }\r\n    /**\r\n     * Get attributes of the currently selected node or mark.\r\n     */\r\n    getAttributes(nameOrType) {\r\n        return getAttributes(this.state, nameOrType);\r\n    }\r\n    isActive(nameOrAttributes, attributesOrUndefined) {\r\n        const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\r\n        const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\r\n        return isActive(this.state, name, attributes);\r\n    }\r\n    /**\r\n     * Get the document as JSON.\r\n     */\r\n    getJSON() {\r\n        return this.state.doc.toJSON();\r\n    }\r\n    /**\r\n     * Get the document as HTML.\r\n     */\r\n    getHTML() {\r\n        return getHTMLFromFragment(this.state.doc.content, this.schema);\r\n    }\r\n    /**\r\n     * Get the document as text.\r\n     */\r\n    getText(options) {\r\n        const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\r\n        return getText(this.state.doc, {\r\n            blockSeparator,\r\n            textSerializers: {\r\n                ...getTextSerializersFromSchema(this.schema),\r\n                ...textSerializers,\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Check if there is no content.\r\n     */\r\n    get isEmpty() {\r\n        return isNodeEmpty(this.state.doc);\r\n    }\r\n    /**\r\n     * Get the number of characters for the current document.\r\n     *\r\n     * @deprecated\r\n     */\r\n    getCharacterCount() {\r\n        console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\r\n        return this.state.doc.content.size - 2;\r\n    }\r\n    /**\r\n     * Destroy the editor.\r\n     */\r\n    destroy() {\r\n        this.emit('destroy');\r\n        if (this.view) {\r\n            this.view.destroy();\r\n        }\r\n        this.removeAllListeners();\r\n    }\r\n    /**\r\n     * Check if the editor is already destroyed.\r\n     */\r\n    get isDestroyed() {\r\n        var _a;\r\n        // @ts-ignore\r\n        return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\r\n    }\r\n    $node(selector, attributes) {\r\n        var _a;\r\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\r\n    }\r\n    $nodes(selector, attributes) {\r\n        var _a;\r\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\r\n    }\r\n    $pos(pos) {\r\n        const $pos = this.state.doc.resolve(pos);\r\n        return new NodePos($pos, this);\r\n    }\r\n    get $doc() {\r\n        return this.$pos(0);\r\n    }\r\n}\n\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n */\r\nfunction markInputRule(config) {\r\n    return new InputRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match }) => {\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match);\r\n            if (attributes === false || attributes === null) {\r\n                return null;\r\n            }\r\n            const { tr } = state;\r\n            const captureGroup = match[match.length - 1];\r\n            const fullMatch = match[0];\r\n            if (captureGroup) {\r\n                const startSpaces = fullMatch.search(/\\S/);\r\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\r\n                const textEnd = textStart + captureGroup.length;\r\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\r\n                    .filter(item => {\r\n                    // @ts-ignore\r\n                    const excluded = item.mark.type.excluded;\r\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\r\n                })\r\n                    .filter(item => item.to > textStart);\r\n                if (excludedMarks.length) {\r\n                    return null;\r\n                }\r\n                if (textEnd < range.to) {\r\n                    tr.delete(textEnd, range.to);\r\n                }\r\n                if (textStart > range.from) {\r\n                    tr.delete(range.from + startSpaces, textStart);\r\n                }\r\n                const markEnd = range.from + startSpaces + captureGroup.length;\r\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\r\n                tr.removeStoredMark(config.type);\r\n            }\r\n        },\r\n    });\r\n}\n\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n */\r\nfunction nodeInputRule(config) {\r\n    return new InputRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match }) => {\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\r\n            const { tr } = state;\r\n            const start = range.from;\r\n            let end = range.to;\r\n            const newNode = config.type.create(attributes);\r\n            if (match[1]) {\r\n                const offset = match[0].lastIndexOf(match[1]);\r\n                let matchStart = start + offset;\r\n                if (matchStart > end) {\r\n                    matchStart = end;\r\n                }\r\n                else {\r\n                    end = matchStart + match[1].length;\r\n                }\r\n                // insert last typed character\r\n                const lastChar = match[0][match[0].length - 1];\r\n                tr.insertText(lastChar, start + match[0].length - 1);\r\n                // insert node from input rule\r\n                tr.replaceWith(matchStart, end, newNode);\r\n            }\r\n            else if (match[0]) {\r\n                tr.insert(start - 1, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\r\n            }\r\n            tr.scrollIntoView();\r\n        },\r\n    });\r\n}\n\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n */\r\nfunction textblockTypeInputRule(config) {\r\n    return new InputRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match }) => {\r\n            const $start = state.doc.resolve(range.from);\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\r\n            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\r\n                return null;\r\n            }\r\n            state.tr\r\n                .delete(range.from, range.to)\r\n                .setBlockType(range.from, range.from, config.type, attributes);\r\n        },\r\n    });\r\n}\n\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n */\r\nfunction textInputRule(config) {\r\n    return new InputRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match }) => {\r\n            let insert = config.replace;\r\n            let start = range.from;\r\n            const end = range.to;\r\n            if (match[1]) {\r\n                const offset = match[0].lastIndexOf(match[1]);\r\n                insert += match[0].slice(offset + match[1].length);\r\n                start += offset;\r\n                const cutOff = start - end;\r\n                if (cutOff > 0) {\r\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\r\n                    start = end;\r\n                }\r\n            }\r\n            state.tr.insertText(insert, start, end);\r\n        },\r\n    });\r\n}\n\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n */\r\nfunction wrappingInputRule(config) {\r\n    return new InputRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match, chain, }) => {\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\r\n            const tr = state.tr.delete(range.from, range.to);\r\n            const $start = tr.doc.resolve(range.from);\r\n            const blockRange = $start.blockRange();\r\n            const wrapping = blockRange && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.findWrapping)(blockRange, config.type, attributes);\r\n            if (!wrapping) {\r\n                return null;\r\n            }\r\n            tr.wrap(blockRange, wrapping);\r\n            if (config.keepMarks && config.editor) {\r\n                const { selection, storedMarks } = state;\r\n                const { splittableMarks } = config.editor.extensionManager;\r\n                const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\r\n                if (marks) {\r\n                    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\r\n                    tr.ensureMarks(filteredMarks);\r\n                }\r\n            }\r\n            if (config.keepAttributes) {\r\n                /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\r\n                const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\r\n                chain().updateAttributes(nodeType, attributes).run();\r\n            }\r\n            const before = tr.doc.resolve(range.from - 1).nodeBefore;\r\n            if (before\r\n                && before.type === config.type\r\n                && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, range.from - 1)\r\n                && (!config.joinPredicate || config.joinPredicate(match, before))) {\r\n                tr.join(range.from - 1);\r\n            }\r\n        },\r\n    });\r\n}\n\nclass Mark {\r\n    constructor(config = {}) {\r\n        this.type = 'mark';\r\n        this.name = 'mark';\r\n        this.parent = null;\r\n        this.child = null;\r\n        this.config = {\r\n            name: this.name,\r\n            defaultOptions: {},\r\n        };\r\n        this.config = {\r\n            ...this.config,\r\n            ...config,\r\n        };\r\n        this.name = this.config.name;\r\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\r\n        }\r\n        // TODO: remove `addOptions` fallback\r\n        this.options = this.config.defaultOptions;\r\n        if (this.config.addOptions) {\r\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\r\n                name: this.name,\r\n            }));\r\n        }\r\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\r\n            name: this.name,\r\n            options: this.options,\r\n        })) || {};\r\n    }\r\n    static create(config = {}) {\r\n        return new Mark(config);\r\n    }\r\n    configure(options = {}) {\r\n        // return a new instance so we can use the same extension\r\n        // with different calls of `configure`\r\n        const extension = this.extend();\r\n        extension.options = mergeDeep(this.options, options);\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n    extend(extendedConfig = {}) {\r\n        const extension = new Mark({ ...this.config, ...extendedConfig });\r\n        extension.parent = this;\r\n        this.child = extension;\r\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\r\n        if (extendedConfig.defaultOptions) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\r\n        }\r\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\r\n            name: extension.name,\r\n        }));\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n    static handleExit({ editor, mark }) {\r\n        const { tr } = editor.state;\r\n        const currentPos = editor.state.selection.$from;\r\n        const isAtEnd = currentPos.pos === currentPos.end();\r\n        if (isAtEnd) {\r\n            const currentMarks = currentPos.marks();\r\n            const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\r\n            if (!isInMark) {\r\n                return false;\r\n            }\r\n            const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\r\n            if (removeMark) {\r\n                tr.removeStoredMark(removeMark);\r\n            }\r\n            tr.insertText(' ', currentPos.pos);\r\n            editor.view.dispatch(tr);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\n\nclass Node {\r\n    constructor(config = {}) {\r\n        this.type = 'node';\r\n        this.name = 'node';\r\n        this.parent = null;\r\n        this.child = null;\r\n        this.config = {\r\n            name: this.name,\r\n            defaultOptions: {},\r\n        };\r\n        this.config = {\r\n            ...this.config,\r\n            ...config,\r\n        };\r\n        this.name = this.config.name;\r\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\r\n        }\r\n        // TODO: remove `addOptions` fallback\r\n        this.options = this.config.defaultOptions;\r\n        if (this.config.addOptions) {\r\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\r\n                name: this.name,\r\n            }));\r\n        }\r\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\r\n            name: this.name,\r\n            options: this.options,\r\n        })) || {};\r\n    }\r\n    static create(config = {}) {\r\n        return new Node(config);\r\n    }\r\n    configure(options = {}) {\r\n        // return a new instance so we can use the same extension\r\n        // with different calls of `configure`\r\n        const extension = this.extend();\r\n        extension.options = mergeDeep(this.options, options);\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n    extend(extendedConfig = {}) {\r\n        const extension = new Node({ ...this.config, ...extendedConfig });\r\n        extension.parent = this;\r\n        this.child = extension;\r\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\r\n        if (extendedConfig.defaultOptions) {\r\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\r\n        }\r\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\r\n            name: extension.name,\r\n        }));\r\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\r\n            name: extension.name,\r\n            options: extension.options,\r\n        }));\r\n        return extension;\r\n    }\r\n}\n\nfunction isAndroid() {\r\n    return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\r\n}\n\nclass NodeView {\r\n    constructor(component, props, options) {\r\n        this.isDragging = false;\r\n        this.component = component;\r\n        this.editor = props.editor;\r\n        this.options = {\r\n            stopEvent: null,\r\n            ignoreMutation: null,\r\n            ...options,\r\n        };\r\n        this.extension = props.extension;\r\n        this.node = props.node;\r\n        this.decorations = props.decorations;\r\n        this.getPos = props.getPos;\r\n        this.mount();\r\n    }\r\n    mount() {\r\n        // eslint-disable-next-line\r\n        return;\r\n    }\r\n    get dom() {\r\n        return this.editor.view.dom;\r\n    }\r\n    get contentDOM() {\r\n        return null;\r\n    }\r\n    onDragStart(event) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        const { view } = this.editor;\r\n        const target = event.target;\r\n        // get the drag handle element\r\n        // `closest` is not available for text nodes so we may have to use its parent\r\n        const dragHandle = target.nodeType === 3\r\n            ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]')\r\n            : target.closest('[data-drag-handle]');\r\n        if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\r\n            return;\r\n        }\r\n        let x = 0;\r\n        let y = 0;\r\n        // calculate offset for drag element if we use a different drag handle element\r\n        if (this.dom !== dragHandle) {\r\n            const domBox = this.dom.getBoundingClientRect();\r\n            const handleBox = dragHandle.getBoundingClientRect();\r\n            // In React, we have to go through nativeEvent to reach offsetX/offsetY.\r\n            const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\r\n            const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\r\n            x = handleBox.x - domBox.x + offsetX;\r\n            y = handleBox.y - domBox.y + offsetY;\r\n        }\r\n        (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\r\n        // we need to tell ProseMirror that we want to move the whole node\r\n        // so we create a NodeSelection\r\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(view.state.doc, this.getPos());\r\n        const transaction = view.state.tr.setSelection(selection);\r\n        view.dispatch(transaction);\r\n    }\r\n    stopEvent(event) {\r\n        var _a;\r\n        if (!this.dom) {\r\n            return false;\r\n        }\r\n        if (typeof this.options.stopEvent === 'function') {\r\n            return this.options.stopEvent({ event });\r\n        }\r\n        const target = event.target;\r\n        const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\r\n        // any event from child nodes should be handled by ProseMirror\r\n        if (!isInElement) {\r\n            return false;\r\n        }\r\n        const isDragEvent = event.type.startsWith('drag');\r\n        const isDropEvent = event.type === 'drop';\r\n        const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\r\n        // any input event within node views should be ignored by ProseMirror\r\n        if (isInput && !isDropEvent && !isDragEvent) {\r\n            return true;\r\n        }\r\n        const { isEditable } = this.editor;\r\n        const { isDragging } = this;\r\n        const isDraggable = !!this.node.type.spec.draggable;\r\n        const isSelectable = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(this.node);\r\n        const isCopyEvent = event.type === 'copy';\r\n        const isPasteEvent = event.type === 'paste';\r\n        const isCutEvent = event.type === 'cut';\r\n        const isClickEvent = event.type === 'mousedown';\r\n        // ProseMirror tries to drag selectable nodes\r\n        // even if `draggable` is set to `false`\r\n        // this fix prevents that\r\n        if (!isDraggable && isSelectable && isDragEvent) {\r\n            event.preventDefault();\r\n        }\r\n        if (isDraggable && isDragEvent && !isDragging) {\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n        // we have to store that dragging started\r\n        if (isDraggable && isEditable && !isDragging && isClickEvent) {\r\n            const dragHandle = target.closest('[data-drag-handle]');\r\n            const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\r\n            if (isValidDragHandle) {\r\n                this.isDragging = true;\r\n                document.addEventListener('dragend', () => {\r\n                    this.isDragging = false;\r\n                }, { once: true });\r\n                document.addEventListener('drop', () => {\r\n                    this.isDragging = false;\r\n                }, { once: true });\r\n                document.addEventListener('mouseup', () => {\r\n                    this.isDragging = false;\r\n                }, { once: true });\r\n            }\r\n        }\r\n        // these events are handled by prosemirror\r\n        if (isDragging\r\n            || isDropEvent\r\n            || isCopyEvent\r\n            || isPasteEvent\r\n            || isCutEvent\r\n            || (isClickEvent && isSelectable)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    ignoreMutation(mutation) {\r\n        if (!this.dom || !this.contentDOM) {\r\n            return true;\r\n        }\r\n        if (typeof this.options.ignoreMutation === 'function') {\r\n            return this.options.ignoreMutation({ mutation });\r\n        }\r\n        // a leaf/atom node is like a black box for ProseMirror\r\n        // and should be fully handled by the node view\r\n        if (this.node.isLeaf || this.node.isAtom) {\r\n            return true;\r\n        }\r\n        // ProseMirror should handle any selections\r\n        if (mutation.type === 'selection') {\r\n            return false;\r\n        }\r\n        // try to prevent a bug on iOS and Android that will break node views on enter\r\n        // this is because ProseMirror can’t preventDispatch on enter\r\n        // this will lead to a re-render of the node view on enter\r\n        // see: https://github.com/ueberdosis/tiptap/issues/1214\r\n        // see: https://github.com/ueberdosis/tiptap/issues/2534\r\n        if (this.dom.contains(mutation.target)\r\n            && mutation.type === 'childList'\r\n            && (isiOS() || isAndroid())\r\n            && this.editor.isFocused) {\r\n            const changedNodes = [\r\n                ...Array.from(mutation.addedNodes),\r\n                ...Array.from(mutation.removedNodes),\r\n            ];\r\n            // we’ll check if every changed node is contentEditable\r\n            // to make sure it’s probably mutated by ProseMirror\r\n            if (changedNodes.every(node => node.isContentEditable)) {\r\n                return false;\r\n            }\r\n        }\r\n        // we will allow mutation contentDOM with attributes\r\n        // so we can for example adding classes within our node view\r\n        if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\r\n            return true;\r\n        }\r\n        // ProseMirror should handle any changes within contentDOM\r\n        if (this.contentDOM.contains(mutation.target)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    updateAttributes(attributes) {\r\n        this.editor.commands.command(({ tr }) => {\r\n            const pos = this.getPos();\r\n            tr.setNodeMarkup(pos, undefined, {\r\n                ...this.node.attrs,\r\n                ...attributes,\r\n            });\r\n            return true;\r\n        });\r\n    }\r\n    deleteNode() {\r\n        const from = this.getPos();\r\n        const to = from + this.node.nodeSize;\r\n        this.editor.commands.deleteRange({ from, to });\r\n    }\r\n}\n\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n */\r\nfunction markPasteRule(config) {\r\n    return new PasteRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match, pasteEvent, }) => {\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\r\n            if (attributes === false || attributes === null) {\r\n                return null;\r\n            }\r\n            const { tr } = state;\r\n            const captureGroup = match[match.length - 1];\r\n            const fullMatch = match[0];\r\n            let markEnd = range.to;\r\n            if (captureGroup) {\r\n                const startSpaces = fullMatch.search(/\\S/);\r\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\r\n                const textEnd = textStart + captureGroup.length;\r\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\r\n                    .filter(item => {\r\n                    // @ts-ignore\r\n                    const excluded = item.mark.type.excluded;\r\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\r\n                })\r\n                    .filter(item => item.to > textStart);\r\n                if (excludedMarks.length) {\r\n                    return null;\r\n                }\r\n                if (textEnd < range.to) {\r\n                    tr.delete(textEnd, range.to);\r\n                }\r\n                if (textStart > range.from) {\r\n                    tr.delete(range.from + startSpaces, textStart);\r\n                }\r\n                markEnd = range.from + startSpaces + captureGroup.length;\r\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\r\n                tr.removeStoredMark(config.type);\r\n            }\r\n        },\r\n    });\r\n}\n\n// source: https://stackoverflow.com/a/6969486\r\nfunction escapeForRegEx(string) {\r\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\n\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\n\n/**\r\n * Build an paste rule that adds a node when the\r\n * matched text is pasted into it.\r\n */\r\nfunction nodePasteRule(config) {\r\n    return new PasteRule({\r\n        find: config.find,\r\n        handler({ match, chain, range, pasteEvent, }) {\r\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\r\n            if (attributes === false || attributes === null) {\r\n                return null;\r\n            }\r\n            if (match.input) {\r\n                chain().deleteRange(range).insertContentAt(range.from, {\r\n                    type: config.type.name,\r\n                    attrs: attributes,\r\n                });\r\n            }\r\n        },\r\n    });\r\n}\n\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n */\r\nfunction textPasteRule(config) {\r\n    return new PasteRule({\r\n        find: config.find,\r\n        handler: ({ state, range, match }) => {\r\n            let insert = config.replace;\r\n            let start = range.from;\r\n            const end = range.to;\r\n            if (match[1]) {\r\n                const offset = match[0].lastIndexOf(match[1]);\r\n                insert += match[0].slice(offset + match[1].length);\r\n                start += offset;\r\n                const cutOff = start - end;\r\n                if (cutOff > 0) {\r\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\r\n                    start = end;\r\n                }\r\n            }\r\n            state.tr.insertText(insert, start, end);\r\n        },\r\n    });\r\n}\n\nclass Tracker {\r\n    constructor(transaction) {\r\n        this.transaction = transaction;\r\n        this.currentStep = this.transaction.steps.length;\r\n    }\r\n    map(position) {\r\n        let deleted = false;\r\n        const mappedPosition = this.transaction.steps\r\n            .slice(this.currentStep)\r\n            .reduce((newPosition, step) => {\r\n            const mapResult = step.getMap().mapResult(newPosition);\r\n            if (mapResult.deleted) {\r\n                deleted = true;\r\n            }\r\n            return mapResult.pos;\r\n        }, position);\r\n        return {\r\n            position: mappedPosition,\r\n            deleted,\r\n        };\r\n    }\r\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-blockquote/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blockquote: () => (/* binding */ Blockquote),\n/* harmony export */   \"default\": () => (/* binding */ Blockquote),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst inputRegex = /^\\s*>\\s$/;\r\nconst Blockquote = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'blockquote',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'block+',\r\n    group: 'block',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'blockquote' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['blockquote', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setBlockquote: () => ({ commands }) => {\r\n                return commands.wrapIn(this.name);\r\n            },\r\n            toggleBlockquote: () => ({ commands }) => {\r\n                return commands.toggleWrap(this.name);\r\n            },\r\n            unsetBlockquote: () => ({ commands }) => {\r\n                return commands.lift(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYmxvY2txdW90ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0U7O0FBRXhFO0FBQ0EsbUJBQW1CLDhDQUFJO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakM7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyw4QkFBOEIsNkRBQWU7QUFDN0MsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVTtBQUM5QztBQUNBLGFBQWE7QUFDYix1Q0FBdUMsVUFBVTtBQUNqRDtBQUNBLGFBQWE7QUFDYixzQ0FBc0MsVUFBVTtBQUNoRDtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwrREFBaUI7QUFDN0I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUV3RDtBQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYmxvY2txdW90ZS9kaXN0L2luZGV4LmpzP2M3YmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzLCB3cmFwcGluZ0lucHV0UnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IGlucHV0UmVnZXggPSAvXlxccyo+XFxzJC87XHJcbmNvbnN0IEJsb2NrcXVvdGUgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnYmxvY2txdW90ZScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxyXG4gICAgZ3JvdXA6ICdibG9jaycsXHJcbiAgICBkZWZpbmluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ2Jsb2NrcXVvdGUnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2Jsb2NrcXVvdGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEJsb2NrcXVvdGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy53cmFwSW4odGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9nZ2xlQmxvY2txdW90ZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZVdyYXAodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRCbG9ja3F1b3RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMubGlmdCh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1TaGlmdC1iJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQmxvY2txdW90ZSgpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB3cmFwcGluZ0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEJsb2NrcXVvdGUsIEJsb2NrcXVvdGUgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bold: () => (/* binding */ Bold),\n/* harmony export */   \"default\": () => (/* binding */ Bold),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/;\r\nconst starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g;\r\nconst underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/;\r\nconst underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g;\r\nconst Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'bold',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'strong',\r\n            },\r\n            {\r\n                tag: 'b',\r\n                getAttrs: node => node.style.fontWeight !== 'normal' && null,\r\n            },\r\n            {\r\n                style: 'font-weight',\r\n                getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null,\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['strong', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setBold: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleBold: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetBold: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-b': () => this.editor.commands.toggleBold(),\r\n            'Mod-B': () => this.editor.commands.toggleBold(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: starInputRegex,\r\n                type: this.type,\r\n            }),\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: underscoreInputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: starPasteRegex,\r\n                type: this.type,\r\n            }),\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: underscorePasteRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYm9sZC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUY7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4Q0FBSTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx3REFBd0QsR0FBRztBQUMzRCxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQywwQkFBMEIsNkRBQWU7QUFDekMsS0FBSztBQUNMO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBLGFBQWE7QUFDYixpQ0FBaUMsVUFBVTtBQUMzQztBQUNBLGFBQWE7QUFDYixnQ0FBZ0MsVUFBVTtBQUMxQztBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLENBQUM7O0FBRTRHO0FBQzdHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1ib2xkL2Rpc3QvaW5kZXguanM/MWE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBzdGFySW5wdXRSZWdleCA9IC8oPzpefFxccykoXFwqXFwqKD8hXFxzK1xcKlxcKikoKD86W14qXSspKVxcKlxcKig/IVxccytcXCpcXCopKSQvO1xyXG5jb25zdCBzdGFyUGFzdGVSZWdleCA9IC8oPzpefFxccykoXFwqXFwqKD8hXFxzK1xcKlxcKikoKD86W14qXSspKVxcKlxcKig/IVxccytcXCpcXCopKS9nO1xyXG5jb25zdCB1bmRlcnNjb3JlSW5wdXRSZWdleCA9IC8oPzpefFxccykoX18oPyFcXHMrX18pKCg/OlteX10rKSlfXyg/IVxccytfXykpJC87XHJcbmNvbnN0IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKShfXyg/IVxccytfXykoKD86W15fXSspKV9fKD8hXFxzK19fKSkvZztcclxuY29uc3QgQm9sZCA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdib2xkJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ3N0cm9uZycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2InLFxyXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IG5vZGUgPT4gbm9kZS5zdHlsZS5mb250V2VpZ2h0ICE9PSAnbm9ybWFsJyAmJiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2ZvbnQtd2VpZ2h0JyxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJzOiB2YWx1ZSA9PiAvXihib2xkKGVyKT98WzUtOV1cXGR7Mix9KSQvLnRlc3QodmFsdWUpICYmIG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ3N0cm9uZycsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0Qm9sZDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9nZ2xlQm9sZDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRCb2xkOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCb2xkKCksXHJcbiAgICAgICAgICAgICdNb2QtQic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUJvbGQoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFySW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogdW5kZXJzY29yZUlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHN0YXJQYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlUGFzdGVSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBCb2xkLCBCb2xkIGFzIGRlZmF1bHQsIHN0YXJJbnB1dFJlZ2V4LCBzdGFyUGFzdGVSZWdleCwgdW5kZXJzY29yZUlucHV0UmVnZXgsIHVuZGVyc2NvcmVQYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bubble-menu/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   BubbleMenuPlugin: () => (/* binding */ BubbleMenuPlugin),\n/* harmony export */   BubbleMenuView: () => (/* binding */ BubbleMenuView),\n/* harmony export */   \"default\": () => (/* binding */ BubbleMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\n\nclass BubbleMenuView {\r\n    constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow, }) {\r\n        this.preventHide = false;\r\n        this.shouldShow = ({ view, state, from, to, }) => {\r\n            const { doc, selection } = state;\r\n            const { empty } = selection;\r\n            // Sometime check for `empty` is not enough.\r\n            // Doubleclick an empty paragraph returns a node size of 2.\r\n            // So we check also for an empty text size.\r\n            const isEmptyTextBlock = !doc.textBetween(from, to).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isTextSelection)(state.selection);\r\n            // When clicking on a element inside the bubble menu the editor \"blur\" event\r\n            // is called and the bubble menu item is focussed. In this case we should\r\n            // consider the menu as part of the editor and keep showing the menu\r\n            const isChildOfMenu = this.element.contains(document.activeElement);\r\n            const hasEditorFocus = view.hasFocus() || isChildOfMenu;\r\n            if (!hasEditorFocus || empty || isEmptyTextBlock || !this.editor.isEditable) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        this.mousedownHandler = () => {\r\n            this.preventHide = true;\r\n        };\r\n        this.dragstartHandler = () => {\r\n            this.hide();\r\n        };\r\n        this.focusHandler = () => {\r\n            // we use `setTimeout` to make sure `selection` is already updated\r\n            setTimeout(() => this.update(this.editor.view));\r\n        };\r\n        this.blurHandler = ({ event }) => {\r\n            var _a;\r\n            if (this.preventHide) {\r\n                this.preventHide = false;\r\n                return;\r\n            }\r\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\r\n                return;\r\n            }\r\n            this.hide();\r\n        };\r\n        this.tippyBlurHandler = (event) => {\r\n            this.blurHandler({ event });\r\n        };\r\n        this.handleDebouncedUpdate = (view, oldState) => {\r\n            const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\r\n            const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\r\n            if (!selectionChanged && !docChanged) {\r\n                return;\r\n            }\r\n            if (this.updateDebounceTimer) {\r\n                clearTimeout(this.updateDebounceTimer);\r\n            }\r\n            this.updateDebounceTimer = window.setTimeout(() => {\r\n                this.updateHandler(view, selectionChanged, docChanged, oldState);\r\n            }, this.updateDelay);\r\n        };\r\n        this.updateHandler = (view, selectionChanged, docChanged, oldState) => {\r\n            var _a, _b, _c;\r\n            const { state, composing } = view;\r\n            const { selection } = state;\r\n            const isSame = !selectionChanged && !docChanged;\r\n            if (composing || isSame) {\r\n                return;\r\n            }\r\n            this.createTooltip();\r\n            // support for CellSelections\r\n            const { ranges } = selection;\r\n            const from = Math.min(...ranges.map(range => range.$from.pos));\r\n            const to = Math.max(...ranges.map(range => range.$to.pos));\r\n            const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\r\n                editor: this.editor,\r\n                view,\r\n                state,\r\n                oldState,\r\n                from,\r\n                to,\r\n            });\r\n            if (!shouldShow) {\r\n                this.hide();\r\n                return;\r\n            }\r\n            (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\r\n                getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect)\r\n                    || (() => {\r\n                        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(state.selection)) {\r\n                            let node = view.nodeDOM(from);\r\n                            const nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector('[data-node-view-wrapper]');\r\n                            if (nodeViewWrapper) {\r\n                                node = nodeViewWrapper.firstChild;\r\n                            }\r\n                            if (node) {\r\n                                return node.getBoundingClientRect();\r\n                            }\r\n                        }\r\n                        return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\r\n                    }),\r\n            });\r\n            this.show();\r\n        };\r\n        this.editor = editor;\r\n        this.element = element;\r\n        this.view = view;\r\n        this.updateDelay = updateDelay;\r\n        if (shouldShow) {\r\n            this.shouldShow = shouldShow;\r\n        }\r\n        this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });\r\n        this.view.dom.addEventListener('dragstart', this.dragstartHandler);\r\n        this.editor.on('focus', this.focusHandler);\r\n        this.editor.on('blur', this.blurHandler);\r\n        this.tippyOptions = tippyOptions;\r\n        // Detaches menu content from its current parent\r\n        this.element.remove();\r\n        this.element.style.visibility = 'visible';\r\n    }\r\n    createTooltip() {\r\n        const { element: editorElement } = this.editor.options;\r\n        const editorIsAttached = !!editorElement.parentElement;\r\n        if (this.tippy || !editorIsAttached) {\r\n            return;\r\n        }\r\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, {\r\n            duration: 0,\r\n            getReferenceClientRect: null,\r\n            content: this.element,\r\n            interactive: true,\r\n            trigger: 'manual',\r\n            placement: 'top',\r\n            hideOnClick: 'toggle',\r\n            ...this.tippyOptions,\r\n        });\r\n        // maybe we have to hide tippy on its own blur event as well\r\n        if (this.tippy.popper.firstChild) {\r\n            this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\r\n        }\r\n    }\r\n    update(view, oldState) {\r\n        const { state } = view;\r\n        const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;\r\n        if (this.updateDelay > 0 && hasValidSelection) {\r\n            this.handleDebouncedUpdate(view, oldState);\r\n            return;\r\n        }\r\n        const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\r\n        const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\r\n        this.updateHandler(view, selectionChanged, docChanged, oldState);\r\n    }\r\n    show() {\r\n        var _a;\r\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\r\n    }\r\n    hide() {\r\n        var _a;\r\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\r\n            this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\r\n        }\r\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\r\n        this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });\r\n        this.view.dom.removeEventListener('dragstart', this.dragstartHandler);\r\n        this.editor.off('focus', this.focusHandler);\r\n        this.editor.off('blur', this.blurHandler);\r\n    }\r\n}\r\nconst BubbleMenuPlugin = (options) => {\r\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n        key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\r\n        view: view => new BubbleMenuView({ view, ...options }),\r\n    });\r\n};\n\nconst BubbleMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\r\n    name: 'bubbleMenu',\r\n    addOptions() {\r\n        return {\r\n            element: null,\r\n            tippyOptions: {},\r\n            pluginKey: 'bubbleMenu',\r\n            updateDelay: undefined,\r\n            shouldShow: null,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        if (!this.options.element) {\r\n            return [];\r\n        }\r\n        return [\r\n            BubbleMenuPlugin({\r\n                pluginKey: this.options.pluginKey,\r\n                editor: this.editor,\r\n                element: this.options.element,\r\n                tippyOptions: this.options.tippyOptions,\r\n                updateDelay: this.options.updateDelay,\r\n                shouldShow: this.options.shouldShow,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bullet-list/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BulletList: () => (/* binding */ BulletList),\n/* harmony export */   \"default\": () => (/* binding */ BulletList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'listItem',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            bulletListTypeName: 'bulletList',\r\n            orderedListTypeName: 'orderedList',\r\n        };\r\n    },\r\n    content: 'paragraph block*',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'li',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Enter: () => this.editor.commands.splitListItem(this.name),\r\n            Tab: () => this.editor.commands.sinkListItem(this.name),\r\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\r\n        };\r\n    },\r\n});\n\nconst TextStyle = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'textStyle',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'span',\r\n                getAttrs: element => {\r\n                    const hasStyles = element.hasAttribute('style');\r\n                    if (!hasStyles) {\r\n                        return false;\r\n                    }\r\n                    return {};\r\n                },\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['span', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            removeEmptyTextStyle: () => ({ state, commands }) => {\r\n                const attributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getMarkAttributes)(state, this.type);\r\n                const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\r\n                if (hasStyles) {\r\n                    return true;\r\n                }\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n});\n\nconst inputRegex = /^\\s*([-+*])\\s$/;\r\nconst BulletList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'bulletList',\r\n    addOptions() {\r\n        return {\r\n            itemTypeName: 'listItem',\r\n            HTMLAttributes: {},\r\n            keepMarks: false,\r\n            keepAttributes: false,\r\n        };\r\n    },\r\n    group: 'block list',\r\n    content() {\r\n        return `${this.options.itemTypeName}+`;\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'ul' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['ul', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleBulletList: () => ({ commands, chain }) => {\r\n                if (this.options.keepAttributes) {\r\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\r\n                }\r\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        let inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\r\n            find: inputRegex,\r\n            type: this.type,\r\n        });\r\n        if (this.options.keepMarks || this.options.keepAttributes) {\r\n            inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                keepMarks: this.options.keepMarks,\r\n                keepAttributes: this.options.keepAttributes,\r\n                getAttributes: () => { return this.editor.getAttributes(TextStyle.name); },\r\n                editor: this.editor,\r\n            });\r\n        }\r\n        return [\r\n            inputRule,\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYnVsbGV0LWxpc3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlHOztBQUVqRyxpQkFBaUIsOENBQUk7QUFDckI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUVELGtCQUFrQiw4Q0FBSTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixnQkFBZ0I7QUFDakMsd0JBQXdCLDZEQUFlO0FBQ3ZDLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkNBQTJDLGlCQUFpQjtBQUM1RCxtQ0FBbUMsK0RBQWlCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBLG1CQUFtQiw4Q0FBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUMsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQSx1Q0FBdUMsaUJBQWlCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0JBQXdCLCtEQUFpQjtBQUN6QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLCtEQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxtREFBbUQ7QUFDMUY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFd0Q7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWJ1bGxldC1saXN0L2Rpc3QvaW5kZXguanM/ZDQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIE1hcmssIGdldE1hcmtBdHRyaWJ1dGVzLCB3cmFwcGluZ0lucHV0UnVsZSB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IExpc3RJdGVtID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2xpc3RJdGVtJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgICAgICBidWxsZXRMaXN0VHlwZU5hbWU6ICdidWxsZXRMaXN0JyxcclxuICAgICAgICAgICAgb3JkZXJlZExpc3RUeXBlTmFtZTogJ29yZGVyZWRMaXN0JyxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6ICdwYXJhZ3JhcGggYmxvY2sqJyxcclxuICAgIGRlZmluaW5nOiB0cnVlLFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2xpJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsnbGknLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEVudGVyOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zcGxpdExpc3RJdGVtKHRoaXMubmFtZSksXHJcbiAgICAgICAgICAgIFRhYjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2lua0xpc3RJdGVtKHRoaXMubmFtZSksXHJcbiAgICAgICAgICAgICdTaGlmdC1UYWInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5saWZ0TGlzdEl0ZW0odGhpcy5uYW1lKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmNvbnN0IFRleHRTdHlsZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICd0ZXh0U3R5bGUnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnc3BhbicsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzU3R5bGVzID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNTdHlsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydzcGFuJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZW1vdmVFbXB0eVRleHRTdHlsZTogKCkgPT4gKHsgc3RhdGUsIGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZXRNYXJrQXR0cmlidXRlcyhzdGF0ZSwgdGhpcy50eXBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1N0eWxlcyA9IE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpLnNvbWUoKFssIHZhbHVlXSkgPT4gISF2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5jb25zdCBpbnB1dFJlZ2V4ID0gL15cXHMqKFstKypdKVxccyQvO1xyXG5jb25zdCBCdWxsZXRMaXN0ID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2J1bGxldExpc3QnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpdGVtVHlwZU5hbWU6ICdsaXN0SXRlbScsXHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICAgICAga2VlcE1hcmtzOiBmYWxzZSxcclxuICAgICAgICAgICAga2VlcEF0dHJpYnV0ZXM6IGZhbHNlLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ3JvdXA6ICdibG9jayBsaXN0JyxcclxuICAgIGNvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMub3B0aW9ucy5pdGVtVHlwZU5hbWV9K2A7XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHsgdGFnOiAndWwnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ3VsJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2dnbGVCdWxsZXRMaXN0OiAoKSA9PiAoeyBjb21tYW5kcywgY2hhaW4gfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbigpLnRvZ2dsZUxpc3QodGhpcy5uYW1lLCB0aGlzLm9wdGlvbnMuaXRlbVR5cGVOYW1lLCB0aGlzLm9wdGlvbnMua2VlcE1hcmtzKS51cGRhdGVBdHRyaWJ1dGVzKExpc3RJdGVtLm5hbWUsIHRoaXMuZWRpdG9yLmdldEF0dHJpYnV0ZXMoVGV4dFN0eWxlLm5hbWUpKS5ydW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVMaXN0KHRoaXMubmFtZSwgdGhpcy5vcHRpb25zLml0ZW1UeXBlTmFtZSwgdGhpcy5vcHRpb25zLmtlZXBNYXJrcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLVNoaWZ0LTgnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCdWxsZXRMaXN0KCksXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIGxldCBpbnB1dFJ1bGUgPSB3cmFwcGluZ0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmtlZXBNYXJrcyB8fCB0aGlzLm9wdGlvbnMua2VlcEF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgaW5wdXRSdWxlID0gd3JhcHBpbmdJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogaW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgICAgIGtlZXBNYXJrczogdGhpcy5vcHRpb25zLmtlZXBNYXJrcyxcclxuICAgICAgICAgICAgICAgIGtlZXBBdHRyaWJ1dGVzOiB0aGlzLm9wdGlvbnMua2VlcEF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGVzOiAoKSA9PiB7IHJldHVybiB0aGlzLmVkaXRvci5nZXRBdHRyaWJ1dGVzKFRleHRTdHlsZS5uYW1lKTsgfSxcclxuICAgICAgICAgICAgICAgIGVkaXRvcjogdGhpcy5lZGl0b3IsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBpbnB1dFJ1bGUsXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBCdWxsZXRMaXN0LCBCdWxsZXRMaXN0IGFzIGRlZmF1bHQsIGlucHV0UmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-code-block/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeBlock: () => (/* binding */ CodeBlock),\n/* harmony export */   backtickInputRegex: () => (/* binding */ backtickInputRegex),\n/* harmony export */   \"default\": () => (/* binding */ CodeBlock),\n/* harmony export */   tildeInputRegex: () => (/* binding */ tildeInputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\nconst backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\r\nconst tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\r\nconst CodeBlock = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\r\n    name: 'codeBlock',\r\n    addOptions() {\r\n        return {\r\n            languageClassPrefix: 'language-',\r\n            exitOnTripleEnter: true,\r\n            exitOnArrowDown: true,\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'text*',\r\n    marks: '',\r\n    group: 'block',\r\n    code: true,\r\n    defining: true,\r\n    addAttributes() {\r\n        return {\r\n            language: {\r\n                default: null,\r\n                parseHTML: element => {\r\n                    var _a;\r\n                    const { languageClassPrefix } = this.options;\r\n                    const classNames = [...(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || [])];\r\n                    const languages = classNames\r\n                        .filter(className => className.startsWith(languageClassPrefix))\r\n                        .map(className => className.replace(languageClassPrefix, ''));\r\n                    const language = languages[0];\r\n                    if (!language) {\r\n                        return null;\r\n                    }\r\n                    return language;\r\n                },\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'pre',\r\n                preserveWhitespace: 'full',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ node, HTMLAttributes }) {\r\n        return [\r\n            'pre',\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\r\n            [\r\n                'code',\r\n                {\r\n                    class: node.attrs.language\r\n                        ? this.options.languageClassPrefix + node.attrs.language\r\n                        : null,\r\n                },\r\n                0,\r\n            ],\r\n        ];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setCodeBlock: attributes => ({ commands }) => {\r\n                return commands.setNode(this.name, attributes);\r\n            },\r\n            toggleCodeBlock: attributes => ({ commands }) => {\r\n                return commands.toggleNode(this.name, 'paragraph', attributes);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\r\n            // remove code block when at start of document or code block is empty\r\n            Backspace: () => {\r\n                const { empty, $anchor } = this.editor.state.selection;\r\n                const isAtStart = $anchor.pos === 1;\r\n                if (!empty || $anchor.parent.type.name !== this.name) {\r\n                    return false;\r\n                }\r\n                if (isAtStart || !$anchor.parent.textContent.length) {\r\n                    return this.editor.commands.clearNodes();\r\n                }\r\n                return false;\r\n            },\r\n            // exit node on triple enter\r\n            Enter: ({ editor }) => {\r\n                if (!this.options.exitOnTripleEnter) {\r\n                    return false;\r\n                }\r\n                const { state } = editor;\r\n                const { selection } = state;\r\n                const { $from, empty } = selection;\r\n                if (!empty || $from.parent.type !== this.type) {\r\n                    return false;\r\n                }\r\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\r\n                const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\r\n                if (!isAtEnd || !endsWithDoubleNewline) {\r\n                    return false;\r\n                }\r\n                return editor\r\n                    .chain()\r\n                    .command(({ tr }) => {\r\n                    tr.delete($from.pos - 2, $from.pos);\r\n                    return true;\r\n                })\r\n                    .exitCode()\r\n                    .run();\r\n            },\r\n            // exit node on arrow down\r\n            ArrowDown: ({ editor }) => {\r\n                if (!this.options.exitOnArrowDown) {\r\n                    return false;\r\n                }\r\n                const { state } = editor;\r\n                const { selection, doc } = state;\r\n                const { $from, empty } = selection;\r\n                if (!empty || $from.parent.type !== this.type) {\r\n                    return false;\r\n                }\r\n                const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\r\n                if (!isAtEnd) {\r\n                    return false;\r\n                }\r\n                const after = $from.after();\r\n                if (after === undefined) {\r\n                    return false;\r\n                }\r\n                const nodeAfter = doc.nodeAt(after);\r\n                if (nodeAfter) {\r\n                    return false;\r\n                }\r\n                return editor.commands.exitCode();\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\r\n                find: backtickInputRegex,\r\n                type: this.type,\r\n                getAttributes: match => ({\r\n                    language: match[1],\r\n                }),\r\n            }),\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.textblockTypeInputRule)({\r\n                find: tildeInputRegex,\r\n                type: this.type,\r\n                getAttributes: match => ({\r\n                    language: match[1],\r\n                }),\r\n            }),\r\n        ];\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            // this plugin creates a code block for pasted content from VS Code\r\n            // we can also detect the copied code language\r\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey('codeBlockVSCodeHandler'),\r\n                props: {\r\n                    handlePaste: (view, event) => {\r\n                        if (!event.clipboardData) {\r\n                            return false;\r\n                        }\r\n                        // don’t create a new code block within code blocks\r\n                        if (this.editor.isActive(this.type.name)) {\r\n                            return false;\r\n                        }\r\n                        const text = event.clipboardData.getData('text/plain');\r\n                        const vscode = event.clipboardData.getData('vscode-editor-data');\r\n                        const vscodeData = vscode ? JSON.parse(vscode) : undefined;\r\n                        const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\r\n                        if (!text || !language) {\r\n                            return false;\r\n                        }\r\n                        const { tr } = view.state;\r\n                        // create an empty code block´\r\n                        // if the cursor is at the absolute end of the document, insert the code block before the cursor instead\r\n                        // of replacing the selection as the replaceSelectionWith function will cause the insertion to\r\n                        // happen at the previous node\r\n                        if (view.state.selection.from === view.state.doc.nodeSize - (1 + (view.state.selection.$to.depth * 2))) {\r\n                            tr.insert(view.state.selection.from - 1, this.type.create({ language }));\r\n                        }\r\n                        else {\r\n                            tr.replaceSelectionWith(this.type.create({ language }));\r\n                        }\r\n                        // put cursor inside the newly created code block\r\n                        tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\r\n                        // add text to code block\r\n                        // strip carriage return chars from text pasted as code\r\n                        // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\r\n                        tr.insertText(text.replace(/\\r\\n?/g, '\\n'));\r\n                        // store meta information\r\n                        // this is useful for other plugins that depends on the paste event\r\n                        // like the paste rule plugin\r\n                        tr.setMeta('paste', true);\r\n                        view.dispatch(tr);\r\n                        return true;\r\n                    },\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   \"default\": () => (/* binding */ Code),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst inputRegex = /(?:^|\\s)(`(?!\\s+`)((?:[^`]+))`(?!\\s+`))$/;\r\nconst pasteRegex = /(?:^|\\s)(`(?!\\s+`)((?:[^`]+))`(?!\\s+`))/g;\r\nconst Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'code',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    excludes: '_',\r\n    code: true,\r\n    exitable: true,\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'code' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['code', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setCode: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleCode: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetCode: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-e': () => this.editor.commands.toggleCode(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: pasteRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1GOztBQUVuRjtBQUNBO0FBQ0EsYUFBYSw4Q0FBSTtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsZ0JBQWdCO0FBQ2pDLHdCQUF3Qiw2REFBZTtBQUN2QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLDhCQUE4QixVQUFVO0FBQ3hDO0FBQ0EsYUFBYTtBQUNiLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0EsYUFBYTtBQUNiLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUV3RDtBQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzPzM2MTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykoYCg/IVxccytgKSgoPzpbXmBdKykpYCg/IVxccytgKSkkLztcclxuY29uc3QgcGFzdGVSZWdleCA9IC8oPzpefFxccykoYCg/IVxccytgKSgoPzpbXmBdKykpYCg/IVxccytgKSkvZztcclxuY29uc3QgQ29kZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjb2RlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZXhjbHVkZXM6ICdfJyxcclxuICAgIGNvZGU6IHRydWUsXHJcbiAgICBleGl0YWJsZTogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ2NvZGUnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2NvZGUnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldENvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUNvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc2V0Q29kZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1lJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQ29kZSgpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IGlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHBhc3RlUmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgQ29kZSwgQ29kZSBhcyBkZWZhdWx0LCBpbnB1dFJlZ2V4LCBwYXN0ZVJlZ2V4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-document/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tiptap/extension-document/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   \"default\": () => (/* binding */ Document)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst Document = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'doc',\r\n    topNode: true,\r\n    content: 'block+',\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7O0FBRXBDLGlCQUFpQiw4Q0FBSTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUV3QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQvZGlzdC9pbmRleC5qcz8wYzZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBEb2N1bWVudCA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdkb2MnLFxyXG4gICAgdG9wTm9kZTogdHJ1ZSxcclxuICAgIGNvbnRlbnQ6ICdibG9jaysnLFxyXG59KTtcblxuZXhwb3J0IHsgRG9jdW1lbnQsIERvY3VtZW50IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-dropcursor/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropcursor: () => (/* binding */ Dropcursor),\n/* harmony export */   \"default\": () => (/* binding */ Dropcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/dropcursor */ \"(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\");\n\n\n\nconst Dropcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\r\n    name: 'dropCursor',\r\n    addOptions() {\r\n        return {\r\n            color: 'currentColor',\r\n            width: 1,\r\n            class: undefined,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            (0,_tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)(this.options),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDVTs7QUFFbkQsbUJBQW1CLG1EQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLGlFQUFVO0FBQ3RCO0FBQ0EsS0FBSztBQUNMLENBQUM7O0FBRTRDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanM/MjVjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZHJvcEN1cnNvciB9IGZyb20gJ0B0aXB0YXAvcG0vZHJvcGN1cnNvcic7XG5cbmNvbnN0IERyb3BjdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdkcm9wQ3Vyc29yJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxyXG4gICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgY2xhc3M6IHVuZGVmaW5lZCxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBkcm9wQ3Vyc29yKHRoaXMub3B0aW9ucyksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBEcm9wY3Vyc29yLCBEcm9wY3Vyc29yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-floating-menu/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   FloatingMenuPlugin: () => (/* binding */ FloatingMenuPlugin),\n/* harmony export */   FloatingMenuView: () => (/* binding */ FloatingMenuView),\n/* harmony export */   \"default\": () => (/* binding */ FloatingMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\n\nclass FloatingMenuView {\r\n    constructor({ editor, element, view, tippyOptions = {}, shouldShow, }) {\r\n        this.preventHide = false;\r\n        this.shouldShow = ({ view, state }) => {\r\n            const { selection } = state;\r\n            const { $anchor, empty } = selection;\r\n            const isRootDepth = $anchor.depth === 1;\r\n            const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\r\n            if (!view.hasFocus()\r\n                || !empty\r\n                || !isRootDepth\r\n                || !isEmptyTextBlock\r\n                || !this.editor.isEditable) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        this.mousedownHandler = () => {\r\n            this.preventHide = true;\r\n        };\r\n        this.focusHandler = () => {\r\n            // we use `setTimeout` to make sure `selection` is already updated\r\n            setTimeout(() => this.update(this.editor.view));\r\n        };\r\n        this.blurHandler = ({ event }) => {\r\n            var _a;\r\n            if (this.preventHide) {\r\n                this.preventHide = false;\r\n                return;\r\n            }\r\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\r\n                return;\r\n            }\r\n            this.hide();\r\n        };\r\n        this.tippyBlurHandler = (event) => {\r\n            this.blurHandler({ event });\r\n        };\r\n        this.editor = editor;\r\n        this.element = element;\r\n        this.view = view;\r\n        if (shouldShow) {\r\n            this.shouldShow = shouldShow;\r\n        }\r\n        this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });\r\n        this.editor.on('focus', this.focusHandler);\r\n        this.editor.on('blur', this.blurHandler);\r\n        this.tippyOptions = tippyOptions;\r\n        // Detaches menu content from its current parent\r\n        this.element.remove();\r\n        this.element.style.visibility = 'visible';\r\n    }\r\n    createTooltip() {\r\n        const { element: editorElement } = this.editor.options;\r\n        const editorIsAttached = !!editorElement.parentElement;\r\n        if (this.tippy || !editorIsAttached) {\r\n            return;\r\n        }\r\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(editorElement, {\r\n            duration: 0,\r\n            getReferenceClientRect: null,\r\n            content: this.element,\r\n            interactive: true,\r\n            trigger: 'manual',\r\n            placement: 'right',\r\n            hideOnClick: 'toggle',\r\n            ...this.tippyOptions,\r\n        });\r\n        // maybe we have to hide tippy on its own blur event as well\r\n        if (this.tippy.popper.firstChild) {\r\n            this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);\r\n        }\r\n    }\r\n    update(view, oldState) {\r\n        var _a, _b, _c;\r\n        const { state } = view;\r\n        const { doc, selection } = state;\r\n        const { from, to } = selection;\r\n        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\r\n        if (isSame) {\r\n            return;\r\n        }\r\n        this.createTooltip();\r\n        const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\r\n            editor: this.editor,\r\n            view,\r\n            state,\r\n            oldState,\r\n        });\r\n        if (!shouldShow) {\r\n            this.hide();\r\n            return;\r\n        }\r\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\r\n            getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect)(view, from, to)),\r\n        });\r\n        this.show();\r\n    }\r\n    show() {\r\n        var _a;\r\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\r\n    }\r\n    hide() {\r\n        var _a;\r\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\r\n            this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);\r\n        }\r\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\r\n        this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });\r\n        this.editor.off('focus', this.focusHandler);\r\n        this.editor.off('blur', this.blurHandler);\r\n    }\r\n}\r\nconst FloatingMenuPlugin = (options) => {\r\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\r\n        key: typeof options.pluginKey === 'string' ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\r\n        view: view => new FloatingMenuView({ view, ...options }),\r\n    });\r\n};\n\nconst FloatingMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension.create({\r\n    name: 'floatingMenu',\r\n    addOptions() {\r\n        return {\r\n            element: null,\r\n            tippyOptions: {},\r\n            pluginKey: 'floatingMenu',\r\n            shouldShow: null,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        if (!this.options.element) {\r\n            return [];\r\n        }\r\n        return [\r\n            FloatingMenuPlugin({\r\n                pluginKey: this.options.pluginKey,\r\n                editor: this.editor,\r\n                element: this.options.element,\r\n                tippyOptions: this.options.tippyOptions,\r\n                shouldShow: this.options.shouldShow,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gapcursor: () => (/* binding */ Gapcursor),\n/* harmony export */   \"default\": () => (/* binding */ Gapcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/gapcursor */ \"(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\");\n\n\n\nconst Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\r\n    name: 'gapCursor',\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            (0,_tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)(),\r\n        ];\r\n    },\r\n    extendNodeSchema(extension) {\r\n        var _a;\r\n        const context = {\r\n            name: extension.name,\r\n            options: extension.options,\r\n            storage: extension.storage,\r\n        };\r\n        return {\r\n            allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getExtensionField)(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null,\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRTtBQUN6Qjs7QUFFakQsa0JBQWtCLG1EQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQVM7QUFDckI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwREFBWSxDQUFDLCtEQUFpQjtBQUNoRTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUUwQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanM/NWZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24sIGNhbGxPclJldHVybiwgZ2V0RXh0ZW5zaW9uRmllbGQgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZ2FwQ3Vyc29yIH0gZnJvbSAnQHRpcHRhcC9wbS9nYXBjdXJzb3InO1xuXG5jb25zdCBHYXBjdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdnYXBDdXJzb3InLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGdhcEN1cnNvcigpLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kTm9kZVNjaGVtYShleHRlbnNpb24pIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFsbG93R2FwQ3Vyc29yOiAoX2EgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWxsb3dHYXBDdXJzb3InLCBjb250ZXh0KSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGwsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBHYXBjdXJzb3IsIEdhcGN1cnNvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-hard-break/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HardBreak: () => (/* binding */ HardBreak),\n/* harmony export */   \"default\": () => (/* binding */ HardBreak)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst HardBreak = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'hardBreak',\r\n    addOptions() {\r\n        return {\r\n            keepMarks: true,\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    inline: true,\r\n    group: 'inline',\r\n    selectable: false,\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'br' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['br', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\r\n    },\r\n    renderText() {\r\n        return '\\n';\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setHardBreak: () => ({ commands, chain, state, editor, }) => {\r\n                return commands.first([\r\n                    () => commands.exitCode(),\r\n                    () => commands.command(() => {\r\n                        const { selection, storedMarks } = state;\r\n                        if (selection.$from.parent.type.spec.isolating) {\r\n                            return false;\r\n                        }\r\n                        const { keepMarks } = this.options;\r\n                        const { splittableMarks } = editor.extensionManager;\r\n                        const marks = storedMarks\r\n                            || (selection.$to.parentOffset && selection.$from.marks());\r\n                        return chain()\r\n                            .insertContent({ type: this.name })\r\n                            .command(({ tr, dispatch }) => {\r\n                            if (dispatch && marks && keepMarks) {\r\n                                const filteredMarks = marks\r\n                                    .filter(mark => splittableMarks.includes(mark.type.name));\r\n                                tr.ensureMarks(filteredMarks);\r\n                            }\r\n                            return true;\r\n                        })\r\n                            .run();\r\n                    }),\r\n                ]);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Enter': () => this.editor.commands.setHardBreak(),\r\n            'Shift-Enter': () => this.editor.commands.setHardBreak(),\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDs7QUFFckQsa0JBQWtCLDhDQUFJO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1DQUFtQyxpQ0FBaUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QyxnQ0FBZ0Msa0JBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxpQkFBaUI7QUFDOUQsd0NBQXdDLGNBQWM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFMEM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWhhcmQtYnJlYWsvZGlzdC9pbmRleC5qcz9lNzhmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IEhhcmRCcmVhayA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdoYXJkQnJlYWsnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBrZWVwTWFya3M6IHRydWUsXHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGlubGluZTogdHJ1ZSxcclxuICAgIGdyb3VwOiAnaW5saW5lJyxcclxuICAgIHNlbGVjdGFibGU6IGZhbHNlLFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHsgdGFnOiAnYnInIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2JyJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJUZXh0KCkge1xyXG4gICAgICAgIHJldHVybiAnXFxuJztcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRIYXJkQnJlYWs6ICgpID0+ICh7IGNvbW1hbmRzLCBjaGFpbiwgc3RhdGUsIGVkaXRvciwgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmZpcnN0KFtcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBjb21tYW5kcy5leGl0Q29kZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmNvbW1hbmQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNlbGVjdGlvbiwgc3RvcmVkTWFya3MgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLiRmcm9tLnBhcmVudC50eXBlLnNwZWMuaXNvbGF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBrZWVwTWFya3MgfSA9IHRoaXMub3B0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzcGxpdHRhYmxlTWFya3MgfSA9IGVkaXRvci5leHRlbnNpb25NYW5hZ2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrcyA9IHN0b3JlZE1hcmtzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAoc2VsZWN0aW9uLiR0by5wYXJlbnRPZmZzZXQgJiYgc2VsZWN0aW9uLiRmcm9tLm1hcmtzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW4oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydENvbnRlbnQoeyB0eXBlOiB0aGlzLm5hbWUgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb21tYW5kKCh7IHRyLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGF0Y2ggJiYgbWFya3MgJiYga2VlcE1hcmtzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRNYXJrcyA9IG1hcmtzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIobWFyayA9PiBzcGxpdHRhYmxlTWFya3MuaW5jbHVkZXMobWFyay50eXBlLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5lbnN1cmVNYXJrcyhmaWx0ZXJlZE1hcmtzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJ1bigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLUVudGVyJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2V0SGFyZEJyZWFrKCksXHJcbiAgICAgICAgICAgICdTaGlmdC1FbnRlcic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNldEhhcmRCcmVhaygpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgSGFyZEJyZWFrLCBIYXJkQnJlYWsgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-heading/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Heading: () => (/* binding */ Heading),\n/* harmony export */   \"default\": () => (/* binding */ Heading)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst Heading = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'heading',\r\n    addOptions() {\r\n        return {\r\n            levels: [1, 2, 3, 4, 5, 6],\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    content: 'inline*',\r\n    group: 'block',\r\n    defining: true,\r\n    addAttributes() {\r\n        return {\r\n            level: {\r\n                default: 1,\r\n                rendered: false,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return this.options.levels\r\n            .map((level) => ({\r\n            tag: `h${level}`,\r\n            attrs: { level },\r\n        }));\r\n    },\r\n    renderHTML({ node, HTMLAttributes }) {\r\n        const hasLevel = this.options.levels.includes(node.attrs.level);\r\n        const level = hasLevel\r\n            ? node.attrs.level\r\n            : this.options.levels[0];\r\n        return [`h${level}`, (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setHeading: attributes => ({ commands }) => {\r\n                if (!this.options.levels.includes(attributes.level)) {\r\n                    return false;\r\n                }\r\n                return commands.setNode(this.name, attributes);\r\n            },\r\n            toggleHeading: attributes => ({ commands }) => {\r\n                if (!this.options.levels.includes(attributes.level)) {\r\n                    return false;\r\n                }\r\n                return commands.toggleNode(this.name, 'paragraph', attributes);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return this.options.levels.reduce((items, level) => ({\r\n            ...items,\r\n            ...{\r\n                [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\r\n            },\r\n        }), {});\r\n    },\r\n    addInputRules() {\r\n        return this.options.levels.map(level => {\r\n            return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.textblockTypeInputRule)({\r\n                find: new RegExp(`^(#{1,${level}})\\\\s$`),\r\n                type: this.type,\r\n                getAttributes: {\r\n                    level,\r\n                },\r\n            });\r\n        });\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGVhZGluZy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RTs7QUFFN0UsZ0JBQWdCLDhDQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0IscUJBQXFCLE9BQU87QUFDNUIsU0FBUztBQUNULEtBQUs7QUFDTCxpQkFBaUIsc0JBQXNCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU0sR0FBRyw2REFBZTtBQUM1QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLHlDQUF5QyxVQUFVO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDRDQUE0QyxVQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLE1BQU0sK0NBQStDLE9BQU87QUFDeEYsYUFBYTtBQUNiLFNBQVMsS0FBSztBQUNkLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CLG9FQUFzQjtBQUN6QyxzQ0FBc0MsSUFBSSxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDOztBQUVzQztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGVhZGluZy9kaXN0L2luZGV4LmpzP2NlYmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzLCB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgSGVhZGluZyA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdoZWFkaW5nJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGV2ZWxzOiBbMSwgMiwgMywgNCwgNSwgNl0sXHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgIGdyb3VwOiAnYmxvY2snLFxyXG4gICAgZGVmaW5pbmc6IHRydWUsXHJcbiAgICBhZGRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxldmVsOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAxLFxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGV2ZWxzXHJcbiAgICAgICAgICAgIC5tYXAoKGxldmVsKSA9PiAoe1xyXG4gICAgICAgICAgICB0YWc6IGBoJHtsZXZlbH1gLFxyXG4gICAgICAgICAgICBhdHRyczogeyBsZXZlbCB9LFxyXG4gICAgICAgIH0pKTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgbm9kZSwgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIGNvbnN0IGhhc0xldmVsID0gdGhpcy5vcHRpb25zLmxldmVscy5pbmNsdWRlcyhub2RlLmF0dHJzLmxldmVsKTtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IGhhc0xldmVsXHJcbiAgICAgICAgICAgID8gbm9kZS5hdHRycy5sZXZlbFxyXG4gICAgICAgICAgICA6IHRoaXMub3B0aW9ucy5sZXZlbHNbMF07XHJcbiAgICAgICAgcmV0dXJuIFtgaCR7bGV2ZWx9YCwgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRIZWFkaW5nOiBhdHRyaWJ1dGVzID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmxldmVscy5pbmNsdWRlcyhhdHRyaWJ1dGVzLmxldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXROb2RlKHRoaXMubmFtZSwgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUhlYWRpbmc6IGF0dHJpYnV0ZXMgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubGV2ZWxzLmluY2x1ZGVzKGF0dHJpYnV0ZXMubGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU5vZGUodGhpcy5uYW1lLCAncGFyYWdyYXBoJywgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxldmVscy5yZWR1Y2UoKGl0ZW1zLCBsZXZlbCkgPT4gKHtcclxuICAgICAgICAgICAgLi4uaXRlbXMsXHJcbiAgICAgICAgICAgIC4uLntcclxuICAgICAgICAgICAgICAgIFtgTW9kLUFsdC0ke2xldmVsfWBdOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVIZWFkaW5nKHsgbGV2ZWwgfSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSksIHt9KTtcclxuICAgIH0sXHJcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGV2ZWxzLm1hcChsZXZlbCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IG5ldyBSZWdFeHAoYF4oI3sxLCR7bGV2ZWx9fSlcXFxccyRgKSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhlYWRpbmcsIEhlYWRpbmcgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-history/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/history */ \"(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\");\n\n\n\nconst History = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\r\n    name: 'history',\r\n    addOptions() {\r\n        return {\r\n            depth: 100,\r\n            newGroupDelay: 500,\r\n        };\r\n    },\r\n    addCommands() {\r\n        return {\r\n            undo: () => ({ state, dispatch }) => {\r\n                return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.undo)(state, dispatch);\r\n            },\r\n            redo: () => ({ state, dispatch }) => {\r\n                return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.redo)(state, dispatch);\r\n            },\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.history)(this.options),\r\n        ];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-z': () => this.editor.commands.undo(),\r\n            'Shift-Mod-z': () => this.editor.commands.redo(),\r\n            'Mod-y': () => this.editor.commands.redo(),\r\n            // Russian keyboard layouts\r\n            'Mod-я': () => this.editor.commands.undo(),\r\n            'Shift-Mod-я': () => this.editor.commands.redo(),\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDZ0I7O0FBRXpELGdCQUFnQixtREFBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJCQUEyQixpQkFBaUI7QUFDNUMsdUJBQXVCLHdEQUFJO0FBQzNCLGFBQWE7QUFDYiwyQkFBMkIsaUJBQWlCO0FBQzVDLHVCQUF1Qix3REFBSTtBQUMzQixhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQU87QUFDbkI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7O0FBRXNDO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1oaXN0b3J5L2Rpc3QvaW5kZXguanM/MTY4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgdW5kbywgcmVkbywgaGlzdG9yeSB9IGZyb20gJ0B0aXB0YXAvcG0vaGlzdG9yeSc7XG5cbmNvbnN0IEhpc3RvcnkgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdoaXN0b3J5JyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGVwdGg6IDEwMCxcclxuICAgICAgICAgICAgbmV3R3JvdXBEZWxheTogNTAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdW5kbzogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRvKHN0YXRlLCBkaXNwYXRjaCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZG86ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVkbyhzdGF0ZSwgZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGhpc3RvcnkodGhpcy5vcHRpb25zKSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2Qteic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcclxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC16JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxyXG4gICAgICAgICAgICAnTW9kLXknOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5yZWRvKCksXHJcbiAgICAgICAgICAgIC8vIFJ1c3NpYW4ga2V5Ym9hcmQgbGF5b3V0c1xyXG4gICAgICAgICAgICAnTW9kLdGPJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudW5kbygpLFxyXG4gICAgICAgICAgICAnU2hpZnQtTW9kLdGPJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgSGlzdG9yeSwgSGlzdG9yeSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-horizontal-rule/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HorizontalRule: () => (/* binding */ HorizontalRule),\n/* harmony export */   \"default\": () => (/* binding */ HorizontalRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\nconst HorizontalRule = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Node.create({\r\n    name: 'horizontalRule',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    group: 'block',\r\n    parseHTML() {\r\n        return [{ tag: 'hr' }];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['hr', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setHorizontalRule: () => ({ chain, state }) => {\r\n                const { $to: $originTo } = state.selection;\r\n                const currentChain = chain();\r\n                if ($originTo.parentOffset === 0) {\r\n                    currentChain.insertContentAt(Math.max($originTo.pos - 2, 0), { type: this.name });\r\n                }\r\n                else {\r\n                    currentChain.insertContent({ type: this.name });\r\n                }\r\n                return (currentChain\r\n                    // set cursor after horizontal rule\r\n                    .command(({ tr, dispatch }) => {\r\n                    var _a;\r\n                    if (dispatch) {\r\n                        const { $to } = tr.selection;\r\n                        const posAfter = $to.end();\r\n                        if ($to.nodeAfter) {\r\n                            if ($to.nodeAfter.isTextblock) {\r\n                                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos + 1));\r\n                            }\r\n                            else if ($to.nodeAfter.isBlock) {\r\n                                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(tr.doc, $to.pos));\r\n                            }\r\n                            else {\r\n                                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, $to.pos));\r\n                            }\r\n                        }\r\n                        else {\r\n                            // add node after horizontal rule if it’s the end of the document\r\n                            const node = (_a = $to.parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\r\n                            if (node) {\r\n                                tr.insert(posAfter, node);\r\n                                tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(tr.doc, posAfter + 1));\r\n                            }\r\n                        }\r\n                        tr.scrollIntoView();\r\n                    }\r\n                    return true;\r\n                })\r\n                    .run());\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.nodeInputRule)({\r\n                find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taG9yaXpvbnRhbC1ydWxlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRTtBQUNKOztBQUVoRSx1QkFBdUIsOENBQUk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QixLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RCx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQSxtRkFBbUYsaUJBQWlCO0FBQ3BHO0FBQ0E7QUFDQSxpREFBaUQsaUJBQWlCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxjQUFjO0FBQzlDO0FBQ0E7QUFDQSxnQ0FBZ0MsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkRBQWE7QUFDN0Q7QUFDQTtBQUNBLGdEQUFnRCwyREFBYTtBQUM3RDtBQUNBO0FBQ0EsZ0RBQWdELDJEQUFhO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDJEQUFhO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUVvRDtBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taG9yaXpvbnRhbC1ydWxlL2Rpc3QvaW5kZXguanM/MzU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIG5vZGVJbnB1dFJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgVGV4dFNlbGVjdGlvbiwgTm9kZVNlbGVjdGlvbiB9IGZyb20gJ0B0aXB0YXAvcG0vc3RhdGUnO1xuXG5jb25zdCBIb3Jpem9udGFsUnVsZSA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdob3Jpem9udGFsUnVsZScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGdyb3VwOiAnYmxvY2snLFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbeyB0YWc6ICdocicgfV07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydocicsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKV07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0SG9yaXpvbnRhbFJ1bGU6ICgpID0+ICh7IGNoYWluLCBzdGF0ZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7ICR0bzogJG9yaWdpblRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q2hhaW4gPSBjaGFpbigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRvcmlnaW5Uby5wYXJlbnRPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhaW4uaW5zZXJ0Q29udGVudEF0KE1hdGgubWF4KCRvcmlnaW5Uby5wb3MgLSAyLCAwKSwgeyB0eXBlOiB0aGlzLm5hbWUgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2hhaW4uaW5zZXJ0Q29udGVudCh7IHR5cGU6IHRoaXMubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAoY3VycmVudENoYWluXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnNvciBhZnRlciBob3Jpem9udGFsIHJ1bGVcclxuICAgICAgICAgICAgICAgICAgICAuY29tbWFuZCgoeyB0ciwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyAkdG8gfSA9IHRyLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zQWZ0ZXIgPSAkdG8uZW5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdG8ubm9kZUFmdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRvLm5vZGVBZnRlci5pc1RleHRibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICR0by5wb3MgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgkdG8ubm9kZUFmdGVyLmlzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUodHIuZG9jLCAkdG8ucG9zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oVGV4dFNlbGVjdGlvbi5jcmVhdGUodHIuZG9jLCAkdG8ucG9zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbm9kZSBhZnRlciBob3Jpem9udGFsIHJ1bGUgaWYgaXTigJlzIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gKF9hID0gJHRvLnBhcmVudC50eXBlLmNvbnRlbnRNYXRjaC5kZWZhdWx0VHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5pbnNlcnQocG9zQWZ0ZXIsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIHBvc0FmdGVyICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyLnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAucnVuKCkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkSW5wdXRSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBub2RlSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IC9eKD86LS0tfOKAlC18X19fXFxzfFxcKlxcKlxcKlxccykkLyxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBIb3Jpem9udGFsUnVsZSwgSG9yaXpvbnRhbFJ1bGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-image/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@tiptap/extension-image/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   \"default\": () => (/* binding */ Image),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n/**\r\n * Matches an image to a ![image](src \"title\") on input.\r\n */\r\nconst inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/;\r\n/**\r\n * This extension allows you to insert images.\r\n * @see https://www.tiptap.dev/api/nodes/image\r\n */\r\nconst Image = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'image',\r\n    addOptions() {\r\n        return {\r\n            inline: false,\r\n            allowBase64: false,\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    inline() {\r\n        return this.options.inline;\r\n    },\r\n    group() {\r\n        return this.options.inline ? 'inline' : 'block';\r\n    },\r\n    draggable: true,\r\n    addAttributes() {\r\n        return {\r\n            src: {\r\n                default: null,\r\n            },\r\n            alt: {\r\n                default: null,\r\n            },\r\n            title: {\r\n                default: null,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: this.options.allowBase64\r\n                    ? 'img[src]'\r\n                    : 'img[src]:not([src^=\"data:\"])',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['img', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setImage: options => ({ commands }) => {\r\n                return commands.insertContent({\r\n                    type: this.name,\r\n                    attrs: options,\r\n                });\r\n            },\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.nodeInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                getAttributes: match => {\r\n                    const [, , alt, src, title] = match;\r\n                    return { src, alt, title };\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taW1hZ2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9FOztBQUVwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4Q0FBSTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyx1QkFBdUIsNkRBQWU7QUFDdEMsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFOEM7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWltYWdlL2Rpc3QvaW5kZXguanM/ZTk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMsIG5vZGVJbnB1dFJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG4vKipcclxuICogTWF0Y2hlcyBhbiBpbWFnZSB0byBhICFbaW1hZ2VdKHNyYyBcInRpdGxlXCIpIG9uIGlucHV0LlxyXG4gKi9cclxuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykoIVxcWyguK3w6PyldXFwoKFxcUyspKD86KD86XFxzKylbXCInXShcXFMrKVtcIiddKT9cXCkpJC87XHJcbi8qKlxyXG4gKiBUaGlzIGV4dGVuc2lvbiBhbGxvd3MgeW91IHRvIGluc2VydCBpbWFnZXMuXHJcbiAqIEBzZWUgaHR0cHM6Ly93d3cudGlwdGFwLmRldi9hcGkvbm9kZXMvaW1hZ2VcclxuICovXHJcbmNvbnN0IEltYWdlID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2ltYWdlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcclxuICAgICAgICAgICAgYWxsb3dCYXNlNjQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBpbmxpbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmxpbmU7XHJcbiAgICB9LFxyXG4gICAgZ3JvdXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmxpbmUgPyAnaW5saW5lJyA6ICdibG9jayc7XHJcbiAgICB9LFxyXG4gICAgZHJhZ2dhYmxlOiB0cnVlLFxyXG4gICAgYWRkQXR0cmlidXRlcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzcmM6IHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFsdDoge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiB0aGlzLm9wdGlvbnMuYWxsb3dCYXNlNjRcclxuICAgICAgICAgICAgICAgICAgICA/ICdpbWdbc3JjXSdcclxuICAgICAgICAgICAgICAgICAgICA6ICdpbWdbc3JjXTpub3QoW3NyY149XCJkYXRhOlwiXSknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydpbWcnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyldO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEltYWdlOiBvcHRpb25zID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5pbnNlcnRDb250ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbm9kZUlucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICAgICAgZ2V0QXR0cmlidXRlczogbWF0Y2ggPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFssICwgYWx0LCBzcmMsIHRpdGxlXSA9IG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNyYywgYWx0LCB0aXRsZSB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBJbWFnZSwgSW1hZ2UgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-image/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Italic: () => (/* binding */ Italic),\n/* harmony export */   \"default\": () => (/* binding */ Italic),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\r\nconst starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\r\nconst underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\r\nconst underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\r\nconst Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'italic',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'em',\r\n            },\r\n            {\r\n                tag: 'i',\r\n                getAttrs: node => node.style.fontStyle !== 'normal' && null,\r\n            },\r\n            {\r\n                style: 'font-style=italic',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['em', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setItalic: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleItalic: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetItalic: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-i': () => this.editor.commands.toggleItalic(),\r\n            'Mod-I': () => this.editor.commands.toggleItalic(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: starInputRegex,\r\n                type: this.type,\r\n            }),\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: underscoreInputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: starPasteRegex,\r\n                type: this.type,\r\n            }),\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: underscorePasteRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taXRhbGljL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtRjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhDQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsZ0JBQWdCO0FBQ2pDLHNCQUFzQiw2REFBZTtBQUNyQyxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0EsYUFBYTtBQUNiLG1DQUFtQyxVQUFVO0FBQzdDO0FBQ0EsYUFBYTtBQUNiLGtDQUFrQyxVQUFVO0FBQzVDO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksMkRBQWE7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFZ0g7QUFDakgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWl0YWxpYy9kaXN0L2luZGV4LmpzPzQ5YjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3Qgc3RhcklucHV0UmVnZXggPSAvKD86XnxcXHMpKFxcKig/IVxccytcXCopKCg/OlteKl0rKSlcXCooPyFcXHMrXFwqKSkkLztcclxuY29uc3Qgc3RhclBhc3RlUmVnZXggPSAvKD86XnxcXHMpKFxcKig/IVxccytcXCopKCg/OlteKl0rKSlcXCooPyFcXHMrXFwqKSkvZztcclxuY29uc3QgdW5kZXJzY29yZUlucHV0UmVnZXggPSAvKD86XnxcXHMpKF8oPyFcXHMrXykoKD86W15fXSspKV8oPyFcXHMrXykpJC87XHJcbmNvbnN0IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKShfKD8hXFxzK18pKCg/OlteX10rKSlfKD8hXFxzK18pKS9nO1xyXG5jb25zdCBJdGFsaWMgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnaXRhbGljJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2VtJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnaScsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogbm9kZSA9PiBub2RlLnN0eWxlLmZvbnRTdHlsZSAhPT0gJ25vcm1hbCcgJiYgbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdmb250LXN0eWxlPWl0YWxpYycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2VtJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRJdGFsaWM6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRJdGFsaWM6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtaSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUl0YWxpYygpLFxyXG4gICAgICAgICAgICAnTW9kLUknOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVJdGFsaWMoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFySW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogdW5kZXJzY29yZUlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHN0YXJQYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlUGFzdGVSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBJdGFsaWMsIEl0YWxpYyBhcyBkZWZhdWx0LCBzdGFySW5wdXRSZWdleCwgc3RhclBhc3RlUmVnZXgsIHVuZGVyc2NvcmVJbnB1dFJlZ2V4LCB1bmRlcnNjb3JlUGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-link/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-link/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   \"default\": () => (/* binding */ Link),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linkifyjs */ \"(ssr)/./node_modules/linkifyjs/dist/linkify.es.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\n\n/**\r\n * Check if the provided tokens form a valid link structure, which can either be a single link token\r\n * or a link token surrounded by parentheses or square brackets.\r\n *\r\n * This ensures that only complete and valid text is hyperlinked, preventing cases where a valid\r\n * top-level domain (TLD) is immediately followed by an invalid character, like a number. For\r\n * example, with the `find` method from Linkify, entering `example.com1` would result in\r\n * `example.com` being linked and the trailing `1` left as plain text. By using the `tokenize`\r\n * method, we can perform more comprehensive validation on the input text.\r\n */\r\nfunction isValidLinkStructure(tokens) {\r\n    if (tokens.length === 1) {\r\n        return tokens[0].isLink;\r\n    }\r\n    if (tokens.length === 3 && tokens[1].isLink) {\r\n        return ['()', '[]'].includes(tokens[0].value + tokens[2].value);\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * This plugin allows you to automatically add links to your editor.\r\n * @param options The plugin options\r\n * @returns The plugin instance\r\n */\r\nfunction autolink(options) {\r\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\r\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('autolink'),\r\n        appendTransaction: (transactions, oldState, newState) => {\r\n            /**\r\n             * Does the transaction change the document?\r\n             */\r\n            const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\r\n            /**\r\n             * Prevent autolink if the transaction is not a document change or if the transaction has the meta `preventAutolink`.\r\n             */\r\n            const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'));\r\n            /**\r\n             * Prevent autolink if the transaction is not a document change\r\n             * or if the transaction has the meta `preventAutolink`.\r\n             */\r\n            if (!docChanges || preventAutolink) {\r\n                return;\r\n            }\r\n            const { tr } = newState;\r\n            const transform = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps)(oldState.doc, [...transactions]);\r\n            const changes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges)(transform);\r\n            changes.forEach(({ newRange }) => {\r\n                // Now let’s see if we can add new links.\r\n                const nodesInChangedRanges = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange)(newState.doc, newRange, node => node.isTextblock);\r\n                let textBlock;\r\n                let textBeforeWhitespace;\r\n                if (nodesInChangedRanges.length > 1) {\r\n                    // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\r\n                    textBlock = nodesInChangedRanges[0];\r\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');\r\n                }\r\n                else if (nodesInChangedRanges.length\r\n                    // We want to make sure to include the block seperator argument to treat hard breaks like spaces.\r\n                    && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')) {\r\n                    textBlock = nodesInChangedRanges[0];\r\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');\r\n                }\r\n                if (textBlock && textBeforeWhitespace) {\r\n                    const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '');\r\n                    if (wordsBeforeWhitespace.length <= 0) {\r\n                        return false;\r\n                    }\r\n                    const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];\r\n                    const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);\r\n                    if (!lastWordBeforeSpace) {\r\n                        return false;\r\n                    }\r\n                    const linksBeforeSpace = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.tokenize)(lastWordBeforeSpace).map(t => t.toObject());\r\n                    if (!isValidLinkStructure(linksBeforeSpace)) {\r\n                        return false;\r\n                    }\r\n                    linksBeforeSpace\r\n                        .filter(link => link.isLink)\r\n                        // Calculate link position.\r\n                        .map(link => ({\r\n                        ...link,\r\n                        from: lastWordAndBlockOffset + link.start + 1,\r\n                        to: lastWordAndBlockOffset + link.end + 1,\r\n                    }))\r\n                        // ignore link inside code mark\r\n                        .filter(link => {\r\n                        if (!newState.schema.marks.code) {\r\n                            return true;\r\n                        }\r\n                        return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);\r\n                    })\r\n                        // validate link\r\n                        .filter(link => {\r\n                        if (options.validate) {\r\n                            return options.validate(link.value);\r\n                        }\r\n                        return true;\r\n                    })\r\n                        // Add link mark.\r\n                        .forEach(link => {\r\n                        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween)(link.from, link.to, newState.doc).some(item => item.mark.type === options.type)) {\r\n                            return;\r\n                        }\r\n                        tr.addMark(link.from, link.to, options.type.create({\r\n                            href: link.href,\r\n                        }));\r\n                    });\r\n                }\r\n            });\r\n            if (!tr.steps.length) {\r\n                return;\r\n            }\r\n            return tr;\r\n        },\r\n    });\r\n}\n\nfunction clickHandler(options) {\r\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\r\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handleClickLink'),\r\n        props: {\r\n            handleClick: (view, pos, event) => {\r\n                var _a, _b;\r\n                if (options.whenNotEditable && view.editable) {\r\n                    return false;\r\n                }\r\n                if (event.button !== 0) {\r\n                    return false;\r\n                }\r\n                let a = event.target;\r\n                const els = [];\r\n                while (a.nodeName !== 'DIV') {\r\n                    els.push(a);\r\n                    a = a.parentNode;\r\n                }\r\n                if (!els.find(value => value.nodeName === 'A')) {\r\n                    return false;\r\n                }\r\n                const attrs = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes)(view.state, options.type.name);\r\n                const link = event.target;\r\n                const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;\r\n                const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;\r\n                if (link && href) {\r\n                    window.open(href, target);\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n        },\r\n    });\r\n}\n\nfunction pasteHandler(options) {\r\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\r\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey('handlePasteLink'),\r\n        props: {\r\n            handlePaste: (view, event, slice) => {\r\n                const { state } = view;\r\n                const { selection } = state;\r\n                const { empty } = selection;\r\n                if (empty) {\r\n                    return false;\r\n                }\r\n                let textContent = '';\r\n                slice.content.forEach(node => {\r\n                    textContent += node.textContent;\r\n                });\r\n                const link = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(textContent).find(item => item.isLink && item.value === textContent);\r\n                if (!textContent || !link) {\r\n                    return false;\r\n                }\r\n                options.editor.commands.setMark(options.type, {\r\n                    href: link.href,\r\n                });\r\n                return true;\r\n            },\r\n        },\r\n    });\r\n}\n\nconst pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\r\n/**\r\n * This extension allows you to create links.\r\n * @see https://www.tiptap.dev/api/marks/link\r\n */\r\nconst Link = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark.create({\r\n    name: 'link',\r\n    priority: 1000,\r\n    keepOnSplit: false,\r\n    onCreate() {\r\n        this.options.protocols.forEach(protocol => {\r\n            if (typeof protocol === 'string') {\r\n                (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol);\r\n                return;\r\n            }\r\n            (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol.scheme, protocol.optionalSlashes);\r\n        });\r\n    },\r\n    onDestroy() {\r\n        (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.reset)();\r\n    },\r\n    inclusive() {\r\n        return this.options.autolink;\r\n    },\r\n    addOptions() {\r\n        return {\r\n            openOnClick: true,\r\n            linkOnPaste: true,\r\n            autolink: true,\r\n            protocols: [],\r\n            HTMLAttributes: {\r\n                target: '_blank',\r\n                rel: 'noopener noreferrer nofollow',\r\n                class: null,\r\n            },\r\n            validate: undefined,\r\n        };\r\n    },\r\n    addAttributes() {\r\n        return {\r\n            href: {\r\n                default: null,\r\n            },\r\n            target: {\r\n                default: this.options.HTMLAttributes.target,\r\n            },\r\n            rel: {\r\n                default: this.options.HTMLAttributes.rel,\r\n            },\r\n            class: {\r\n                default: this.options.HTMLAttributes.class,\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [{ tag: 'a[href]:not([href *= \"javascript:\" i])' }];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        var _a;\r\n        // False positive; we're explicitly checking for javascript: links to ignore them\r\n        // eslint-disable-next-line no-script-url\r\n        if ((_a = HTMLAttributes.href) === null || _a === void 0 ? void 0 : _a.startsWith('javascript:')) {\r\n            // strip out the href\r\n            return ['a', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, { ...HTMLAttributes, href: '' }), 0];\r\n        }\r\n        return ['a', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setLink: attributes => ({ chain }) => {\r\n                return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run();\r\n            },\r\n            toggleLink: attributes => ({ chain }) => {\r\n                return chain()\r\n                    .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })\r\n                    .setMeta('preventAutolink', true)\r\n                    .run();\r\n            },\r\n            unsetLink: () => ({ chain }) => {\r\n                return chain()\r\n                    .unsetMark(this.name, { extendEmptyMarkRange: true })\r\n                    .setMeta('preventAutolink', true)\r\n                    .run();\r\n            },\r\n        };\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule)({\r\n                find: text => {\r\n                    const foundLinks = [];\r\n                    if (text) {\r\n                        const links = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(text).filter(item => item.isLink);\r\n                        if (links.length) {\r\n                            links.forEach(link => (foundLinks.push({\r\n                                text: link.value,\r\n                                data: {\r\n                                    href: link.href,\r\n                                },\r\n                                index: link.start,\r\n                            })));\r\n                        }\r\n                    }\r\n                    return foundLinks;\r\n                },\r\n                type: this.type,\r\n                getAttributes: match => {\r\n                    var _a;\r\n                    return {\r\n                        href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href,\r\n                    };\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n    addProseMirrorPlugins() {\r\n        const plugins = [];\r\n        if (this.options.autolink) {\r\n            plugins.push(autolink({\r\n                type: this.type,\r\n                validate: this.options.validate,\r\n            }));\r\n        }\r\n        if (this.options.openOnClick) {\r\n            plugins.push(clickHandler({\r\n                type: this.type,\r\n                whenNotEditable: this.options.openOnClick === 'whenNotEditable',\r\n            }));\r\n        }\r\n        if (this.options.linkOnPaste) {\r\n            plugins.push(pasteHandler({\r\n                editor: this.editor,\r\n                type: this.type,\r\n            }));\r\n        }\r\n        return plugins;\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-list-item/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListItem: () => (/* binding */ ListItem),\n/* harmony export */   \"default\": () => (/* binding */ ListItem)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'listItem',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            bulletListTypeName: 'bulletList',\r\n            orderedListTypeName: 'orderedList',\r\n        };\r\n    },\r\n    content: 'paragraph block*',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'li',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Enter: () => this.editor.commands.splitListItem(this.name),\r\n            Tab: () => this.editor.commands.sinkListItem(this.name),\r\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRCxpQkFBaUIsOENBQUk7QUFDckI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxzQkFBc0IsNkRBQWU7QUFDckMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUV3QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtL2Rpc3QvaW5kZXguanM/ODI0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBMaXN0SXRlbSA9IE5vZGUuY3JlYXRlKHtcclxuICAgIG5hbWU6ICdsaXN0SXRlbScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICAgICAgYnVsbGV0TGlzdFR5cGVOYW1lOiAnYnVsbGV0TGlzdCcsXHJcbiAgICAgICAgICAgIG9yZGVyZWRMaXN0VHlwZU5hbWU6ICdvcmRlcmVkTGlzdCcsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBjb250ZW50OiAncGFyYWdyYXBoIGJsb2NrKicsXHJcbiAgICBkZWZpbmluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdsaScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2xpJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBFbnRlcjogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc3BsaXRMaXN0SXRlbSh0aGlzLm5hbWUpLFxyXG4gICAgICAgICAgICBUYWI6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnNpbmtMaXN0SXRlbSh0aGlzLm5hbWUpLFxyXG4gICAgICAgICAgICAnU2hpZnQtVGFiJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMubGlmdExpc3RJdGVtKHRoaXMubmFtZSksXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBMaXN0SXRlbSwgTGlzdEl0ZW0gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-ordered-list/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedList: () => (/* binding */ OrderedList),\n/* harmony export */   \"default\": () => (/* binding */ OrderedList),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst ListItem = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'listItem',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n            bulletListTypeName: 'bulletList',\r\n            orderedListTypeName: 'orderedList',\r\n        };\r\n    },\r\n    content: 'paragraph block*',\r\n    defining: true,\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'li',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['li', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            Enter: () => this.editor.commands.splitListItem(this.name),\r\n            Tab: () => this.editor.commands.sinkListItem(this.name),\r\n            'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\r\n        };\r\n    },\r\n});\n\nconst TextStyle = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'textStyle',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'span',\r\n                getAttrs: element => {\r\n                    const hasStyles = element.hasAttribute('style');\r\n                    if (!hasStyles) {\r\n                        return false;\r\n                    }\r\n                    return {};\r\n                },\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['span', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            removeEmptyTextStyle: () => ({ state, commands }) => {\r\n                const attributes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getMarkAttributes)(state, this.type);\r\n                const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\r\n                if (hasStyles) {\r\n                    return true;\r\n                }\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n});\n\nconst inputRegex = /^(\\d+)\\.\\s$/;\r\nconst OrderedList = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'orderedList',\r\n    addOptions() {\r\n        return {\r\n            itemTypeName: 'listItem',\r\n            HTMLAttributes: {},\r\n            keepMarks: false,\r\n            keepAttributes: false,\r\n        };\r\n    },\r\n    group: 'block list',\r\n    content() {\r\n        return `${this.options.itemTypeName}+`;\r\n    },\r\n    addAttributes() {\r\n        return {\r\n            start: {\r\n                default: 1,\r\n                parseHTML: element => {\r\n                    return element.hasAttribute('start')\r\n                        ? parseInt(element.getAttribute('start') || '', 10)\r\n                        : 1;\r\n                },\r\n            },\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'ol',\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        const { start, ...attributesWithoutStart } = HTMLAttributes;\r\n        return start === 1\r\n            ? ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, attributesWithoutStart), 0]\r\n            : ['ol', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleOrderedList: () => ({ commands, chain }) => {\r\n                if (this.options.keepAttributes) {\r\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\r\n                }\r\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\r\n        };\r\n    },\r\n    addInputRules() {\r\n        let inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\r\n            find: inputRegex,\r\n            type: this.type,\r\n            getAttributes: match => ({ start: +match[1] }),\r\n            joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n        });\r\n        if (this.options.keepMarks || this.options.keepAttributes) {\r\n            inputRule = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.wrappingInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n                keepMarks: this.options.keepMarks,\r\n                keepAttributes: this.options.keepAttributes,\r\n                getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),\r\n                joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\r\n                editor: this.editor,\r\n            });\r\n        }\r\n        return [\r\n            inputRule,\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-paragraph/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Paragraph: () => (/* binding */ Paragraph),\n/* harmony export */   \"default\": () => (/* binding */ Paragraph)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst Paragraph = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'paragraph',\r\n    priority: 1000,\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    group: 'block',\r\n    content: 'inline*',\r\n    parseHTML() {\r\n        return [\r\n            { tag: 'p' },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['p', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setParagraph: () => ({ commands }) => {\r\n                return commands.setNode(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-Alt-0': () => this.editor.commands.setParagraph(),\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGFyYWdyYXBoL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRCxrQkFBa0IsOENBQUk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFVBQVU7QUFDeEI7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxxQkFBcUIsNkRBQWU7QUFDcEMsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQ0FBbUMsVUFBVTtBQUM3QztBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUUwQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tcGFyYWdyYXBoL2Rpc3QvaW5kZXguanM/MzE1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBQYXJhZ3JhcGggPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAncGFyYWdyYXBoJyxcclxuICAgIHByaW9yaXR5OiAxMDAwLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBncm91cDogJ2Jsb2NrJyxcclxuICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ3AnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ3AnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldFBhcmFncmFwaDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnNldE5vZGUodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtQWx0LTAnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZXRQYXJhZ3JhcGgoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFBhcmFncmFwaCwgUGFyYWdyYXBoIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Strike: () => (/* binding */ Strike),\n/* harmony export */   \"default\": () => (/* binding */ Strike),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/;\r\nconst pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g;\r\nconst Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'strike',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 's',\r\n            },\r\n            {\r\n                tag: 'del',\r\n            },\r\n            {\r\n                tag: 'strike',\r\n            },\r\n            {\r\n                style: 'text-decoration',\r\n                consuming: false,\r\n                getAttrs: style => (style.includes('line-through') ? {} : false),\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['s', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setStrike: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleStrike: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetStrike: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        const shortcuts = {};\r\n        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.isMacOS)()) {\r\n            shortcuts['Mod-Shift-s'] = () => this.editor.commands.toggleStrike();\r\n        }\r\n        else {\r\n            shortcuts['Ctrl-Shift-s'] = () => this.editor.commands.toggleStrike();\r\n        }\r\n        return shortcuts;\r\n    },\r\n    addInputRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\r\n                find: inputRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n    addPasteRules() {\r\n        return [\r\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\r\n                find: pasteRegex,\r\n                type: this.type,\r\n            }),\r\n        ];\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tc3RyaWtlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEY7O0FBRTVGO0FBQ0E7QUFDQSxlQUFlLDhDQUFJO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsZ0JBQWdCO0FBQ2pDLHFCQUFxQiw2REFBZTtBQUNwQyxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0EsYUFBYTtBQUNiLG1DQUFtQyxVQUFVO0FBQzdDO0FBQ0EsYUFBYTtBQUNiLGtDQUFrQyxVQUFVO0FBQzVDO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLHFEQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwyREFBYTtBQUN6QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLDJEQUFhO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFNEQ7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXN0cmlrZS9kaXN0L2luZGV4LmpzP2JlOGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBpc01hY09TLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykofn4oPyFcXHMrfn4pKCg/Oltefl0rKSl+fig/IVxccyt+fikpJC87XHJcbmNvbnN0IHBhc3RlUmVnZXggPSAvKD86XnxcXHMpKH5+KD8hXFxzK35+KSgoPzpbXn5dKykpfn4oPyFcXHMrfn4pKS9nO1xyXG5jb25zdCBTdHJpa2UgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnc3RyaWtlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ3MnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdkZWwnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJpa2UnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ3RleHQtZGVjb3JhdGlvbicsXHJcbiAgICAgICAgICAgICAgICBjb25zdW1pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IHN0eWxlID0+IChzdHlsZS5pbmNsdWRlcygnbGluZS10aHJvdWdoJykgPyB7fSA6IGZhbHNlKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsncycsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0U3RyaWtlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2dnbGVTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc2V0U3RyaWtlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICBjb25zdCBzaG9ydGN1dHMgPSB7fTtcclxuICAgICAgICBpZiAoaXNNYWNPUygpKSB7XHJcbiAgICAgICAgICAgIHNob3J0Y3V0c1snTW9kLVNoaWZ0LXMnXSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVN0cmlrZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2hvcnRjdXRzWydDdHJsLVNoaWZ0LXMnXSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVN0cmlrZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2hvcnRjdXRzO1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBwYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFN0cmlrZSwgU3RyaWtlIGFzIGRlZmF1bHQsIGlucHV0UmVnZXgsIHBhc3RlUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-text/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   \"default\": () => (/* binding */ Text)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\r\n    name: 'text',\r\n    group: 'inline',\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGV4dC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQzs7QUFFcEMsYUFBYSw4Q0FBSTtBQUNqQjtBQUNBO0FBQ0EsQ0FBQzs7QUFFZ0M7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXRleHQvZGlzdC9pbmRleC5qcz9kMjc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBUZXh0ID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ3RleHQnLFxyXG4gICAgZ3JvdXA6ICdpbmxpbmUnLFxyXG59KTtcblxuZXhwb3J0IHsgVGV4dCwgVGV4dCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-underline/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Underline: () => (/* binding */ Underline),\n/* harmony export */   \"default\": () => (/* binding */ Underline)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\nconst Underline = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\r\n    name: 'underline',\r\n    addOptions() {\r\n        return {\r\n            HTMLAttributes: {},\r\n        };\r\n    },\r\n    parseHTML() {\r\n        return [\r\n            {\r\n                tag: 'u',\r\n            },\r\n            {\r\n                style: 'text-decoration',\r\n                consuming: false,\r\n                getAttrs: style => (style.includes('underline') ? {} : false),\r\n            },\r\n        ];\r\n    },\r\n    renderHTML({ HTMLAttributes }) {\r\n        return ['u', (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\r\n    },\r\n    addCommands() {\r\n        return {\r\n            setUnderline: () => ({ commands }) => {\r\n                return commands.setMark(this.name);\r\n            },\r\n            toggleUnderline: () => ({ commands }) => {\r\n                return commands.toggleMark(this.name);\r\n            },\r\n            unsetUnderline: () => ({ commands }) => {\r\n                return commands.unsetMark(this.name);\r\n            },\r\n        };\r\n    },\r\n    addKeyboardShortcuts() {\r\n        return {\r\n            'Mod-u': () => this.editor.commands.toggleUnderline(),\r\n            'Mod-U': () => this.editor.commands.toggleUnderline(),\r\n        };\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdW5kZXJsaW5lL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEOztBQUVyRCxrQkFBa0IsOENBQUk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLGdCQUFnQjtBQUNqQyxxQkFBcUIsNkRBQWU7QUFDcEMsS0FBSztBQUNMO0FBQ0E7QUFDQSxtQ0FBbUMsVUFBVTtBQUM3QztBQUNBLGFBQWE7QUFDYixzQ0FBc0MsVUFBVTtBQUNoRDtBQUNBLGFBQWE7QUFDYixxQ0FBcUMsVUFBVTtBQUMvQztBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7O0FBRTBDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi11bmRlcmxpbmUvZGlzdC9pbmRleC5qcz9jZTZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IFVuZGVybGluZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICd1bmRlcmxpbmUnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAndScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAndGV4dC1kZWNvcmF0aW9uJyxcclxuICAgICAgICAgICAgICAgIGNvbnN1bWluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogc3R5bGUgPT4gKHN0eWxlLmluY2x1ZGVzKCd1bmRlcmxpbmUnKSA/IHt9IDogZmFsc2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWyd1JywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRVbmRlcmxpbmU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZVVuZGVybGluZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRVbmRlcmxpbmU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtdSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVVuZGVybGluZSgpLFxyXG4gICAgICAgICAgICAnTW9kLVUnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVVbmRlcmxpbmUoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFVuZGVybGluZSwgVW5kZXJsaW5lIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/pm/commands/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.autoJoin),\n/* harmony export */   baseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.baseKeymap),\n/* harmony export */   chainCommands: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.chainCommands),\n/* harmony export */   createParagraphNear: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteSelection),\n/* harmony export */   exitCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.exitCode),\n/* harmony export */   joinBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinBackward),\n/* harmony export */   joinDown: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinDown),\n/* harmony export */   joinForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockForward),\n/* harmony export */   joinUp: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinUp),\n/* harmony export */   lift: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.lift),\n/* harmony export */   liftEmptyBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectAll),\n/* harmony export */   selectNodeBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.setBlockType),\n/* harmony export */   splitBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlock),\n/* harmony export */   splitBlockAs: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleMark),\n/* harmony export */   wrapIn: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n// commands/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9jb21tYW5kcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3FDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL2NvbW1hbmRzL2Rpc3QvaW5kZXguanM/NGZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb21tYW5kcy9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tiptap/pm/dropcursor/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropCursor: () => (/* reexport safe */ prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-dropcursor */ \"(ssr)/./node_modules/prosemirror-dropcursor/dist/index.js\");\n// dropcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUN1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanM/OTAyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkcm9wY3Vyc29yL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItZHJvcGN1cnNvclwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/gapcursor/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.GapCursor),\n/* harmony export */   gapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-gapcursor */ \"(ssr)/./node_modules/prosemirror-gapcursor/dist/index.js\");\n// gapcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcz84ODVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGdhcGN1cnNvci9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWdhcGN1cnNvclwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/history/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tiptap/pm/history/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.closeHistory),\n/* harmony export */   history: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.history),\n/* harmony export */   redo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redo),\n/* harmony export */   redoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoDepth),\n/* harmony export */   redoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoNoScroll),\n/* harmony export */   undo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undo),\n/* harmony export */   undoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoDepth),\n/* harmony export */   undoNoScroll: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoNoScroll)\n/* harmony export */ });\n/* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-history */ \"(ssr)/./node_modules/prosemirror-history/dist/index.js\");\n// history/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vaGlzdG9yeS9kaXN0L2luZGV4LmpzPzgzZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaGlzdG9yeS9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWhpc3RvcnlcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/keymap/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keydownHandler),\n/* harmony export */   keymap: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keymap)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n// keymap/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcz9iN2Y3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGtleW1hcC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWtleW1hcFwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/model/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/model/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ContentMatch),\n/* harmony export */   DOMParser: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser),\n/* harmony export */   DOMSerializer: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer),\n/* harmony export */   Fragment: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   Mark: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark),\n/* harmony export */   MarkType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType),\n/* harmony export */   Node: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node),\n/* harmony export */   NodeRange: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange),\n/* harmony export */   NodeType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   ReplaceError: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ResolvedPos),\n/* harmony export */   Schema: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   Slice: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n// model/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9tb2RlbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vbW9kZWwvZGlzdC9pbmRleC5qcz82OTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG1vZGVsL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/pm/schema-list/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.addListNodes),\n/* harmony export */   bulletList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.bulletList),\n/* harmony export */   liftListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.liftListItem),\n/* harmony export */   listItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.listItem),\n/* harmony export */   orderedList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.orderedList),\n/* harmony export */   sinkListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.sinkListItem),\n/* harmony export */   splitListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItem),\n/* harmony export */   wrapInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-schema-list */ \"(ssr)/./node_modules/prosemirror-schema-list/dist/index.js\");\n// schema-list/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zY2hlbWEtbGlzdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ3dDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3NjaGVtYS1saXN0L2Rpc3QvaW5kZXguanM/YzA2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2hlbWEtbGlzdC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXNjaGVtYS1saXN0XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/state/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/state/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection),\n/* harmony export */   EditorState: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   NodeSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection),\n/* harmony export */   Plugin: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin),\n/* harmony export */   PluginKey: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey),\n/* harmony export */   Selection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection),\n/* harmony export */   SelectionRange: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),\n/* harmony export */   TextSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection),\n/* harmony export */   Transaction: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n// state/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzPzZmODIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3RhdGUvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/transform/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AttrStep),\n/* harmony export */   DocAttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.DocAttrStep),\n/* harmony export */   MapResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.MapResult),\n/* harmony export */   Mapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep),\n/* harmony export */   Step: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Step),\n/* harmony export */   StepMap: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepMap),\n/* harmony export */   StepResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepResult),\n/* harmony export */   Transform: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Transform),\n/* harmony export */   TransformError: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.TransformError),\n/* harmony export */   canJoin: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin),\n/* harmony export */   canSplit: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit),\n/* harmony export */   dropPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.dropPoint),\n/* harmony export */   findWrapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping),\n/* harmony export */   insertPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.insertPoint),\n/* harmony export */   joinPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint),\n/* harmony export */   liftTarget: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget),\n/* harmony export */   replaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n// transform/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcz8xMDk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zZm9ybS9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLXRyYW5zZm9ybVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/view/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tiptap/pm/view/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.Decoration),\n/* harmony export */   DecorationSet: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.DecorationSet),\n/* harmony export */   EditorView: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   __endComposition: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__parseFromClipboard),\n/* harmony export */   __serializeForClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__serializeForClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n// view/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS92aWV3L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL3ZpZXcvZGlzdC9pbmRleC5qcz9hZGYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZpZXcvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci12aWV3XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tiptap/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   CommandManager: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   EditorConsumer: () => (/* binding */ EditorConsumer),\n/* harmony export */   EditorContent: () => (/* binding */ EditorContent),\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   Extension: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension),\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   InputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.InputRule),\n/* harmony export */   Mark: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark),\n/* harmony export */   Node: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node),\n/* harmony export */   NodePos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodePos),\n/* harmony export */   NodeView: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView),\n/* harmony export */   NodeViewContent: () => (/* binding */ NodeViewContent),\n/* harmony export */   NodeViewWrapper: () => (/* binding */ NodeViewWrapper),\n/* harmony export */   PasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.PasteRule),\n/* harmony export */   PureEditorContent: () => (/* binding */ PureEditorContent),\n/* harmony export */   ReactNodeViewContext: () => (/* binding */ ReactNodeViewContext),\n/* harmony export */   ReactNodeViewRenderer: () => (/* binding */ ReactNodeViewRenderer),\n/* harmony export */   ReactRenderer: () => (/* binding */ ReactRenderer),\n/* harmony export */   Tracker: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Tracker),\n/* harmony export */   callOrReturn: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createChainableState),\n/* harmony export */   createDocument: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createDocument),\n/* harmony export */   createNodeFromContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.deleteProps),\n/* harmony export */   elementFromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.escapeForRegEx),\n/* harmony export */   extensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.extensions),\n/* harmony export */   findChildren: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildren),\n/* harmony export */   findChildrenInRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findDuplicates),\n/* harmony export */   findParentNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.fromString),\n/* harmony export */   generateHTML: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateHTML),\n/* harmony export */   generateJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateJSON),\n/* harmony export */   generateText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateText),\n/* harmony export */   getAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkRange),\n/* harmony export */   getMarkType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkType),\n/* harmony export */   getMarksBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSplittedAttributes),\n/* harmony export */   getText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getText),\n/* harmony export */   getTextBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesPlugin),\n/* harmony export */   isActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isActive),\n/* harmony export */   isAtEndOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isFunction),\n/* harmony export */   isList: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isList),\n/* harmony export */   isMacOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMacOS),\n/* harmony export */   isMarkActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMarkActive),\n/* harmony export */   isNodeActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeSelection),\n/* harmony export */   isNumber: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNumber),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject),\n/* harmony export */   isRegExp: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isRegExp),\n/* harmony export */   isString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isString),\n/* harmony export */   isTextSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isTextSelection),\n/* harmony export */   isiOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isiOS),\n/* harmony export */   markInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markInputRule),\n/* harmony export */   markPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeDeep),\n/* harmony export */   minMax: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.minMax),\n/* harmony export */   nodeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.splitExtensions),\n/* harmony export */   textInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textInputRule),\n/* harmony export */   textPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textblockTypeInputRule),\n/* harmony export */   useCurrentEditor: () => (/* binding */ useCurrentEditor),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useReactNodeView: () => (/* binding */ useReactNodeView),\n/* harmony export */   wrappingInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-bubble-menu */ \"(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-floating-menu */ \"(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\");\n\n\n\n\n\n\n\nconst mergeRefs = (...refs) => {\r\n    return (node) => {\r\n        refs.forEach(ref => {\r\n            if (typeof ref === 'function') {\r\n                ref(node);\r\n            }\r\n            else if (ref) {\r\n                ref.current = node;\r\n            }\r\n        });\r\n    };\r\n};\r\nconst Portals = ({ renderers }) => {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Object.entries(renderers).map(([key, renderer]) => {\r\n        return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(renderer.reactElement, renderer.element, key);\r\n    })));\r\n};\r\nclass PureEditorContent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.editorContentRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\r\n        this.initialized = false;\r\n        this.state = {\r\n            renderers: {},\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.init();\r\n    }\r\n    componentDidUpdate() {\r\n        this.init();\r\n    }\r\n    init() {\r\n        const { editor } = this.props;\r\n        if (editor && editor.options.element) {\r\n            if (editor.contentComponent) {\r\n                return;\r\n            }\r\n            const element = this.editorContentRef.current;\r\n            element.append(...editor.options.element.childNodes);\r\n            editor.setOptions({\r\n                element,\r\n            });\r\n            editor.contentComponent = this;\r\n            editor.createNodeViews();\r\n            this.initialized = true;\r\n        }\r\n    }\r\n    maybeFlushSync(fn) {\r\n        // Avoid calling flushSync until the editor is initialized.\r\n        // Initialization happens during the componentDidMount or componentDidUpdate\r\n        // lifecycle methods, and React doesn't allow calling flushSync from inside\r\n        // a lifecycle method.\r\n        if (this.initialized) {\r\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(fn);\r\n        }\r\n        else {\r\n            fn();\r\n        }\r\n    }\r\n    setRenderer(id, renderer) {\r\n        this.maybeFlushSync(() => {\r\n            this.setState(({ renderers }) => ({\r\n                renderers: {\r\n                    ...renderers,\r\n                    [id]: renderer,\r\n                },\r\n            }));\r\n        });\r\n    }\r\n    removeRenderer(id) {\r\n        this.maybeFlushSync(() => {\r\n            this.setState(({ renderers }) => {\r\n                const nextRenderers = { ...renderers };\r\n                delete nextRenderers[id];\r\n                return { renderers: nextRenderers };\r\n            });\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        const { editor } = this.props;\r\n        if (!editor) {\r\n            return;\r\n        }\r\n        this.initialized = false;\r\n        if (!editor.isDestroyed) {\r\n            editor.view.setProps({\r\n                nodeViews: {},\r\n            });\r\n        }\r\n        editor.contentComponent = null;\r\n        if (!editor.options.element.firstChild) {\r\n            return;\r\n        }\r\n        const newElement = document.createElement('div');\r\n        newElement.append(...editor.options.element.childNodes);\r\n        editor.setOptions({\r\n            element: newElement,\r\n        });\r\n    }\r\n    render() {\r\n        const { editor, innerRef, ...rest } = this.props;\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: mergeRefs(innerRef, this.editorContentRef), ...rest }),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portals, { renderers: this.state.renderers })));\r\n    }\r\n}\r\n// EditorContent should be re-created whenever the Editor instance changes\r\nconst EditorContentWithKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {\r\n    const key = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        return Math.floor(Math.random() * 0xFFFFFFFF).toString();\r\n    }, [props.editor]);\r\n    // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(PureEditorContent, {\r\n        key,\r\n        innerRef: ref,\r\n        ...props,\r\n    });\r\n});\r\nconst EditorContent = react__WEBPACK_IMPORTED_MODULE_0__.memo(EditorContentWithKey);\n\nclass Editor extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.contentComponent = null;\r\n    }\r\n}\n\nconst useEditor = (options = {}, deps = []) => {\r\n    const editorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n    const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\r\n    const { onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate, } = options;\r\n    const onBeforeCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBeforeCreate);\r\n    const onBlurRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBlur);\r\n    const onCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onCreate);\r\n    const onDestroyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDestroy);\r\n    const onFocusRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onFocus);\r\n    const onSelectionUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSelectionUpdate);\r\n    const onTransactionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onTransaction);\r\n    const onUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onUpdate);\r\n    // This effect will handle updating the editor instance\r\n    // when the event handlers change.\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        if (!editorRef.current) {\r\n            return;\r\n        }\r\n        if (onBeforeCreate) {\r\n            editorRef.current.off('beforeCreate', onBeforeCreateRef.current);\r\n            editorRef.current.on('beforeCreate', onBeforeCreate);\r\n            onBeforeCreateRef.current = onBeforeCreate;\r\n        }\r\n        if (onBlur) {\r\n            editorRef.current.off('blur', onBlurRef.current);\r\n            editorRef.current.on('blur', onBlur);\r\n            onBlurRef.current = onBlur;\r\n        }\r\n        if (onCreate) {\r\n            editorRef.current.off('create', onCreateRef.current);\r\n            editorRef.current.on('create', onCreate);\r\n            onCreateRef.current = onCreate;\r\n        }\r\n        if (onDestroy) {\r\n            editorRef.current.off('destroy', onDestroyRef.current);\r\n            editorRef.current.on('destroy', onDestroy);\r\n            onDestroyRef.current = onDestroy;\r\n        }\r\n        if (onFocus) {\r\n            editorRef.current.off('focus', onFocusRef.current);\r\n            editorRef.current.on('focus', onFocus);\r\n            onFocusRef.current = onFocus;\r\n        }\r\n        if (onSelectionUpdate) {\r\n            editorRef.current.off('selectionUpdate', onSelectionUpdateRef.current);\r\n            editorRef.current.on('selectionUpdate', onSelectionUpdate);\r\n            onSelectionUpdateRef.current = onSelectionUpdate;\r\n        }\r\n        if (onTransaction) {\r\n            editorRef.current.off('transaction', onTransactionRef.current);\r\n            editorRef.current.on('transaction', onTransaction);\r\n            onTransactionRef.current = onTransaction;\r\n        }\r\n        if (onUpdate) {\r\n            editorRef.current.off('update', onUpdateRef.current);\r\n            editorRef.current.on('update', onUpdate);\r\n            onUpdateRef.current = onUpdate;\r\n        }\r\n    }, [onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate, editorRef.current]);\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        let isMounted = true;\r\n        const editor = new Editor(options);\r\n        editorRef.current = editor;\r\n        editorRef.current.on('transaction', () => {\r\n            requestAnimationFrame(() => {\r\n                requestAnimationFrame(() => {\r\n                    if (isMounted) {\r\n                        forceUpdate({});\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return () => {\r\n            isMounted = false;\r\n            editor.destroy();\r\n        };\r\n    }, deps);\r\n    return editorRef.current;\r\n};\n\nconst EditorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\r\n    editor: null,\r\n});\r\nconst EditorConsumer = EditorContext.Consumer;\r\nconst useCurrentEditor = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorContext);\r\nconst EditorProvider = ({ children, slotAfter, slotBefore, ...editorOptions }) => {\r\n    const editor = useEditor(editorOptions);\r\n    if (!editor) {\r\n        return null;\r\n    }\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContext.Provider, { value: { editor } },\r\n        slotBefore,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorConsumer, null, ({ editor: currentEditor }) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContent, { editor: currentEditor }))),\r\n        children,\r\n        slotAfter));\r\n};\n\nconst BubbleMenu = (props) => {\r\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\r\n    const { editor: currentEditor } = useCurrentEditor();\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        var _a;\r\n        if (!element) {\r\n            return;\r\n        }\r\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\r\n            return;\r\n        }\r\n        const { pluginKey = 'bubbleMenu', editor, tippyOptions = {}, updateDelay, shouldShow = null, } = props;\r\n        const menuEditor = editor || currentEditor;\r\n        if (!menuEditor) {\r\n            console.warn('BubbleMenu component is not rendered inside of an editor component or does not have editor prop.');\r\n            return;\r\n        }\r\n        const plugin = (0,_tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__.BubbleMenuPlugin)({\r\n            updateDelay,\r\n            editor: menuEditor,\r\n            element,\r\n            pluginKey,\r\n            shouldShow,\r\n            tippyOptions,\r\n        });\r\n        menuEditor.registerPlugin(plugin);\r\n        return () => menuEditor.unregisterPlugin(pluginKey);\r\n    }, [props.editor, currentEditor, element]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));\r\n};\n\nconst FloatingMenu = (props) => {\r\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\r\n    const { editor: currentEditor } = useCurrentEditor();\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        var _a;\r\n        if (!element) {\r\n            return;\r\n        }\r\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\r\n            return;\r\n        }\r\n        const { pluginKey = 'floatingMenu', editor, tippyOptions = {}, shouldShow = null, } = props;\r\n        const menuEditor = editor || currentEditor;\r\n        if (!menuEditor) {\r\n            console.warn('FloatingMenu component is not rendered inside of an editor component or does not have editor prop.');\r\n            return;\r\n        }\r\n        const plugin = (0,_tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__.FloatingMenuPlugin)({\r\n            pluginKey,\r\n            editor: menuEditor,\r\n            element,\r\n            tippyOptions,\r\n            shouldShow,\r\n        });\r\n        menuEditor.registerPlugin(plugin);\r\n        return () => menuEditor.unregisterPlugin(pluginKey);\r\n    }, [\r\n        props.editor,\r\n        currentEditor,\r\n        element,\r\n    ]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));\r\n};\n\nconst ReactNodeViewContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\r\n    onDragStart: undefined,\r\n});\r\nconst useReactNodeView = () => (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ReactNodeViewContext);\n\nconst NodeViewContent = props => {\r\n    const Tag = props.as || 'div';\r\n    const { nodeViewContentRef } = useReactNodeView();\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, { ...props, ref: nodeViewContentRef, \"data-node-view-content\": \"\", style: {\r\n            whiteSpace: 'pre-wrap',\r\n            ...props.style,\r\n        } }));\r\n};\n\nconst NodeViewWrapper = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref) => {\r\n    const { onDragStart } = useReactNodeView();\r\n    const Tag = props.as || 'div';\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, { ...props, ref: ref, \"data-node-view-wrapper\": \"\", onDragStart: onDragStart, style: {\r\n            whiteSpace: 'normal',\r\n            ...props.style,\r\n        } }));\r\n});\n\nfunction isClassComponent(Component) {\r\n    return !!(typeof Component === 'function'\r\n        && Component.prototype\r\n        && Component.prototype.isReactComponent);\r\n}\r\nfunction isForwardRefComponent(Component) {\r\n    var _a;\r\n    return !!(typeof Component === 'object'\r\n        && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === 'Symbol(react.forward_ref)');\r\n}\r\nclass ReactRenderer {\r\n    constructor(component, { editor, props = {}, as = 'div', className = '', attrs, }) {\r\n        this.ref = null;\r\n        this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\r\n        this.component = component;\r\n        this.editor = editor;\r\n        this.props = props;\r\n        this.element = document.createElement(as);\r\n        this.element.classList.add('react-renderer');\r\n        if (className) {\r\n            this.element.classList.add(...className.split(' '));\r\n        }\r\n        if (attrs) {\r\n            Object.keys(attrs).forEach(key => {\r\n                this.element.setAttribute(key, attrs[key]);\r\n            });\r\n        }\r\n        this.render();\r\n    }\r\n    render() {\r\n        var _a, _b;\r\n        const Component = this.component;\r\n        const props = this.props;\r\n        if (isClassComponent(Component) || isForwardRefComponent(Component)) {\r\n            props.ref = (ref) => {\r\n                this.ref = ref;\r\n            };\r\n        }\r\n        this.reactElement = react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { ...props });\r\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.setRenderer(this.id, this);\r\n    }\r\n    updateProps(props = {}) {\r\n        this.props = {\r\n            ...this.props,\r\n            ...props,\r\n        };\r\n        this.render();\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.removeRenderer(this.id);\r\n    }\r\n}\n\nclass ReactNodeView extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView {\r\n    mount() {\r\n        const props = {\r\n            editor: this.editor,\r\n            node: this.node,\r\n            decorations: this.decorations,\r\n            selected: false,\r\n            extension: this.extension,\r\n            getPos: () => this.getPos(),\r\n            updateAttributes: (attributes = {}) => this.updateAttributes(attributes),\r\n            deleteNode: () => this.deleteNode(),\r\n        };\r\n        if (!this.component.displayName) {\r\n            const capitalizeFirstChar = (string) => {\r\n                return string.charAt(0).toUpperCase() + string.substring(1);\r\n            };\r\n            this.component.displayName = capitalizeFirstChar(this.extension.name);\r\n        }\r\n        const ReactNodeViewProvider = componentProps => {\r\n            const Component = this.component;\r\n            const onDragStart = this.onDragStart.bind(this);\r\n            const nodeViewContentRef = element => {\r\n                if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {\r\n                    element.appendChild(this.contentDOMElement);\r\n                }\r\n            };\r\n            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactNodeViewContext.Provider, { value: { onDragStart, nodeViewContentRef } },\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { ...componentProps }))));\r\n        };\r\n        ReactNodeViewProvider.displayName = 'ReactNodeView';\r\n        if (this.node.isLeaf) {\r\n            this.contentDOMElement = null;\r\n        }\r\n        else if (this.options.contentDOMElementTag) {\r\n            this.contentDOMElement = document.createElement(this.options.contentDOMElementTag);\r\n        }\r\n        else {\r\n            this.contentDOMElement = document.createElement(this.node.isInline ? 'span' : 'div');\r\n        }\r\n        if (this.contentDOMElement) {\r\n            // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\r\n            // With this fix it seems to work fine\r\n            // See: https://github.com/ueberdosis/tiptap/issues/1197\r\n            this.contentDOMElement.style.whiteSpace = 'inherit';\r\n        }\r\n        let as = this.node.isInline ? 'span' : 'div';\r\n        if (this.options.as) {\r\n            as = this.options.as;\r\n        }\r\n        const { className = '' } = this.options;\r\n        this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this);\r\n        this.editor.on('selectionUpdate', this.handleSelectionUpdate);\r\n        this.renderer = new ReactRenderer(ReactNodeViewProvider, {\r\n            editor: this.editor,\r\n            props,\r\n            as,\r\n            className: `node-${this.node.type.name} ${className}`.trim(),\r\n            attrs: this.options.attrs,\r\n        });\r\n    }\r\n    get dom() {\r\n        var _a;\r\n        if (this.renderer.element.firstElementChild\r\n            && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {\r\n            throw Error('Please use the NodeViewWrapper component for your node view.');\r\n        }\r\n        return this.renderer.element;\r\n    }\r\n    get contentDOM() {\r\n        if (this.node.isLeaf) {\r\n            return null;\r\n        }\r\n        return this.contentDOMElement;\r\n    }\r\n    handleSelectionUpdate() {\r\n        const { from, to } = this.editor.state.selection;\r\n        if (from <= this.getPos() && to >= this.getPos() + this.node.nodeSize) {\r\n            if (this.renderer.props.selected) {\r\n                return;\r\n            }\r\n            this.selectNode();\r\n        }\r\n        else {\r\n            if (!this.renderer.props.selected) {\r\n                return;\r\n            }\r\n            this.deselectNode();\r\n        }\r\n    }\r\n    update(node, decorations) {\r\n        const updateProps = (props) => {\r\n            this.renderer.updateProps(props);\r\n        };\r\n        if (node.type !== this.node.type) {\r\n            return false;\r\n        }\r\n        if (typeof this.options.update === 'function') {\r\n            const oldNode = this.node;\r\n            const oldDecorations = this.decorations;\r\n            this.node = node;\r\n            this.decorations = decorations;\r\n            return this.options.update({\r\n                oldNode,\r\n                oldDecorations,\r\n                newNode: node,\r\n                newDecorations: decorations,\r\n                updateProps: () => updateProps({ node, decorations }),\r\n            });\r\n        }\r\n        if (node === this.node && this.decorations === decorations) {\r\n            return true;\r\n        }\r\n        this.node = node;\r\n        this.decorations = decorations;\r\n        updateProps({ node, decorations });\r\n        return true;\r\n    }\r\n    selectNode() {\r\n        this.renderer.updateProps({\r\n            selected: true,\r\n        });\r\n        this.renderer.element.classList.add('ProseMirror-selectednode');\r\n    }\r\n    deselectNode() {\r\n        this.renderer.updateProps({\r\n            selected: false,\r\n        });\r\n        this.renderer.element.classList.remove('ProseMirror-selectednode');\r\n    }\r\n    destroy() {\r\n        this.renderer.destroy();\r\n        this.editor.off('selectionUpdate', this.handleSelectionUpdate);\r\n        this.contentDOMElement = null;\r\n    }\r\n}\r\nfunction ReactNodeViewRenderer(component, options) {\r\n    return (props) => {\r\n        // try to get the parent component\r\n        // this is important for vue devtools to show the component hierarchy correctly\r\n        // maybe it’s `undefined` because <editor-content> isn’t rendered yet\r\n        if (!props.editor.contentComponent) {\r\n            return {};\r\n        }\r\n        return new ReactNodeView(component, props, options);\r\n    };\r\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/starter-kit/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StarterKit: () => (/* binding */ StarterKit),\n/* harmony export */   \"default\": () => (/* binding */ StarterKit)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-blockquote */ \"(ssr)/./node_modules/@tiptap/extension-blockquote/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-bullet-list */ \"(ssr)/./node_modules/@tiptap/extension-bullet-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-code-block */ \"(ssr)/./node_modules/@tiptap/extension-code-block/dist/index.js\");\n/* harmony import */ var _tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-document */ \"(ssr)/./node_modules/@tiptap/extension-document/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-heading */ \"(ssr)/./node_modules/@tiptap/extension-heading/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-horizontal-rule */ \"(ssr)/./node_modules/@tiptap/extension-horizontal-rule/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-list-item */ \"(ssr)/./node_modules/@tiptap/extension-list-item/dist/index.js\");\n/* harmony import */ var _tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-ordered-list */ \"(ssr)/./node_modules/@tiptap/extension-ordered-list/dist/index.js\");\n/* harmony import */ var _tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-paragraph */ \"(ssr)/./node_modules/@tiptap/extension-paragraph/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst StarterKit = _tiptap_core__WEBPACK_IMPORTED_MODULE_18__.Extension.create({\r\n    name: 'starterKit',\r\n    addExtensions() {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\r\n        const extensions = [];\r\n        if (this.options.blockquote !== false) {\r\n            extensions.push(_tiptap_extension_blockquote__WEBPACK_IMPORTED_MODULE_0__.Blockquote.configure((_a = this.options) === null || _a === void 0 ? void 0 : _a.blockquote));\r\n        }\r\n        if (this.options.bold !== false) {\r\n            extensions.push(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_1__.Bold.configure((_b = this.options) === null || _b === void 0 ? void 0 : _b.bold));\r\n        }\r\n        if (this.options.bulletList !== false) {\r\n            extensions.push(_tiptap_extension_bullet_list__WEBPACK_IMPORTED_MODULE_2__.BulletList.configure((_c = this.options) === null || _c === void 0 ? void 0 : _c.bulletList));\r\n        }\r\n        if (this.options.code !== false) {\r\n            extensions.push(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_3__.Code.configure((_d = this.options) === null || _d === void 0 ? void 0 : _d.code));\r\n        }\r\n        if (this.options.codeBlock !== false) {\r\n            extensions.push(_tiptap_extension_code_block__WEBPACK_IMPORTED_MODULE_4__.CodeBlock.configure((_e = this.options) === null || _e === void 0 ? void 0 : _e.codeBlock));\r\n        }\r\n        if (this.options.document !== false) {\r\n            extensions.push(_tiptap_extension_document__WEBPACK_IMPORTED_MODULE_5__.Document.configure((_f = this.options) === null || _f === void 0 ? void 0 : _f.document));\r\n        }\r\n        if (this.options.dropcursor !== false) {\r\n            extensions.push(_tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_6__.Dropcursor.configure((_g = this.options) === null || _g === void 0 ? void 0 : _g.dropcursor));\r\n        }\r\n        if (this.options.gapcursor !== false) {\r\n            extensions.push(_tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_7__.Gapcursor.configure((_h = this.options) === null || _h === void 0 ? void 0 : _h.gapcursor));\r\n        }\r\n        if (this.options.hardBreak !== false) {\r\n            extensions.push(_tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_8__.HardBreak.configure((_j = this.options) === null || _j === void 0 ? void 0 : _j.hardBreak));\r\n        }\r\n        if (this.options.heading !== false) {\r\n            extensions.push(_tiptap_extension_heading__WEBPACK_IMPORTED_MODULE_9__.Heading.configure((_k = this.options) === null || _k === void 0 ? void 0 : _k.heading));\r\n        }\r\n        if (this.options.history !== false) {\r\n            extensions.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_10__.History.configure((_l = this.options) === null || _l === void 0 ? void 0 : _l.history));\r\n        }\r\n        if (this.options.horizontalRule !== false) {\r\n            extensions.push(_tiptap_extension_horizontal_rule__WEBPACK_IMPORTED_MODULE_11__.HorizontalRule.configure((_m = this.options) === null || _m === void 0 ? void 0 : _m.horizontalRule));\r\n        }\r\n        if (this.options.italic !== false) {\r\n            extensions.push(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_12__.Italic.configure((_o = this.options) === null || _o === void 0 ? void 0 : _o.italic));\r\n        }\r\n        if (this.options.listItem !== false) {\r\n            extensions.push(_tiptap_extension_list_item__WEBPACK_IMPORTED_MODULE_13__.ListItem.configure((_p = this.options) === null || _p === void 0 ? void 0 : _p.listItem));\r\n        }\r\n        if (this.options.orderedList !== false) {\r\n            extensions.push(_tiptap_extension_ordered_list__WEBPACK_IMPORTED_MODULE_14__.OrderedList.configure((_q = this.options) === null || _q === void 0 ? void 0 : _q.orderedList));\r\n        }\r\n        if (this.options.paragraph !== false) {\r\n            extensions.push(_tiptap_extension_paragraph__WEBPACK_IMPORTED_MODULE_15__.Paragraph.configure((_r = this.options) === null || _r === void 0 ? void 0 : _r.paragraph));\r\n        }\r\n        if (this.options.strike !== false) {\r\n            extensions.push(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_16__.Strike.configure((_s = this.options) === null || _s === void 0 ? void 0 : _s.strike));\r\n        }\r\n        if (this.options.text !== false) {\r\n            extensions.push(_tiptap_extension_text__WEBPACK_IMPORTED_MODULE_17__.Text.configure((_t = this.options) === null || _t === void 0 ? void 0 : _t.text));\r\n        }\r\n        return extensions;\r\n    },\r\n});\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9zdGFydGVyLWtpdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUNpQjtBQUNaO0FBQ2E7QUFDYjtBQUNXO0FBQ0g7QUFDSTtBQUNGO0FBQ0M7QUFDTDtBQUNBO0FBQ2U7QUFDakI7QUFDSztBQUNNO0FBQ0w7QUFDTjtBQUNKOztBQUU5QyxtQkFBbUIsb0RBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvRUFBVTtBQUN0QztBQUNBO0FBQ0EsNEJBQTRCLHdEQUFJO0FBQ2hDO0FBQ0E7QUFDQSw0QkFBNEIscUVBQVU7QUFDdEM7QUFDQTtBQUNBLDRCQUE0Qix3REFBSTtBQUNoQztBQUNBO0FBQ0EsNEJBQTRCLG1FQUFTO0FBQ3JDO0FBQ0E7QUFDQSw0QkFBNEIsZ0VBQVE7QUFDcEM7QUFDQTtBQUNBLDRCQUE0QixvRUFBVTtBQUN0QztBQUNBO0FBQ0EsNEJBQTRCLGtFQUFTO0FBQ3JDO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQVM7QUFDckM7QUFDQTtBQUNBLDRCQUE0Qiw4REFBTztBQUNuQztBQUNBO0FBQ0EsNEJBQTRCLCtEQUFPO0FBQ25DO0FBQ0E7QUFDQSw0QkFBNEIsOEVBQWM7QUFDMUM7QUFDQTtBQUNBLDRCQUE0Qiw2REFBTTtBQUNsQztBQUNBO0FBQ0EsNEJBQTRCLGtFQUFRO0FBQ3BDO0FBQ0E7QUFDQSw0QkFBNEIsd0VBQVc7QUFDdkM7QUFDQTtBQUNBLDRCQUE0QixtRUFBUztBQUNyQztBQUNBO0FBQ0EsNEJBQTRCLDZEQUFNO0FBQ2xDO0FBQ0E7QUFDQSw0QkFBNEIseURBQUk7QUFDaEM7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUU0QztBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9zdGFydGVyLWtpdC9kaXN0L2luZGV4LmpzPzQ5MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IEJsb2NrcXVvdGUgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1ibG9ja3F1b3RlJztcbmltcG9ydCB7IEJvbGQgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1ib2xkJztcbmltcG9ydCB7IEJ1bGxldExpc3QgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1idWxsZXQtbGlzdCc7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tY29kZSc7XG5pbXBvcnQgeyBDb2RlQmxvY2sgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1jb2RlLWJsb2NrJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tZG9jdW1lbnQnO1xuaW1wb3J0IHsgRHJvcGN1cnNvciB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWRyb3BjdXJzb3InO1xuaW1wb3J0IHsgR2FwY3Vyc29yIH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yJztcbmltcG9ydCB7IEhhcmRCcmVhayB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWhhcmQtYnJlYWsnO1xuaW1wb3J0IHsgSGVhZGluZyB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWhlYWRpbmcnO1xuaW1wb3J0IHsgSGlzdG9yeSB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLWhpc3RvcnknO1xuaW1wb3J0IHsgSG9yaXpvbnRhbFJ1bGUgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1ob3Jpem9udGFsLXJ1bGUnO1xuaW1wb3J0IHsgSXRhbGljIH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24taXRhbGljJztcbmltcG9ydCB7IExpc3RJdGVtIH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tbGlzdC1pdGVtJztcbmltcG9ydCB7IE9yZGVyZWRMaXN0IH0gZnJvbSAnQHRpcHRhcC9leHRlbnNpb24tb3JkZXJlZC1saXN0JztcbmltcG9ydCB7IFBhcmFncmFwaCB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXBhcmFncmFwaCc7XG5pbXBvcnQgeyBTdHJpa2UgfSBmcm9tICdAdGlwdGFwL2V4dGVuc2lvbi1zdHJpa2UnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJ0B0aXB0YXAvZXh0ZW5zaW9uLXRleHQnO1xuXG5jb25zdCBTdGFydGVyS2l0ID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnc3RhcnRlcktpdCcsXHJcbiAgICBhZGRFeHRlbnNpb25zKCkge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xLCBfciwgX3MsIF90O1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJsb2NrcXVvdGUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChCbG9ja3F1b3RlLmNvbmZpZ3VyZSgoX2EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ibG9ja3F1b3RlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYm9sZCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKEJvbGQuY29uZmlndXJlKChfYiA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmJvbGQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRMaXN0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLnB1c2goQnVsbGV0TGlzdC5jb25maWd1cmUoKF9jID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYnVsbGV0TGlzdCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvZGUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChDb2RlLmNvbmZpZ3VyZSgoX2QgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jb2RlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29kZUJsb2NrICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLnB1c2goQ29kZUJsb2NrLmNvbmZpZ3VyZSgoX2UgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jb2RlQmxvY2spKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kb2N1bWVudCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKERvY3VtZW50LmNvbmZpZ3VyZSgoX2YgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5kb2N1bWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRyb3BjdXJzb3IgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChEcm9wY3Vyc29yLmNvbmZpZ3VyZSgoX2cgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5kcm9wY3Vyc29yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2FwY3Vyc29yICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLnB1c2goR2FwY3Vyc29yLmNvbmZpZ3VyZSgoX2ggPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5nYXBjdXJzb3IpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXJkQnJlYWsgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChIYXJkQnJlYWsuY29uZmlndXJlKChfaiA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLmhhcmRCcmVhaykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRpbmcgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChIZWFkaW5nLmNvbmZpZ3VyZSgoX2sgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfay5oZWFkaW5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlzdG9yeSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKEhpc3RvcnkuY29uZmlndXJlKChfbCA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLmhpc3RvcnkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ob3Jpem9udGFsUnVsZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKEhvcml6b250YWxSdWxlLmNvbmZpZ3VyZSgoX20gPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9tID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbS5ob3Jpem9udGFsUnVsZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLml0YWxpYyAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKEl0YWxpYy5jb25maWd1cmUoKF9vID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX28uaXRhbGljKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGlzdEl0ZW0gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucHVzaChMaXN0SXRlbS5jb25maWd1cmUoKF9wID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3AubGlzdEl0ZW0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vcmRlcmVkTGlzdCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKE9yZGVyZWRMaXN0LmNvbmZpZ3VyZSgoX3EgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9xID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcS5vcmRlcmVkTGlzdCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhcmFncmFwaCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKFBhcmFncmFwaC5jb25maWd1cmUoKF9yID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3IucGFyYWdyYXBoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3RyaWtlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLnB1c2goU3RyaWtlLmNvbmZpZ3VyZSgoX3MgPSB0aGlzLm9wdGlvbnMpID09PSBudWxsIHx8IF9zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcy5zdHJpa2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50ZXh0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLnB1c2goVGV4dC5jb25maWd1cmUoKF90ID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3QudGV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9ucztcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBTdGFydGVyS2l0LCBTdGFydGVyS2l0IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/starter-kit/dist/index.js\n");

/***/ })

};
;